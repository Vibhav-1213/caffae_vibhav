%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: bw_shape_733.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Zydd
%%CreationDate: 9/26/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-09-26T17:04:48+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9N319a6RaQAW7mDmlvFF&#xA;bR1CAiijiKAKKUAHsACSBiqKe1tpJ47h4Ue4hDCGZlBdA+zcWO4r3piqjBqMU2oXNisciyWoQyOy&#xA;0RvUFRwbv/n4HFW3Fpp1pcTRQBIkDzyxwR/ExA5MQiCrO1PmcVcgs9Rs7eeSASRSCO4iSZASrbOj&#xA;cTWjL+BxV02oRw31tZtHKz3QcpKqExr6YBo7/sk9sVVUtreOaSdIkSabj60qqAz8BReTDc0HSuKq&#xA;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&#xA;tzJUICKseRoAopUk+5JJJOKv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
gsave
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
clp
23.4248 21.6226 mo
21.6226 26.5752 li
26.5752 28.3774 li
28.3774 23.4248 li
23.4248 21.6226 li
cp
23.25 21.2471 mo
28.7529 23.25 li
26.75 28.7529 li
21.2471 26.75 li
23.25 21.2471 li
cp
.0392157 .0392157 .0392157 rgb
f
23.1099 70.9468 mo
20.9468 76.8901 li
26.8901 79.0532 li
29.0532 73.1099 li
23.1099 70.9468 li
cp
22.8999 70.4966 mo
29.5034 72.8999 li
27.1001 79.5034 li
20.4966 77.1001 li
22.8999 70.4966 li
cp
f
22.7949 120.271 mo
20.2715 127.205 li
27.2051 129.729 li
29.7285 122.795 li
22.7949 120.271 li
cp
22.5498 119.746 mo
30.2539 122.55 li
27.4502 130.254 li
19.7461 127.45 li
22.5498 119.746 li
cp
f
22.48 169.596 mo
19.5957 177.52 li
27.52 180.404 li
30.4043 172.48 li
22.48 169.596 li
cp
22.2002 168.996 mo
31.0044 172.2 li
27.7998 181.004 li
18.9956 177.8 li
22.2002 168.996 li
cp
f
22.165 218.92 mo
18.9204 227.835 li
27.835 231.08 li
31.0796 222.165 li
22.165 218.92 li
cp
21.8501 218.245 mo
31.7554 221.85 li
28.1499 231.755 li
18.2446 228.15 li
21.8501 218.245 li
cp
f
21.8501 268.245 mo
18.2446 278.15 li
28.1499 281.755 li
31.7554 271.85 li
21.8501 268.245 li
cp
21.5 267.494 mo
32.5059 271.5 li
28.5 282.506 li
17.4941 278.5 li
21.5 267.494 li
cp
f
21.5352 317.569 mo
17.5693 328.465 li
28.4648 332.431 li
32.4307 321.535 li
21.5352 317.569 li
cp
21.1499 316.744 mo
33.2563 321.15 li
28.8501 333.256 li
16.7437 328.85 li
21.1499 316.744 li
cp
f
21.2202 366.894 mo
16.894 378.78 li
28.7798 383.106 li
33.106 371.22 li
21.2202 366.894 li
cp
20.7998 365.993 mo
34.0068 370.8 li
29.2002 384.007 li
15.9932 379.2 li
20.7998 365.993 li
cp
f
20.9053 416.219 mo
16.2183 429.095 li
29.0947 433.781 li
33.7817 420.905 li
20.9053 416.219 li
cp
20.4502 415.242 mo
34.7573 420.45 li
29.5498 434.758 li
15.2427 429.55 li
20.4502 415.242 li
cp
f
20.5898 465.543 mo
15.543 479.41 li
29.4102 484.457 li
34.457 470.59 li
20.5898 465.543 li
cp
20.1001 464.492 mo
35.5078 470.1 li
29.8999 485.508 li
14.4922 479.9 li
20.1001 464.492 li
cp
f
20.2749 514.867 mo
14.8672 529.725 li
29.7251 535.133 li
35.1328 520.275 li
20.2749 514.867 li
cp
19.75 513.741 mo
36.2588 519.75 li
30.25 536.259 li
13.7412 530.25 li
19.75 513.741 li
cp
f
19.96 564.191 mo
14.1919 580.04 li
30.04 585.809 li
35.8081 569.96 li
19.96 564.191 li
cp
19.3999 562.991 mo
37.0093 569.4 li
30.6001 587.009 li
12.9907 580.6 li
19.3999 562.991 li
cp
f
19.645 613.517 mo
13.5161 630.354 li
30.355 636.483 li
36.4839 619.646 li
19.645 613.517 li
cp
19.0503 612.24 mo
37.7598 619.05 li
30.9497 637.76 li
12.2402 630.95 li
19.0503 612.24 li
cp
f
19.3301 662.841 mo
12.8408 680.67 li
30.6699 687.159 li
37.1592 669.33 li
19.3301 662.841 li
cp
18.7002 661.489 mo
38.5103 668.7 li
31.2998 688.511 li
11.4897 681.3 li
18.7002 661.489 li
cp
f
19.0151 712.165 mo
12.165 730.985 li
30.9849 737.835 li
37.835 719.015 li
19.0151 712.165 li
cp
18.3501 710.739 mo
39.2607 718.35 li
31.6499 739.261 li
10.7393 731.65 li
18.3501 710.739 li
cp
f
18.7002 761.489 mo
11.4897 781.3 li
31.2998 788.511 li
38.5103 768.7 li
18.7002 761.489 li
cp
18 759.988 mo
40.0112 768 li
32 790.012 li
9.98877 782 li
18 759.988 li
cp
f
18.3853 810.814 mo
10.814 831.615 li
31.6147 839.186 li
39.1855 818.385 li
18.3853 810.814 li
cp
17.6499 809.238 mo
40.7622 817.65 li
32.3501 840.762 li
9.23779 832.35 li
17.6499 809.238 li
cp
f
18.0698 860.139 mo
10.1387 881.93 li
31.9302 889.861 li
39.8613 868.07 li
18.0698 860.139 li
cp
17.3003 858.487 mo
41.5127 867.3 li
32.6997 891.513 li
8.4873 882.7 li
17.3003 858.487 li
cp
f
17.7549 909.463 mo
9.46338 932.245 li
32.2451 940.537 li
40.5366 917.755 li
17.7549 909.463 li
cp
16.9502 907.737 mo
42.2632 916.95 li
33.0498 942.263 li
7.73682 933.05 li
16.9502 907.737 li
cp
f
17.4399 958.788 mo
8.7876 982.56 li
32.5601 991.212 li
41.2124 967.44 li
17.4399 958.788 li
cp
16.6001 956.986 mo
43.0137 966.6 li
33.3999 993.014 li
6.98633 983.4 li
16.6001 956.986 li
cp
f
73.4907 21.7632 mo
71.7632 26.5093 li
76.5093 28.2368 li
78.2368 23.4907 li
73.4907 21.7632 li
cp
73.3228 21.4033 mo
78.5967 23.3228 li
76.6772 28.5967 li
71.4033 26.6772 li
73.3228 21.4033 li
cp
f
73.189 71.1157 mo
71.1157 76.811 li
76.811 78.8843 li
78.8843 73.189 li
73.189 71.1157 li
cp
72.9873 70.6841 mo
79.3159 72.9873 li
77.0127 79.3159 li
70.6841 77.0127 li
72.9873 70.6841 li
cp
f
72.8867 120.468 mo
70.4683 127.113 li
77.1133 129.532 li
79.5317 122.887 li
72.8867 120.468 li
cp
72.6523 119.965 mo
80.0352 122.652 li
77.3477 130.035 li
69.9648 127.348 li
72.6523 119.965 li
cp
f
72.585 169.821 mo
69.8213 177.415 li
77.415 180.179 li
80.1787 172.585 li
72.585 169.821 li
cp
72.3169 169.246 mo
80.7544 172.317 li
77.6831 180.754 li
69.2456 177.683 li
72.3169 169.246 li
cp
f
72.2832 219.174 mo
69.1738 227.717 li
77.7168 230.826 li
80.8262 222.283 li
72.2832 219.174 li
cp
71.9814 218.526 mo
81.4736 221.981 li
78.0186 231.474 li
68.5264 228.019 li
71.9814 218.526 li
cp
f
71.9814 268.526 mo
68.5264 278.019 li
78.0186 281.474 li
81.4736 271.981 li
71.9814 268.526 li
cp
71.646 267.807 mo
82.1929 271.646 li
78.354 282.193 li
67.8071 278.354 li
71.646 267.807 li
cp
f
71.6792 317.879 mo
67.8789 328.321 li
78.3208 332.121 li
82.1211 321.679 li
71.6792 317.879 li
cp
71.3105 317.088 mo
82.9121 321.311 li
78.6895 332.912 li
67.0879 328.689 li
71.3105 317.088 li
cp
f
71.3774 367.231 mo
67.2314 378.623 li
78.6226 382.769 li
82.7686 371.377 li
71.3774 367.231 li
cp
70.9751 366.369 mo
83.6313 370.975 li
79.0249 383.631 li
66.3687 379.025 li
70.9751 366.369 li
cp
f
71.0757 416.584 mo
66.584 428.925 li
78.9243 433.416 li
83.416 421.075 li
71.0757 416.584 li
cp
70.6396 415.649 mo
84.3511 420.64 li
79.3604 434.351 li
65.6489 429.36 li
70.6396 415.649 li
cp
f
70.7739 465.937 mo
65.937 479.227 li
79.2261 484.063 li
84.063 470.773 li
70.7739 465.937 li
cp
70.3042 464.93 mo
85.0703 470.305 li
79.6958 485.07 li
64.9297 479.695 li
70.3042 464.93 li
cp
f
70.4717 515.289 mo
65.2896 529.528 li
79.5283 534.711 li
84.7104 520.472 li
70.4717 515.289 li
cp
69.9688 514.211 mo
85.7896 519.969 li
80.0313 535.789 li
64.2104 530.031 li
69.9688 514.211 li
cp
f
70.1699 564.643 mo
64.6421 579.83 li
79.8301 585.357 li
85.3579 570.17 li
70.1699 564.643 li
cp
69.6333 563.491 mo
86.5088 569.634 li
80.3667 586.509 li
63.4912 580.366 li
69.6333 563.491 li
cp
f
69.8682 613.995 mo
63.9946 630.132 li
80.1318 636.005 li
86.0054 619.868 li
69.8682 613.995 li
cp
69.2979 612.771 mo
87.228 619.298 li
80.7021 637.229 li
62.772 630.702 li
69.2979 612.771 li
cp
f
69.5664 663.348 mo
63.3472 680.434 li
80.4336 686.652 li
86.6528 669.566 li
69.5664 663.348 li
cp
68.9624 662.053 mo
87.9473 668.963 li
81.0376 687.947 li
62.0527 681.037 li
68.9624 662.053 li
cp
f
69.2646 712.7 mo
62.7002 730.735 li
80.7354 737.3 li
87.2998 719.265 li
69.2646 712.7 li
cp
68.627 711.333 mo
88.6665 718.627 li
81.373 738.667 li
61.3335 731.373 li
68.627 711.333 li
cp
f
68.9624 762.053 mo
62.0527 781.037 li
81.0376 787.947 li
87.9473 768.963 li
68.9624 762.053 li
cp
68.2915 760.614 mo
89.3857 768.292 li
81.7085 789.386 li
60.6143 781.708 li
68.2915 760.614 li
cp
f
68.6606 811.405 mo
61.4053 831.339 li
81.3394 838.595 li
88.5947 818.661 li
68.6606 811.405 li
cp
67.9565 809.895 mo
90.1055 817.956 li
82.0435 840.105 li
59.8945 832.044 li
67.9565 809.895 li
cp
f
68.3589 860.758 mo
60.7578 881.642 li
81.6411 889.242 li
89.2422 868.358 li
68.3589 860.758 li
cp
67.6211 859.176 mo
90.8247 867.621 li
82.3789 890.824 li
59.1753 882.379 li
67.6211 859.176 li
cp
f
68.0571 910.11 mo
60.1104 931.943 li
81.9429 939.89 li
89.8896 918.057 li
68.0571 910.11 li
cp
67.2856 908.456 mo
91.5439 917.285 li
82.7144 941.544 li
58.4561 932.715 li
67.2856 908.456 li
cp
f
67.7549 959.463 mo
59.4634 982.245 li
82.2451 990.537 li
90.5366 967.755 li
67.7549 959.463 li
cp
66.9502 957.737 mo
92.2632 966.95 li
83.0498 992.263 li
57.7368 983.05 li
66.9502 957.737 li
cp
f
123.556 21.9038 mo
121.904 26.4438 li
126.444 28.0962 li
128.096 23.5562 li
123.556 21.9038 li
cp
123.396 21.5601 mo
128.44 23.396 li
126.604 28.4399 li
121.56 26.604 li
123.396 21.5601 li
cp
f
123.268 71.2847 mo
121.285 76.7324 li
126.732 78.7153 li
128.715 73.2676 li
123.268 71.2847 li
cp
123.075 70.8721 mo
129.128 73.0752 li
126.925 79.1279 li
120.872 76.9248 li
123.075 70.8721 li
cp
f
122.979 120.666 mo
120.666 127.021 li
127.021 129.334 li
129.334 122.979 li
122.979 120.666 li
cp
122.754 120.184 mo
129.816 122.754 li
127.246 129.816 li
120.184 127.246 li
122.754 120.184 li
cp
f
122.69 170.046 mo
120.046 177.31 li
127.31 179.954 li
129.954 172.69 li
122.69 170.046 li
cp
122.434 169.496 mo
130.504 172.434 li
127.566 180.504 li
119.496 177.566 li
122.434 169.496 li
cp
f
122.401 219.427 mo
119.427 227.599 li
127.599 230.573 li
130.573 222.401 li
122.401 219.427 li
cp
122.112 218.808 mo
131.192 222.112 li
127.888 231.192 li
118.808 227.888 li
122.112 218.808 li
cp
f
122.112 268.808 mo
118.808 277.888 li
127.888 281.192 li
131.192 272.112 li
122.112 268.808 li
cp
121.792 268.12 mo
131.88 271.792 li
128.208 281.88 li
118.12 278.208 li
121.792 268.12 li
cp
f
121.824 318.188 mo
118.188 328.176 li
128.176 331.812 li
131.812 321.824 li
121.824 318.188 li
cp
121.471 317.432 mo
132.568 321.471 li
128.529 332.568 li
117.432 328.529 li
121.471 317.432 li
cp
f
121.535 367.569 mo
117.569 378.465 li
128.465 382.431 li
132.431 371.535 li
121.535 367.569 li
cp
121.15 366.744 mo
133.256 371.15 li
128.85 383.256 li
116.744 378.85 li
121.15 366.744 li
cp
f
121.246 416.95 mo
116.95 428.754 li
128.754 433.05 li
133.05 421.246 li
121.246 416.95 li
cp
120.829 416.056 mo
133.944 420.829 li
129.171 433.944 li
116.056 429.171 li
120.829 416.056 li
cp
f
120.958 466.331 mo
116.331 479.043 li
129.042 483.669 li
133.669 470.957 li
120.958 466.331 li
cp
120.508 465.367 mo
134.632 470.509 li
129.492 484.633 li
115.368 479.491 li
120.508 465.367 li
cp
f
120.669 515.712 mo
115.712 529.331 li
129.331 534.288 li
134.288 520.669 li
120.669 515.712 li
cp
120.188 514.68 mo
135.32 520.188 li
129.813 535.32 li
114.68 529.813 li
120.188 514.68 li
cp
f
120.38 565.093 mo
115.092 579.62 li
129.62 584.907 li
134.908 570.38 li
120.38 565.093 li
cp
119.867 563.991 mo
136.008 569.867 li
130.133 586.009 li
113.992 580.133 li
119.867 563.991 li
cp
f
120.091 614.474 mo
114.473 629.909 li
129.909 635.526 li
135.527 620.091 li
120.091 614.474 li
cp
119.546 613.304 mo
136.696 619.546 li
130.454 636.696 li
113.304 630.454 li
119.546 613.304 li
cp
f
119.803 663.854 mo
113.854 680.197 li
130.197 686.146 li
136.146 669.803 li
119.803 663.854 li
cp
119.225 662.615 mo
137.384 669.225 li
130.775 687.385 li
112.616 680.775 li
119.225 662.615 li
cp
f
119.514 713.234 mo
113.235 730.486 li
130.486 736.766 li
136.765 719.514 li
119.514 713.234 li
cp
118.904 711.928 mo
138.072 718.904 li
131.096 738.072 li
111.928 731.096 li
118.904 711.928 li
cp
f
119.225 762.615 mo
112.616 780.775 li
130.775 787.385 li
137.384 769.225 li
119.225 762.615 li
cp
118.583 761.239 mo
138.76 768.583 li
131.417 788.761 li
111.24 781.417 li
118.583 761.239 li
cp
f
118.937 811.996 mo
111.997 831.063 li
131.063 838.004 li
138.003 818.937 li
118.937 811.996 li
cp
118.263 810.552 mo
139.448 818.263 li
131.737 839.448 li
110.551 831.737 li
118.263 810.552 li
cp
f
118.647 861.377 mo
111.377 881.353 li
131.353 888.623 li
138.623 868.647 li
118.647 861.377 li
cp
117.942 859.863 mo
140.137 867.941 li
132.058 890.137 li
109.863 882.059 li
117.942 859.863 li
cp
f
118.359 910.758 mo
110.758 931.642 li
131.641 939.242 li
139.242 918.358 li
118.359 910.758 li
cp
117.621 909.176 mo
140.825 917.621 li
132.379 940.824 li
109.175 932.379 li
117.621 909.176 li
cp
f
118.07 960.139 mo
110.139 981.93 li
131.93 989.861 li
139.861 968.07 li
118.07 960.139 li
cp
117.3 958.487 mo
141.513 967.3 li
132.7 991.513 li
108.487 982.7 li
117.3 958.487 li
cp
f
173.622 22.0444 mo
172.044 26.3779 li
176.378 27.9556 li
177.956 23.6221 li
173.622 22.0444 li
cp
173.469 21.7163 mo
178.284 23.4688 li
176.531 28.2837 li
171.716 26.5313 li
173.469 21.7163 li
cp
f
173.346 71.4536 mo
171.454 76.6538 li
176.654 78.5464 li
178.546 73.3462 li
173.346 71.4536 li
cp
173.163 71.0596 mo
178.94 73.1626 li
176.837 78.9404 li
171.06 76.8374 li
173.163 71.0596 li
cp
f
173.071 120.862 mo
170.862 126.929 li
176.929 129.138 li
179.138 123.071 li
173.071 120.862 li
cp
172.856 120.403 mo
179.597 122.856 li
177.144 129.597 li
170.403 127.144 li
172.856 120.403 li
cp
f
172.795 170.271 mo
170.271 177.205 li
177.205 179.729 li
179.729 172.795 li
172.795 170.271 li
cp
172.55 169.746 mo
180.254 172.55 li
177.45 180.254 li
169.746 177.45 li
172.55 169.746 li
cp
f
172.52 219.68 mo
169.68 227.48 li
177.48 230.32 li
180.32 222.52 li
172.52 219.68 li
cp
172.244 219.089 mo
180.911 222.244 li
177.756 230.911 li
169.089 227.756 li
172.244 219.089 li
cp
f
172.244 269.089 mo
169.089 277.756 li
177.756 280.911 li
180.911 272.244 li
172.244 269.089 li
cp
171.938 268.433 mo
181.567 271.938 li
178.063 281.567 li
168.433 278.063 li
171.938 268.433 li
cp
f
171.968 318.498 mo
168.498 328.032 li
178.032 331.502 li
181.502 321.968 li
171.968 318.498 li
cp
171.631 317.776 mo
182.224 321.631 li
178.369 332.224 li
167.776 328.369 li
171.631 317.776 li
cp
f
171.692 367.907 mo
167.907 378.308 li
178.308 382.093 li
182.093 371.692 li
171.692 367.907 li
cp
171.325 367.119 mo
182.881 371.325 li
178.675 382.881 li
167.119 378.675 li
171.325 367.119 li
cp
f
171.417 417.316 mo
167.316 428.583 li
178.583 432.684 li
182.684 421.417 li
171.417 417.316 li
cp
171.019 416.462 mo
183.538 421.019 li
178.981 433.538 li
166.462 428.981 li
171.019 416.462 li
cp
f
171.141 466.725 mo
166.725 478.858 li
178.859 483.275 li
183.275 471.142 li
171.141 466.725 li
cp
170.712 465.806 mo
184.194 470.713 li
179.288 484.194 li
165.806 479.287 li
170.712 465.806 li
cp
f
170.866 516.134 mo
166.134 529.135 li
179.134 533.866 li
183.866 520.865 li
170.866 516.134 li
cp
170.406 515.148 mo
184.851 520.406 li
179.594 534.852 li
165.149 529.594 li
170.406 515.148 li
cp
f
170.59 565.543 mo
165.543 579.41 li
179.41 584.457 li
184.457 570.59 li
170.59 565.543 li
cp
170.1 564.492 mo
185.508 570.1 li
179.9 585.508 li
164.492 579.9 li
170.1 564.492 li
cp
f
170.314 614.952 mo
164.952 629.686 li
179.686 635.048 li
185.048 620.314 li
170.314 614.952 li
cp
169.794 613.835 mo
186.165 619.794 li
180.206 636.165 li
163.835 630.206 li
169.794 613.835 li
cp
f
170.039 664.36 mo
164.361 679.961 li
179.961 685.64 li
185.639 670.039 li
170.039 664.36 li
cp
169.487 663.179 mo
186.821 669.487 li
180.513 686.821 li
163.179 680.513 li
169.487 663.179 li
cp
f
169.763 713.77 mo
163.77 730.237 li
180.237 736.23 li
186.23 719.763 li
169.763 713.77 li
cp
169.181 712.521 mo
187.478 719.182 li
180.819 737.479 li
162.522 730.818 li
169.181 712.521 li
cp
f
169.487 763.179 mo
163.179 780.513 li
180.513 786.821 li
186.821 769.487 li
169.487 763.179 li
cp
168.875 761.865 mo
188.135 768.875 li
181.125 788.135 li
161.865 781.125 li
168.875 761.865 li
cp
f
169.212 812.588 mo
162.587 830.788 li
180.788 837.412 li
187.413 819.212 li
169.212 812.588 li
cp
168.569 811.208 mo
188.792 818.568 li
181.431 838.792 li
161.208 831.432 li
168.569 811.208 li
cp
f
168.937 861.996 mo
161.997 881.063 li
181.063 888.004 li
188.003 868.937 li
168.937 861.996 li
cp
168.263 860.552 mo
189.448 868.263 li
181.737 889.448 li
160.552 881.737 li
168.263 860.552 li
cp
f
168.661 911.405 mo
161.405 931.339 li
181.339 938.595 li
188.595 918.661 li
168.661 911.405 li
cp
167.957 909.895 mo
190.105 917.956 li
182.043 940.105 li
159.895 932.044 li
167.957 909.895 li
cp
f
168.385 960.814 mo
160.814 981.615 li
181.615 989.186 li
189.186 968.385 li
168.385 960.814 li
cp
167.65 959.238 mo
190.762 967.65 li
182.35 990.762 li
159.238 982.35 li
167.65 959.238 li
cp
f
223.688 22.1855 mo
222.186 26.3125 li
226.313 27.8145 li
227.814 23.6875 li
223.688 22.1855 li
cp
223.542 21.8726 mo
228.127 23.5415 li
226.458 28.1274 li
221.873 26.4585 li
223.542 21.8726 li
cp
f
223.425 71.6226 mo
221.623 76.5752 li
226.575 78.3774 li
228.377 73.4248 li
223.425 71.6226 li
cp
223.25 71.2471 mo
228.753 73.25 li
226.75 78.7529 li
221.247 76.75 li
223.25 71.2471 li
cp
f
223.163 121.06 mo
221.06 126.837 li
226.837 128.94 li
228.94 123.163 li
223.163 121.06 li
cp
222.958 120.622 mo
229.378 122.958 li
227.042 129.378 li
220.622 127.042 li
222.958 120.622 li
cp
f
222.9 170.497 mo
220.497 177.1 li
227.1 179.503 li
229.503 172.9 li
222.9 170.497 li
cp
222.667 169.996 mo
230.004 172.667 li
227.333 180.004 li
219.996 177.333 li
222.667 169.996 li
cp
f
222.638 219.934 mo
219.934 227.362 li
227.362 230.066 li
230.066 222.638 li
222.638 219.934 li
cp
222.375 219.371 mo
230.629 222.375 li
227.625 230.629 li
219.371 227.625 li
222.375 219.371 li
cp
f
222.375 269.371 mo
219.371 277.625 li
227.625 280.629 li
230.629 272.375 li
222.375 269.371 li
cp
222.083 268.745 mo
231.255 272.083 li
227.917 281.255 li
218.745 277.917 li
222.083 268.745 li
cp
f
222.112 318.808 mo
218.808 327.888 li
227.888 331.192 li
231.192 322.112 li
222.112 318.808 li
cp
221.792 318.12 mo
231.88 321.792 li
228.208 331.88 li
218.12 328.208 li
221.792 318.12 li
cp
f
221.85 368.245 mo
218.245 378.15 li
228.15 381.755 li
231.755 371.85 li
221.85 368.245 li
cp
221.5 367.494 mo
232.506 371.5 li
228.5 382.506 li
217.494 378.5 li
221.5 367.494 li
cp
f
221.587 417.682 mo
217.682 428.412 li
228.413 432.318 li
232.318 421.588 li
221.587 417.682 li
cp
221.208 416.869 mo
233.131 421.208 li
228.792 433.131 li
216.869 428.792 li
221.208 416.869 li
cp
f
221.325 467.119 mo
217.119 478.675 li
228.675 482.881 li
232.881 471.325 li
221.325 467.119 li
cp
220.917 466.243 mo
233.757 470.917 li
229.083 483.757 li
216.243 479.083 li
220.917 466.243 li
cp
f
221.063 516.556 mo
216.556 528.938 li
228.938 533.444 li
233.444 521.063 li
221.063 516.556 li
cp
220.625 515.618 mo
234.382 520.625 li
229.375 534.382 li
215.618 529.375 li
220.625 515.618 li
cp
f
220.8 565.993 mo
215.993 579.2 li
229.2 584.007 li
234.007 570.8 li
220.8 565.993 li
cp
220.333 564.992 mo
235.008 570.333 li
229.667 585.008 li
214.992 579.667 li
220.333 564.992 li
cp
f
220.538 615.431 mo
215.43 629.463 li
229.462 634.569 li
234.57 620.537 li
220.538 615.431 li
cp
220.042 614.367 mo
235.633 620.042 li
229.958 635.633 li
214.367 629.958 li
220.042 614.367 li
cp
f
220.275 664.867 mo
214.867 679.725 li
229.725 685.133 li
235.133 670.275 li
220.275 664.867 li
cp
219.75 663.741 mo
236.259 669.75 li
230.25 686.259 li
213.741 680.25 li
219.75 663.741 li
cp
f
220.013 714.305 mo
214.304 729.987 li
229.987 735.695 li
235.696 720.013 li
220.013 714.305 li
cp
219.458 713.116 mo
236.884 719.458 li
230.542 736.884 li
213.116 730.542 li
219.458 713.116 li
cp
f
219.75 763.741 mo
213.741 780.25 li
230.25 786.259 li
236.259 769.75 li
219.75 763.741 li
cp
219.167 762.49 mo
237.51 769.167 li
230.833 787.51 li
212.49 780.833 li
219.167 762.49 li
cp
f
219.487 813.179 mo
213.179 830.513 li
230.513 836.821 li
236.821 819.487 li
219.487 813.179 li
cp
218.875 811.865 mo
238.135 818.875 li
231.125 838.135 li
211.865 831.125 li
218.875 811.865 li
cp
f
219.225 862.615 mo
212.616 880.775 li
230.775 887.385 li
237.384 869.225 li
219.225 862.615 li
cp
218.583 861.239 mo
238.76 868.583 li
231.417 888.761 li
211.24 881.417 li
218.583 861.239 li
cp
f
218.962 912.053 mo
212.053 931.037 li
231.038 937.947 li
237.947 918.963 li
218.962 912.053 li
cp
218.292 910.614 mo
239.386 918.292 li
231.708 939.386 li
210.614 931.708 li
218.292 910.614 li
cp
f
218.7 961.489 mo
211.49 981.3 li
231.3 988.511 li
238.51 968.7 li
218.7 961.489 li
cp
218 959.988 mo
240.011 968 li
232 990.012 li
209.989 982 li
218 959.988 li
cp
f
273.753 22.3262 mo
272.326 26.2471 li
276.247 27.6738 li
277.674 23.7529 li
273.753 22.3262 li
cp
273.615 22.0288 mo
277.971 23.6147 li
276.385 27.9712 li
272.029 26.3853 li
273.615 22.0288 li
cp
f
273.504 71.7915 mo
271.792 76.4961 li
276.496 78.2085 li
278.208 73.5039 li
273.504 71.7915 li
cp
273.337 71.4346 mo
278.565 73.3374 li
276.663 78.5654 li
271.435 76.6626 li
273.337 71.4346 li
cp
f
273.254 121.256 mo
271.256 126.746 li
276.746 128.744 li
278.744 123.254 li
273.254 121.256 li
cp
273.061 120.841 mo
279.159 123.061 li
276.939 129.159 li
270.841 126.939 li
273.061 120.841 li
cp
f
273.005 170.722 mo
270.722 176.995 li
276.995 179.278 li
279.278 173.005 li
273.005 170.722 li
cp
272.783 170.247 mo
279.753 172.783 li
277.217 179.753 li
270.247 177.217 li
272.783 170.247 li
cp
f
272.756 220.187 mo
270.187 227.244 li
277.244 229.813 li
279.813 222.756 li
272.756 220.187 li
cp
272.506 219.652 mo
280.348 222.506 li
277.494 230.348 li
269.652 227.494 li
272.506 219.652 li
cp
f
272.506 269.652 mo
269.652 277.494 li
277.494 280.348 li
280.348 272.506 li
272.506 269.652 li
cp
272.229 269.058 mo
280.942 272.229 li
277.771 280.942 li
269.058 277.771 li
272.229 269.058 li
cp
f
272.257 319.117 mo
269.117 327.743 li
277.743 330.883 li
280.883 322.257 li
272.257 319.117 li
cp
271.952 318.464 mo
281.536 321.952 li
278.048 331.536 li
268.464 328.048 li
271.952 318.464 li
cp
f
272.007 368.583 mo
268.583 377.993 li
277.993 381.417 li
281.417 372.007 li
272.007 368.583 li
cp
271.675 367.87 mo
282.13 371.675 li
278.325 382.13 li
267.87 378.325 li
271.675 367.87 li
cp
f
271.758 418.048 mo
268.048 428.242 li
278.242 431.952 li
281.952 421.758 li
271.758 418.048 li
cp
271.398 417.275 mo
282.725 421.398 li
278.602 432.725 li
267.275 428.602 li
271.398 417.275 li
cp
f
271.509 467.513 mo
267.513 478.491 li
278.491 482.487 li
282.487 471.509 li
271.509 467.513 li
cp
271.121 466.682 mo
283.319 471.121 li
278.879 483.318 li
266.681 478.879 li
271.121 466.682 li
cp
f
271.259 516.979 mo
266.979 528.74 li
278.741 533.021 li
283.021 521.26 li
271.259 516.979 li
cp
270.844 516.087 mo
283.913 520.844 li
279.156 533.913 li
266.087 529.156 li
270.844 516.087 li
cp
f
271.01 566.443 mo
266.443 578.99 li
278.99 583.557 li
283.557 571.01 li
271.01 566.443 li
cp
270.567 565.493 mo
284.507 570.566 li
279.433 584.507 li
265.493 579.434 li
270.567 565.493 li
cp
f
270.761 615.909 mo
265.909 629.239 li
279.239 634.091 li
284.091 620.761 li
270.761 615.909 li
cp
270.29 614.898 mo
285.102 620.29 li
279.71 635.102 li
264.898 629.71 li
270.29 614.898 li
cp
f
270.511 665.374 mo
265.374 679.488 li
279.489 684.626 li
284.626 670.512 li
270.511 665.374 li
cp
270.013 664.305 mo
285.696 670.013 li
279.987 685.695 li
264.304 679.987 li
270.013 664.305 li
cp
f
270.262 714.839 mo
264.839 729.738 li
279.738 735.161 li
285.161 720.262 li
270.262 714.839 li
cp
269.735 713.71 mo
286.29 719.735 li
280.265 736.29 li
263.71 730.265 li
269.735 713.71 li
cp
f
270.013 764.305 mo
264.304 779.987 li
279.987 785.695 li
285.696 770.013 li
270.013 764.305 li
cp
269.458 763.116 mo
286.884 769.458 li
280.542 786.884 li
263.116 780.542 li
269.458 763.116 li
cp
f
269.763 813.77 mo
263.77 830.237 li
280.237 836.23 li
286.23 819.763 li
269.763 813.77 li
cp
269.181 812.521 mo
287.478 819.182 li
280.819 837.479 li
262.522 830.818 li
269.181 812.521 li
cp
f
269.514 863.234 mo
263.235 880.486 li
280.486 886.766 li
286.765 869.514 li
269.514 863.234 li
cp
268.904 861.928 mo
288.072 868.904 li
281.096 888.072 li
261.928 881.096 li
268.904 861.928 li
cp
f
269.265 912.7 mo
262.7 930.735 li
280.735 937.3 li
287.3 919.265 li
269.265 912.7 li
cp
268.627 911.333 mo
288.667 918.627 li
281.373 938.667 li
261.333 931.373 li
268.627 911.333 li
cp
f
269.015 962.165 mo
262.165 980.985 li
280.985 987.835 li
287.835 969.015 li
269.015 962.165 li
cp
268.35 960.739 mo
289.261 968.35 li
281.65 989.261 li
260.739 981.65 li
268.35 960.739 li
cp
f
323.818 22.4668 mo
322.467 26.1812 li
326.182 27.5332 li
327.533 23.8188 li
323.818 22.4668 li
cp
323.688 22.1855 mo
327.814 23.6875 li
326.313 27.8145 li
322.186 26.3125 li
323.688 22.1855 li
cp
f
323.582 71.96 mo
321.96 76.4175 li
326.418 78.04 li
328.04 73.5825 li
323.582 71.96 li
cp
323.425 71.6226 mo
328.378 73.4248 li
326.575 78.3774 li
321.622 76.5752 li
323.425 71.6226 li
cp
f
323.347 121.454 mo
321.453 126.654 li
326.653 128.546 li
328.547 123.346 li
323.347 121.454 li
cp
323.162 121.06 mo
328.94 123.163 li
326.838 128.94 li
321.06 126.837 li
323.162 121.06 li
cp
f
323.11 170.947 mo
320.947 176.89 li
326.89 179.053 li
329.053 173.11 li
323.11 170.947 li
cp
322.9 170.497 mo
329.504 172.9 li
327.1 179.503 li
320.496 177.1 li
322.9 170.497 li
cp
f
322.874 220.44 mo
320.44 227.126 li
327.126 229.56 li
329.56 222.874 li
322.874 220.44 li
cp
322.638 219.934 mo
330.066 222.638 li
327.362 230.066 li
319.934 227.362 li
322.638 219.934 li
cp
f
322.638 269.934 mo
319.934 277.362 li
327.362 280.066 li
330.066 272.638 li
322.638 269.934 li
cp
322.375 269.371 mo
330.629 272.375 li
327.625 280.629 li
319.371 277.625 li
322.375 269.371 li
cp
f
322.401 319.427 mo
319.427 327.599 li
327.599 330.573 li
330.573 322.401 li
322.401 319.427 li
cp
322.112 318.808 mo
331.192 322.112 li
327.888 331.192 li
318.808 327.888 li
322.112 318.808 li
cp
f
322.165 368.92 mo
318.92 377.835 li
327.835 381.08 li
331.08 372.165 li
322.165 368.92 li
cp
321.85 368.245 mo
331.755 371.85 li
328.15 381.755 li
318.245 378.15 li
321.85 368.245 li
cp
f
321.929 418.414 mo
318.414 428.071 li
328.071 431.586 li
331.586 421.929 li
321.929 418.414 li
cp
321.588 417.682 mo
332.318 421.588 li
328.412 432.318 li
317.682 428.412 li
321.588 417.682 li
cp
f
321.692 467.907 mo
317.907 478.308 li
328.308 482.093 li
332.093 471.692 li
321.692 467.907 li
cp
321.325 467.119 mo
332.881 471.325 li
328.675 482.881 li
317.119 478.675 li
321.325 467.119 li
cp
f
321.456 517.4 mo
317.4 528.544 li
328.544 532.6 li
332.6 521.456 li
321.456 517.4 li
cp
321.063 516.556 mo
333.444 521.063 li
328.938 533.444 li
316.556 528.938 li
321.063 516.556 li
cp
f
321.22 566.894 mo
316.894 578.78 li
328.78 583.106 li
333.106 571.22 li
321.22 566.894 li
cp
320.8 565.993 mo
334.007 570.8 li
329.2 584.007 li
315.993 579.2 li
320.8 565.993 li
cp
f
320.983 616.387 mo
316.387 629.017 li
329.017 633.613 li
333.613 620.983 li
320.983 616.387 li
cp
320.537 615.431 mo
334.569 620.537 li
329.463 634.569 li
315.431 629.463 li
320.537 615.431 li
cp
f
320.747 665.881 mo
315.881 679.253 li
329.253 684.119 li
334.119 670.747 li
320.747 665.881 li
cp
320.275 664.867 mo
335.133 670.275 li
329.725 685.133 li
314.867 679.725 li
320.275 664.867 li
cp
f
320.512 715.374 mo
315.374 729.488 li
329.488 734.626 li
334.626 720.512 li
320.512 715.374 li
cp
320.013 714.305 mo
335.695 720.013 li
329.987 735.695 li
314.305 729.987 li
320.013 714.305 li
cp
f
320.275 764.867 mo
314.867 779.725 li
329.725 785.133 li
335.133 770.275 li
320.275 764.867 li
cp
319.75 763.741 mo
336.259 769.75 li
330.25 786.259 li
313.741 780.25 li
319.75 763.741 li
cp
f
320.039 814.36 mo
314.36 829.961 li
329.961 835.64 li
335.64 820.039 li
320.039 814.36 li
cp
319.487 813.179 mo
336.821 819.487 li
330.513 836.821 li
313.179 830.513 li
319.487 813.179 li
cp
f
319.803 863.854 mo
313.854 880.197 li
330.197 886.146 li
336.146 869.803 li
319.803 863.854 li
cp
319.225 862.615 mo
337.385 869.225 li
330.775 887.385 li
312.615 880.775 li
319.225 862.615 li
cp
f
319.566 913.348 mo
313.348 930.434 li
330.434 936.652 li
336.652 919.566 li
319.566 913.348 li
cp
318.963 912.053 mo
337.947 918.963 li
331.037 937.947 li
312.053 931.037 li
318.963 912.053 li
cp
f
319.33 962.841 mo
312.841 980.67 li
330.67 987.159 li
337.159 969.33 li
319.33 962.841 li
cp
318.7 961.489 mo
338.511 968.7 li
331.3 988.511 li
311.489 981.3 li
318.7 961.489 li
cp
f
373.885 22.6074 mo
372.607 26.1157 li
376.115 27.3926 li
377.393 23.8843 li
373.885 22.6074 li
cp
373.761 22.3418 mo
377.658 23.7603 li
376.239 27.6582 li
372.342 26.2397 li
373.761 22.3418 li
cp
f
373.661 72.1289 mo
372.129 76.3389 li
376.339 77.8711 li
377.871 73.6611 li
373.661 72.1289 li
cp
373.513 71.8101 mo
378.189 73.5127 li
376.487 78.1899 li
371.811 76.4873 li
373.513 71.8101 li
cp
f
373.438 121.65 mo
371.65 126.562 li
376.562 128.35 li
378.35 123.438 li
373.438 121.65 li
cp
373.265 121.278 mo
378.722 123.265 li
376.735 128.722 li
371.278 126.735 li
373.265 121.278 li
cp
f
373.215 171.172 mo
371.172 176.785 li
376.785 178.828 li
378.828 173.215 li
373.215 171.172 li
cp
373.017 170.747 mo
379.253 173.017 li
376.983 179.253 li
370.747 176.983 li
373.017 170.747 li
cp
f
372.992 220.693 mo
370.693 227.008 li
377.008 229.307 li
379.307 222.992 li
372.992 220.693 li
cp
372.769 220.215 mo
379.785 222.769 li
377.231 229.785 li
370.215 227.231 li
372.769 220.215 li
cp
f
372.769 270.215 mo
370.215 277.231 li
377.231 279.785 li
379.785 272.769 li
372.769 270.215 li
cp
372.521 269.684 mo
380.316 272.521 li
377.479 280.316 li
369.684 277.479 li
372.521 269.684 li
cp
f
372.546 319.737 mo
369.736 327.454 li
377.454 330.263 li
380.264 322.546 li
372.546 319.737 li
cp
372.273 319.152 mo
380.849 322.273 li
377.727 330.848 li
369.151 327.727 li
372.273 319.152 li
cp
f
372.322 369.258 mo
369.258 377.678 li
377.678 380.742 li
380.742 372.322 li
372.322 369.258 li
cp
372.025 368.62 mo
381.38 372.025 li
377.975 381.38 li
368.62 377.975 li
372.025 368.62 li
cp
f
372.1 418.779 mo
368.779 427.9 li
377.9 431.221 li
381.221 422.1 li
372.1 418.779 li
cp
371.777 418.089 mo
381.911 421.777 li
378.223 431.911 li
368.089 428.223 li
371.777 418.089 li
cp
f
371.876 468.301 mo
368.301 478.124 li
378.124 481.699 li
381.699 471.876 li
371.876 468.301 li
cp
371.529 467.557 mo
382.443 471.529 li
378.471 482.443 li
367.557 478.471 li
371.529 467.557 li
cp
f
371.653 517.822 mo
367.822 528.347 li
378.347 532.178 li
382.178 521.653 li
371.653 517.822 li
cp
371.281 517.025 mo
382.975 521.281 li
378.719 532.975 li
367.025 528.719 li
371.281 517.025 li
cp
f
371.43 567.344 mo
367.344 578.57 li
378.57 582.656 li
382.656 571.43 li
371.43 567.344 li
cp
371.033 566.493 mo
383.507 571.033 li
378.967 583.507 li
366.493 578.967 li
371.033 566.493 li
cp
f
371.207 616.865 mo
366.865 628.793 li
378.793 633.135 li
383.135 621.207 li
371.207 616.865 li
cp
370.785 615.962 mo
384.038 620.785 li
379.215 634.038 li
365.962 629.215 li
370.785 615.962 li
cp
f
370.983 666.387 mo
366.387 679.017 li
379.017 683.613 li
383.613 670.983 li
370.983 666.387 li
cp
370.537 665.431 mo
384.569 670.537 li
379.463 684.569 li
365.431 679.463 li
370.537 665.431 li
cp
f
370.761 715.909 mo
365.909 729.239 li
379.239 734.091 li
384.091 720.761 li
370.761 715.909 li
cp
370.29 714.898 mo
385.102 720.29 li
379.71 735.102 li
364.898 729.71 li
370.29 714.898 li
cp
f
370.537 765.431 mo
365.431 779.463 li
379.463 784.569 li
384.569 770.537 li
370.537 765.431 li
cp
370.042 764.367 mo
385.633 770.042 li
379.958 785.633 li
364.367 779.958 li
370.042 764.367 li
cp
f
370.314 814.952 mo
364.952 829.686 li
379.686 835.048 li
385.048 820.314 li
370.314 814.952 li
cp
369.794 813.835 mo
386.165 819.794 li
380.206 836.165 li
363.835 830.206 li
369.794 813.835 li
cp
f
370.091 864.474 mo
364.474 879.909 li
379.909 885.526 li
385.526 870.091 li
370.091 864.474 li
cp
369.546 863.304 mo
386.696 869.546 li
380.454 886.696 li
363.304 880.454 li
369.546 863.304 li
cp
f
369.868 913.995 mo
363.995 930.132 li
380.132 936.005 li
386.005 919.868 li
369.868 913.995 li
cp
369.298 912.771 mo
387.229 919.298 li
380.702 937.229 li
362.771 930.702 li
369.298 912.771 li
cp
f
369.646 963.517 mo
363.517 980.354 li
380.354 986.483 li
386.483 969.646 li
369.646 963.517 li
cp
369.05 962.24 mo
387.76 969.05 li
380.95 987.76 li
362.24 980.95 li
369.05 962.24 li
cp
f
423.95 22.748 mo
422.748 26.0498 li
426.05 27.252 li
427.252 23.9502 li
423.95 22.748 li
cp
423.833 22.498 mo
427.502 23.8335 li
426.167 27.502 li
422.498 26.1665 li
423.833 22.498 li
cp
f
423.74 72.2979 mo
422.298 76.2598 li
426.26 77.7021 li
427.702 73.7402 li
423.74 72.2979 li
cp
423.6 71.9976 mo
428.002 73.6001 li
426.4 78.0024 li
421.998 76.3999 li
423.6 71.9976 li
cp
f
423.53 121.848 mo
421.848 126.47 li
426.47 128.152 li
428.152 123.53 li
423.53 121.848 li
cp
423.366 121.497 mo
428.503 123.367 li
426.634 128.503 li
421.497 126.633 li
423.366 121.497 li
cp
f
423.32 171.397 mo
421.397 176.68 li
426.68 178.603 li
428.603 173.32 li
423.32 171.397 li
cp
423.134 170.997 mo
429.003 173.133 li
426.866 179.003 li
420.997 176.867 li
423.134 170.997 li
cp
f
423.11 220.947 mo
420.947 226.89 li
426.89 229.053 li
429.053 223.11 li
423.11 220.947 li
cp
422.9 220.497 mo
429.504 222.9 li
427.1 229.503 li
420.496 227.1 li
422.9 220.497 li
cp
f
422.9 270.497 mo
420.496 277.1 li
427.1 279.503 li
429.504 272.9 li
422.9 270.497 li
cp
422.667 269.996 mo
430.004 272.667 li
427.333 280.004 li
419.996 277.333 li
422.667 269.996 li
cp
f
422.69 320.046 mo
420.046 327.31 li
427.31 329.954 li
429.954 322.69 li
422.69 320.046 li
cp
422.434 319.496 mo
430.504 322.434 li
427.566 330.504 li
419.496 327.566 li
422.434 319.496 li
cp
f
422.48 369.596 mo
419.596 377.52 li
427.52 380.404 li
430.404 372.48 li
422.48 369.596 li
cp
422.2 368.996 mo
431.005 372.2 li
427.8 381.004 li
418.995 377.8 li
422.2 368.996 li
cp
f
422.27 419.146 mo
419.146 427.73 li
427.73 430.854 li
430.854 422.27 li
422.27 419.146 li
cp
421.967 418.495 mo
431.505 421.967 li
428.033 431.505 li
418.495 428.033 li
421.967 418.495 li
cp
f
422.06 468.695 mo
418.695 477.94 li
427.94 481.305 li
431.305 472.06 li
422.06 468.695 li
cp
421.733 467.995 mo
432.005 471.733 li
428.267 482.005 li
417.995 478.267 li
421.733 467.995 li
cp
f
421.85 518.245 mo
418.245 528.15 li
428.15 531.755 li
431.755 521.85 li
421.85 518.245 li
cp
421.5 517.494 mo
432.506 521.5 li
428.5 532.506 li
417.494 528.5 li
421.5 517.494 li
cp
f
421.64 567.795 mo
417.795 578.36 li
428.36 582.205 li
432.205 571.64 li
421.64 567.795 li
cp
421.267 566.994 mo
433.006 571.267 li
428.733 583.006 li
416.994 578.733 li
421.267 566.994 li
cp
f
421.43 617.344 mo
417.344 628.57 li
428.57 632.656 li
432.656 621.43 li
421.43 617.344 li
cp
421.033 616.493 mo
433.507 621.033 li
428.967 633.507 li
416.493 628.967 li
421.033 616.493 li
cp
f
421.22 666.894 mo
416.894 678.78 li
428.78 683.106 li
433.106 671.22 li
421.22 666.894 li
cp
420.8 665.993 mo
434.007 670.8 li
429.2 684.007 li
415.993 679.2 li
420.8 665.993 li
cp
f
421.01 716.443 mo
416.443 728.99 li
428.99 733.557 li
433.557 721.01 li
421.01 716.443 li
cp
420.566 715.493 mo
434.507 720.566 li
429.434 734.507 li
415.493 729.434 li
420.566 715.493 li
cp
f
420.8 765.993 mo
415.993 779.2 li
429.2 784.007 li
434.007 770.8 li
420.8 765.993 li
cp
420.333 764.992 mo
435.008 770.333 li
429.667 785.008 li
414.992 779.667 li
420.333 764.992 li
cp
f
420.59 815.543 mo
415.543 829.41 li
429.41 834.457 li
434.457 820.59 li
420.59 815.543 li
cp
420.1 814.492 mo
435.508 820.1 li
429.9 835.508 li
414.492 829.9 li
420.1 814.492 li
cp
f
420.38 865.093 mo
415.093 879.62 li
429.62 884.907 li
434.907 870.38 li
420.38 865.093 li
cp
419.867 863.991 mo
436.009 869.867 li
430.133 886.009 li
413.991 880.133 li
419.867 863.991 li
cp
f
420.17 914.643 mo
414.643 929.83 li
429.83 935.357 li
435.357 920.17 li
420.17 914.643 li
cp
419.634 913.491 mo
436.509 919.634 li
430.366 936.509 li
413.491 930.366 li
419.634 913.491 li
cp
f
419.96 964.191 mo
414.191 980.04 li
430.04 985.809 li
435.809 969.96 li
419.96 964.191 li
cp
419.4 962.991 mo
437.009 969.4 li
430.6 987.009 li
412.991 980.6 li
419.4 962.991 li
cp
f
474.016 22.8892 mo
472.889 25.9844 li
475.984 27.1108 li
477.111 24.0156 li
474.016 22.8892 li
cp
473.906 22.6543 mo
477.346 23.9063 li
476.094 27.3457 li
472.654 26.0938 li
473.906 22.6543 li
cp
f
473.818 72.4668 mo
472.467 76.1812 li
476.182 77.5332 li
477.533 73.8188 li
473.818 72.4668 li
cp
473.688 72.1855 mo
477.814 73.6875 li
476.313 77.8145 li
472.186 76.3125 li
473.688 72.1855 li
cp
f
473.622 122.044 mo
472.045 126.378 li
476.378 127.956 li
477.955 123.622 li
473.622 122.044 li
cp
473.469 121.716 mo
478.284 123.469 li
476.531 128.284 li
471.716 126.531 li
473.469 121.716 li
cp
f
473.425 171.623 mo
471.622 176.575 li
476.575 178.377 li
478.378 173.425 li
473.425 171.623 li
cp
473.25 171.247 mo
478.753 173.25 li
476.75 178.753 li
471.247 176.75 li
473.25 171.247 li
cp
f
473.229 221.2 mo
471.2 226.772 li
476.771 228.8 li
478.8 223.228 li
473.229 221.2 li
cp
473.031 220.778 mo
479.222 223.031 li
476.969 229.222 li
470.778 226.969 li
473.031 220.778 li
cp
f
473.031 270.778 mo
470.778 276.969 li
476.969 279.222 li
479.222 273.031 li
473.031 270.778 li
cp
472.813 270.309 mo
479.691 272.813 li
477.188 279.691 li
470.309 277.188 li
472.813 270.309 li
cp
f
472.834 320.356 mo
470.355 327.166 li
477.166 329.644 li
479.645 322.834 li
472.834 320.356 li
cp
472.594 319.84 mo
480.16 322.594 li
477.406 330.16 li
469.84 327.406 li
472.594 319.84 li
cp
f
472.638 369.934 mo
469.934 377.362 li
477.362 380.066 li
480.066 372.638 li
472.638 369.934 li
cp
472.375 369.371 mo
480.629 372.375 li
477.625 380.629 li
469.371 377.625 li
472.375 369.371 li
cp
f
472.44 419.512 mo
469.512 427.56 li
477.56 430.488 li
480.488 422.44 li
472.44 419.512 li
cp
472.156 418.901 mo
481.099 422.156 li
477.844 431.099 li
468.901 427.844 li
472.156 418.901 li
cp
f
472.244 469.089 mo
469.089 477.756 li
477.756 480.911 li
480.911 472.244 li
472.244 469.089 li
cp
471.938 468.433 mo
481.567 471.938 li
478.063 481.567 li
468.433 478.063 li
471.938 468.433 li
cp
f
472.047 518.667 mo
468.667 527.953 li
477.953 531.333 li
481.333 522.047 li
472.047 518.667 li
cp
471.719 517.964 mo
482.036 521.719 li
478.281 532.036 li
467.964 528.281 li
471.719 517.964 li
cp
f
471.85 568.245 mo
468.245 578.15 li
478.15 581.755 li
481.755 571.85 li
471.85 568.245 li
cp
471.5 567.494 mo
482.506 571.5 li
478.5 582.506 li
467.494 578.5 li
471.5 567.494 li
cp
f
471.653 617.822 mo
467.822 628.347 li
478.347 632.178 li
482.178 621.653 li
471.653 617.822 li
cp
471.281 617.025 mo
482.975 621.281 li
478.719 632.975 li
467.025 628.719 li
471.281 617.025 li
cp
f
471.456 667.4 mo
467.4 678.544 li
478.544 682.6 li
482.6 671.456 li
471.456 667.4 li
cp
471.063 666.556 mo
483.444 671.063 li
478.938 683.444 li
466.556 678.938 li
471.063 666.556 li
cp
f
471.26 716.979 mo
466.979 728.74 li
478.74 733.021 li
483.021 721.26 li
471.26 716.979 li
cp
470.844 716.087 mo
483.913 720.844 li
479.156 733.913 li
466.087 729.156 li
470.844 716.087 li
cp
f
471.063 766.556 mo
466.556 778.938 li
478.938 783.444 li
483.444 771.063 li
471.063 766.556 li
cp
470.625 765.618 mo
484.382 770.625 li
479.375 784.382 li
465.618 779.375 li
470.625 765.618 li
cp
f
470.865 816.134 mo
466.134 829.135 li
479.135 833.866 li
483.866 820.865 li
470.865 816.134 li
cp
470.406 815.148 mo
484.852 820.406 li
479.594 834.852 li
465.148 829.594 li
470.406 815.148 li
cp
f
470.669 865.712 mo
465.712 879.331 li
479.331 884.288 li
484.288 870.669 li
470.669 865.712 li
cp
470.188 864.68 mo
485.32 870.188 li
479.813 885.32 li
464.68 879.813 li
470.188 864.68 li
cp
f
470.472 915.289 mo
465.289 929.528 li
479.528 934.711 li
484.711 920.472 li
470.472 915.289 li
cp
469.969 914.211 mo
485.789 919.969 li
480.031 935.789 li
464.211 930.031 li
469.969 914.211 li
cp
f
470.275 964.867 mo
464.867 979.725 li
479.725 985.133 li
485.133 970.275 li
470.275 964.867 li
cp
469.75 963.741 mo
486.259 969.75 li
480.25 986.259 li
463.741 980.25 li
469.75 963.741 li
cp
f
524.081 23.0298 mo
523.029 25.9189 li
525.919 26.9702 li
526.971 24.0811 li
524.081 23.0298 li
cp
523.979 22.811 mo
527.189 23.979 li
526.021 27.189 li
522.811 26.021 li
523.979 22.811 li
cp
f
523.897 72.6357 mo
522.636 76.1025 li
526.103 77.3643 li
527.364 73.8975 li
523.897 72.6357 li
cp
523.775 72.373 mo
527.627 73.7749 li
526.225 77.627 li
522.373 76.2251 li
523.775 72.373 li
cp
f
523.714 122.242 mo
522.241 126.286 li
526.286 127.758 li
527.759 123.714 li
523.714 122.242 li
cp
523.571 121.935 mo
528.064 123.571 li
526.429 128.065 li
521.936 126.429 li
523.571 121.935 li
cp
f
523.53 171.848 mo
521.848 176.47 li
526.47 178.152 li
528.152 173.53 li
523.53 171.848 li
cp
523.367 171.497 mo
528.503 173.367 li
526.633 178.503 li
521.497 176.633 li
523.367 171.497 li
cp
f
523.347 221.454 mo
521.453 226.654 li
526.653 228.546 li
528.547 223.346 li
523.347 221.454 li
cp
523.162 221.06 mo
528.94 223.163 li
526.838 228.94 li
521.06 226.837 li
523.162 221.06 li
cp
f
523.162 271.06 mo
521.06 276.837 li
526.838 278.94 li
528.94 273.163 li
523.162 271.06 li
cp
522.958 270.622 mo
529.378 272.958 li
527.042 279.378 li
520.622 277.042 li
522.958 270.622 li
cp
f
522.979 320.666 mo
520.665 327.021 li
527.021 329.334 li
529.335 322.979 li
522.979 320.666 li
cp
522.754 320.184 mo
529.816 322.754 li
527.246 329.816 li
520.184 327.246 li
522.754 320.184 li
cp
f
522.795 370.271 mo
520.271 377.205 li
527.205 379.729 li
529.729 372.795 li
522.795 370.271 li
cp
522.55 369.746 mo
530.254 372.55 li
527.45 380.254 li
519.746 377.45 li
522.55 369.746 li
cp
f
522.611 419.877 mo
519.877 427.389 li
527.389 430.123 li
530.123 422.611 li
522.611 419.877 li
cp
522.346 419.309 mo
530.691 422.346 li
527.654 430.691 li
519.309 427.654 li
522.346 419.309 li
cp
f
522.428 469.483 mo
519.483 477.572 li
527.572 480.517 li
530.517 472.428 li
522.428 469.483 li
cp
522.142 468.87 mo
531.13 472.142 li
527.858 481.13 li
518.87 477.858 li
522.142 468.87 li
cp
f
522.244 519.089 mo
519.089 527.756 li
527.756 530.911 li
530.911 522.244 li
522.244 519.089 li
cp
521.938 518.433 mo
531.567 521.938 li
528.063 531.567 li
518.433 528.063 li
521.938 518.433 li
cp
f
522.06 568.695 mo
518.695 577.94 li
527.94 581.305 li
531.305 572.06 li
522.06 568.695 li
cp
521.733 567.995 mo
532.005 571.733 li
528.267 582.005 li
517.995 578.267 li
521.733 567.995 li
cp
f
521.876 618.301 mo
518.301 628.124 li
528.124 631.699 li
531.699 621.876 li
521.876 618.301 li
cp
521.529 617.557 mo
532.443 621.529 li
528.471 632.443 li
517.557 628.471 li
521.529 617.557 li
cp
f
521.692 667.907 mo
517.907 678.308 li
528.308 682.093 li
532.093 671.692 li
521.692 667.907 li
cp
521.325 667.119 mo
532.881 671.325 li
528.675 682.881 li
517.119 678.675 li
521.325 667.119 li
cp
f
521.509 717.513 mo
517.513 728.491 li
528.491 732.487 li
532.487 721.509 li
521.509 717.513 li
cp
521.121 716.682 mo
533.318 721.121 li
528.879 733.318 li
516.682 728.879 li
521.121 716.682 li
cp
f
521.325 767.119 mo
517.119 778.675 li
528.675 782.881 li
532.881 771.325 li
521.325 767.119 li
cp
520.917 766.243 mo
533.757 770.917 li
529.083 783.757 li
516.243 779.083 li
520.917 766.243 li
cp
f
521.142 816.725 mo
516.725 828.858 li
528.858 833.275 li
533.275 821.142 li
521.142 816.725 li
cp
520.713 815.806 mo
534.194 820.713 li
529.287 834.194 li
515.806 829.287 li
520.713 815.806 li
cp
f
520.957 866.331 mo
516.331 879.042 li
529.043 883.669 li
533.669 870.958 li
520.957 866.331 li
cp
520.509 865.367 mo
534.633 870.509 li
529.491 884.633 li
515.367 879.491 li
520.509 865.367 li
cp
f
520.773 915.937 mo
515.937 929.227 li
529.227 934.063 li
534.063 920.773 li
520.773 915.937 li
cp
520.305 914.93 mo
535.07 920.305 li
529.695 935.07 li
514.93 929.695 li
520.305 914.93 li
cp
f
520.59 965.543 mo
515.543 979.41 li
529.41 984.457 li
534.457 970.59 li
520.59 965.543 li
cp
520.1 964.492 mo
535.508 970.1 li
529.9 985.508 li
514.492 979.9 li
520.1 964.492 li
cp
f
574.146 23.1704 mo
573.171 25.853 li
575.854 26.8296 li
576.829 24.147 li
574.146 23.1704 li
cp
574.052 22.9673 mo
577.033 24.0522 li
575.948 27.0327 li
572.967 25.9478 li
574.052 22.9673 li
cp
f
573.977 72.8047 mo
572.805 76.0239 li
576.023 77.1953 li
577.195 73.9761 li
573.977 72.8047 li
cp
573.862 72.5605 mo
577.439 73.8623 li
576.138 77.4395 li
572.561 76.1377 li
573.862 72.5605 li
cp
f
573.806 122.438 mo
572.438 126.194 li
576.194 127.562 li
577.562 123.806 li
573.806 122.438 li
cp
573.673 122.154 mo
577.846 123.673 li
576.327 127.846 li
572.154 126.327 li
573.673 122.154 li
cp
f
573.635 172.073 mo
572.072 176.365 li
576.365 177.927 li
577.928 173.635 li
573.635 172.073 li
cp
573.483 171.748 mo
578.253 173.483 li
576.517 178.252 li
571.747 176.517 li
573.483 171.748 li
cp
f
573.465 221.707 mo
571.707 226.536 li
576.535 228.293 li
578.293 223.464 li
573.465 221.707 li
cp
573.294 221.341 mo
578.659 223.294 li
576.706 228.659 li
571.341 226.706 li
573.294 221.341 li
cp
f
573.294 271.341 mo
571.341 276.706 li
576.706 278.659 li
578.659 273.294 li
573.294 271.341 li
cp
573.104 270.935 mo
579.065 273.104 li
576.896 279.065 li
570.935 276.896 li
573.104 270.935 li
cp
f
573.123 320.975 mo
570.975 326.877 li
576.877 329.025 li
579.025 323.123 li
573.123 320.975 li
cp
572.915 320.528 mo
579.473 322.915 li
577.085 329.472 li
570.527 327.085 li
572.915 320.528 li
cp
f
572.952 370.609 mo
570.609 377.047 li
577.048 379.391 li
579.391 372.953 li
572.952 370.609 li
cp
572.725 370.121 mo
579.879 372.725 li
577.275 379.879 li
570.121 377.275 li
572.725 370.121 li
cp
f
572.782 420.243 mo
570.243 427.218 li
577.218 429.757 li
579.757 422.782 li
572.782 420.243 li
cp
572.535 419.715 mo
580.285 422.535 li
577.465 430.285 li
569.715 427.465 li
572.535 419.715 li
cp
f
572.611 469.877 mo
569.877 477.389 li
577.389 480.123 li
580.123 472.611 li
572.611 469.877 li
cp
572.346 469.309 mo
580.691 472.346 li
577.654 480.691 li
569.309 477.654 li
572.346 469.309 li
cp
f
572.44 519.512 mo
569.512 527.56 li
577.56 530.488 li
580.488 522.44 li
572.44 519.512 li
cp
572.156 518.901 mo
581.099 522.156 li
577.844 531.099 li
568.901 527.844 li
572.156 518.901 li
cp
f
572.27 569.146 mo
569.146 577.73 li
577.73 580.854 li
580.854 572.27 li
572.27 569.146 li
cp
571.967 568.495 mo
581.505 571.967 li
578.033 581.505 li
568.495 578.033 li
571.967 568.495 li
cp
f
572.1 618.779 mo
568.779 627.9 li
577.9 631.221 li
581.221 622.1 li
572.1 618.779 li
cp
571.777 618.089 mo
581.911 621.777 li
578.223 631.911 li
568.089 628.223 li
571.777 618.089 li
cp
f
571.929 668.414 mo
568.414 678.071 li
578.071 681.586 li
581.586 671.929 li
571.929 668.414 li
cp
571.588 667.682 mo
582.318 671.588 li
578.412 682.318 li
567.682 678.412 li
571.588 667.682 li
cp
f
571.758 718.048 mo
568.048 728.242 li
578.242 731.952 li
581.952 721.758 li
571.758 718.048 li
cp
571.398 717.275 mo
582.725 721.398 li
578.602 732.725 li
567.275 728.602 li
571.398 717.275 li
cp
f
571.588 767.682 mo
567.682 778.412 li
578.412 782.318 li
582.318 771.588 li
571.588 767.682 li
cp
571.208 766.869 mo
583.131 771.208 li
578.792 783.131 li
566.869 778.792 li
571.208 766.869 li
cp
f
571.417 817.316 mo
567.316 828.583 li
578.583 832.684 li
582.684 821.417 li
571.417 817.316 li
cp
571.019 816.462 mo
583.538 821.019 li
578.981 833.538 li
566.462 828.981 li
571.019 816.462 li
cp
f
571.246 866.95 mo
566.95 878.754 li
578.754 883.05 li
583.05 871.246 li
571.246 866.95 li
cp
570.829 866.056 mo
583.944 870.829 li
579.171 883.944 li
566.056 879.171 li
570.829 866.056 li
cp
f
571.076 916.584 mo
566.584 928.925 li
578.924 933.416 li
583.416 921.075 li
571.076 916.584 li
cp
570.64 915.649 mo
584.351 920.64 li
579.36 934.351 li
565.649 929.36 li
570.64 915.649 li
cp
f
570.905 966.219 mo
566.219 979.095 li
579.095 983.781 li
583.781 970.905 li
570.905 966.219 li
cp
570.45 965.242 mo
584.758 970.45 li
579.55 984.758 li
565.242 979.55 li
570.45 965.242 li
cp
f
624.213 23.311 mo
623.312 25.7876 li
625.787 26.689 li
626.688 24.2124 li
624.213 23.311 li
cp
624.125 23.1235 mo
626.876 24.125 li
625.875 26.8765 li
623.124 25.875 li
624.125 23.1235 li
cp
f
624.055 72.9736 mo
622.974 75.9448 li
625.945 77.0264 li
627.026 74.0552 li
624.055 72.9736 li
cp
623.95 72.748 mo
627.252 73.9502 li
626.05 77.252 li
622.748 76.0498 li
623.95 72.748 li
cp
f
623.897 122.636 mo
622.636 126.103 li
626.103 127.364 li
627.364 123.897 li
623.897 122.636 li
cp
623.775 122.373 mo
627.627 123.775 li
626.225 127.627 li
622.373 126.225 li
623.775 122.373 li
cp
f
623.74 172.298 mo
622.298 176.26 li
626.26 177.702 li
627.702 173.74 li
623.74 172.298 li
cp
623.6 171.998 mo
628.002 173.6 li
626.4 178.002 li
621.998 176.4 li
623.6 171.998 li
cp
f
623.582 221.96 mo
621.96 226.417 li
626.418 228.04 li
628.04 223.583 li
623.582 221.96 li
cp
623.425 221.623 mo
628.378 223.425 li
626.575 228.377 li
621.622 226.575 li
623.425 221.623 li
cp
f
623.425 271.623 mo
621.622 276.575 li
626.575 278.377 li
628.378 273.425 li
623.425 271.623 li
cp
623.25 271.247 mo
628.753 273.25 li
626.75 278.753 li
621.247 276.75 li
623.25 271.247 li
cp
f
623.268 321.285 mo
621.285 326.732 li
626.732 328.715 li
628.715 323.268 li
623.268 321.285 li
cp
623.075 320.872 mo
629.128 323.075 li
626.925 329.128 li
620.872 326.925 li
623.075 320.872 li
cp
f
623.11 370.947 mo
620.947 376.89 li
626.89 379.053 li
629.053 373.11 li
623.11 370.947 li
cp
622.9 370.497 mo
629.504 372.9 li
627.1 379.503 li
620.496 377.1 li
622.9 370.497 li
cp
f
622.952 420.609 mo
620.609 427.048 li
627.048 429.391 li
629.391 422.952 li
622.952 420.609 li
cp
622.725 420.121 mo
629.879 422.725 li
627.275 429.879 li
620.121 427.275 li
622.725 420.121 li
cp
f
622.795 470.271 mo
620.271 477.205 li
627.205 479.729 li
629.729 472.795 li
622.795 470.271 li
cp
622.55 469.746 mo
630.254 472.55 li
627.45 480.254 li
619.746 477.45 li
622.55 469.746 li
cp
f
622.638 519.934 mo
619.934 527.362 li
627.362 530.066 li
630.066 522.638 li
622.638 519.934 li
cp
622.375 519.371 mo
630.629 522.375 li
627.625 530.629 li
619.371 527.625 li
622.375 519.371 li
cp
f
622.48 569.596 mo
619.596 577.52 li
627.52 580.404 li
630.404 572.48 li
622.48 569.596 li
cp
622.2 568.995 mo
631.005 572.2 li
627.8 581.005 li
618.995 577.8 li
622.2 568.995 li
cp
f
622.322 619.258 mo
619.258 627.678 li
627.678 630.742 li
630.742 622.322 li
622.322 619.258 li
cp
622.025 618.62 mo
631.38 622.025 li
627.975 631.38 li
618.62 627.975 li
622.025 618.62 li
cp
f
622.165 668.92 mo
618.92 677.835 li
627.835 681.08 li
631.08 672.165 li
622.165 668.92 li
cp
621.85 668.245 mo
631.755 671.85 li
628.15 681.755 li
618.245 678.15 li
621.85 668.245 li
cp
f
622.008 718.583 mo
618.583 727.992 li
627.992 731.417 li
631.417 722.008 li
622.008 718.583 li
cp
621.675 717.869 mo
632.131 721.675 li
628.325 732.131 li
617.869 728.325 li
621.675 717.869 li
cp
f
621.85 768.245 mo
618.245 778.15 li
628.15 781.755 li
631.755 771.85 li
621.85 768.245 li
cp
621.5 767.494 mo
632.506 771.5 li
628.5 782.506 li
617.494 778.5 li
621.5 767.494 li
cp
f
621.692 817.907 mo
617.907 828.308 li
628.308 832.093 li
632.093 821.692 li
621.692 817.907 li
cp
621.325 817.119 mo
632.881 821.325 li
628.675 832.881 li
617.119 828.675 li
621.325 817.119 li
cp
f
621.535 867.569 mo
617.569 878.465 li
628.465 882.431 li
632.431 871.535 li
621.535 867.569 li
cp
621.15 866.744 mo
633.256 871.15 li
628.85 883.256 li
616.744 878.85 li
621.15 866.744 li
cp
f
621.378 917.231 mo
617.231 928.622 li
628.622 932.769 li
632.769 921.378 li
621.378 917.231 li
cp
620.975 916.368 mo
633.632 920.975 li
629.025 933.632 li
616.368 929.025 li
620.975 916.368 li
cp
f
621.22 966.894 mo
616.894 978.78 li
628.78 983.106 li
633.106 971.22 li
621.22 966.894 li
cp
620.8 965.993 mo
634.007 970.8 li
629.2 984.007 li
615.993 979.2 li
620.8 965.993 li
cp
f
674.278 23.4521 mo
673.452 25.7217 li
675.722 26.5479 li
676.548 24.2783 li
674.278 23.4521 li
cp
674.198 23.2798 mo
676.72 24.1978 li
675.802 26.7202 li
673.28 25.8022 li
674.198 23.2798 li
cp
f
674.134 73.1426 mo
673.143 75.8662 li
675.866 76.8574 li
676.857 74.1338 li
674.134 73.1426 li
cp
674.037 72.936 mo
677.064 74.0376 li
675.963 77.064 li
672.936 75.9624 li
674.037 72.936 li
cp
f
673.989 122.833 mo
672.833 126.011 li
676.011 127.167 li
677.167 123.989 li
673.989 122.833 li
cp
673.877 122.592 mo
677.408 123.877 li
676.123 127.408 li
672.592 126.123 li
673.877 122.592 li
cp
f
673.845 172.523 mo
672.523 176.155 li
676.155 177.477 li
677.477 173.845 li
673.845 172.523 li
cp
673.717 172.248 mo
677.752 173.717 li
676.283 177.752 li
672.248 176.283 li
673.717 172.248 li
cp
f
673.7 222.213 mo
672.214 226.299 li
676.3 227.787 li
677.786 223.701 li
673.7 222.213 li
cp
673.557 221.904 mo
678.096 223.556 li
676.443 228.096 li
671.904 226.444 li
673.557 221.904 li
cp
f
673.557 271.904 mo
671.904 276.444 li
676.443 278.096 li
678.096 273.556 li
673.557 271.904 li
cp
673.396 271.56 mo
678.44 273.396 li
676.604 278.44 li
671.56 276.604 li
673.396 271.56 li
cp
f
673.412 321.594 mo
671.595 326.588 li
676.588 328.406 li
678.405 323.412 li
673.412 321.594 li
cp
673.235 321.216 mo
678.784 323.235 li
676.765 328.784 li
671.216 326.765 li
673.235 321.216 li
cp
f
673.268 371.285 mo
671.285 376.732 li
676.732 378.715 li
678.715 373.268 li
673.268 371.285 li
cp
673.075 370.872 mo
679.128 373.075 li
676.925 379.128 li
670.872 376.925 li
673.075 370.872 li
cp
f
673.123 420.975 mo
670.975 426.877 li
676.877 429.025 li
679.025 423.123 li
673.123 420.975 li
cp
672.915 420.528 mo
679.473 422.915 li
677.085 429.472 li
670.527 427.085 li
672.915 420.528 li
cp
f
672.979 470.665 mo
670.665 477.021 li
677.021 479.335 li
679.335 472.979 li
672.979 470.665 li
cp
672.754 470.184 mo
679.816 472.754 li
677.246 479.816 li
670.184 477.246 li
672.754 470.184 li
cp
f
672.834 520.355 mo
670.355 527.166 li
677.166 529.645 li
679.645 522.834 li
672.834 520.355 li
cp
672.594 519.84 mo
680.16 522.594 li
677.406 530.16 li
669.84 527.406 li
672.594 519.84 li
cp
f
672.69 570.046 mo
670.046 577.31 li
677.31 579.954 li
679.954 572.69 li
672.69 570.046 li
cp
672.434 569.496 mo
680.504 572.434 li
677.566 580.504 li
669.496 577.566 li
672.434 569.496 li
cp
f
672.546 619.736 mo
669.736 627.454 li
677.454 630.264 li
680.264 622.546 li
672.546 619.736 li
cp
672.273 619.151 mo
680.849 622.272 li
677.727 630.849 li
669.151 627.728 li
672.273 619.151 li
cp
f
672.401 669.427 mo
669.427 677.599 li
677.599 680.573 li
680.573 672.401 li
672.401 669.427 li
cp
672.112 668.808 mo
681.192 672.112 li
677.888 681.192 li
668.808 677.888 li
672.112 668.808 li
cp
f
672.257 719.117 mo
669.117 727.743 li
677.743 730.883 li
680.883 722.257 li
672.257 719.117 li
cp
671.952 718.464 mo
681.536 721.952 li
678.048 731.536 li
668.464 728.048 li
671.952 718.464 li
cp
f
672.112 768.808 mo
668.808 777.888 li
677.888 781.192 li
681.192 772.112 li
672.112 768.808 li
cp
671.792 768.12 mo
681.88 771.792 li
678.208 781.88 li
668.12 778.208 li
671.792 768.12 li
cp
f
671.968 818.498 mo
668.498 828.032 li
678.032 831.502 li
681.502 821.968 li
671.968 818.498 li
cp
671.631 817.775 mo
682.225 821.631 li
678.369 832.225 li
667.775 828.369 li
671.631 817.775 li
cp
f
671.824 868.188 mo
668.188 878.176 li
678.176 881.812 li
681.812 871.824 li
671.824 868.188 li
cp
671.471 867.432 mo
682.568 871.471 li
678.529 882.568 li
667.432 878.529 li
671.471 867.432 li
cp
f
671.68 917.879 mo
667.879 928.32 li
678.32 932.121 li
682.121 921.68 li
671.68 917.879 li
cp
671.311 917.088 mo
682.912 921.311 li
678.689 932.912 li
667.088 928.689 li
671.311 917.088 li
cp
f
671.535 967.569 mo
667.569 978.465 li
678.465 982.431 li
682.431 971.535 li
671.535 967.569 li
cp
671.15 966.744 mo
683.256 971.15 li
678.85 983.256 li
666.744 978.85 li
671.15 966.744 li
cp
f
724.344 23.5928 mo
723.593 25.6563 li
725.656 26.4072 li
726.407 24.3438 li
724.344 23.5928 li
cp
724.271 23.4365 mo
726.563 24.271 li
725.729 26.5635 li
723.437 25.729 li
724.271 23.4365 li
cp
f
724.213 73.311 mo
723.312 75.7876 li
725.787 76.689 li
726.688 74.2124 li
724.213 73.311 li
cp
724.125 73.1235 mo
726.876 74.125 li
725.875 76.8765 li
723.124 75.875 li
724.125 73.1235 li
cp
f
724.081 123.03 mo
723.029 125.919 li
725.919 126.97 li
726.971 124.081 li
724.081 123.03 li
cp
723.979 122.811 mo
727.189 123.979 li
726.021 127.189 li
722.811 126.021 li
723.979 122.811 li
cp
f
723.95 172.748 mo
722.748 176.05 li
726.05 177.252 li
727.252 173.95 li
723.95 172.748 li
cp
723.833 172.498 mo
727.502 173.833 li
726.167 177.502 li
722.498 176.167 li
723.833 172.498 li
cp
f
723.818 222.467 mo
722.467 226.181 li
726.182 227.533 li
727.533 223.819 li
723.818 222.467 li
cp
723.688 222.186 mo
727.814 223.688 li
726.313 227.814 li
722.186 226.313 li
723.688 222.186 li
cp
f
723.688 272.186 mo
722.186 276.313 li
726.313 277.814 li
727.814 273.688 li
723.688 272.186 li
cp
723.542 271.873 mo
728.127 273.542 li
726.458 278.127 li
721.873 276.458 li
723.542 271.873 li
cp
f
723.557 321.904 mo
721.904 326.444 li
726.443 328.096 li
728.096 323.556 li
723.557 321.904 li
cp
723.396 321.56 mo
728.44 323.396 li
726.604 328.44 li
721.56 326.604 li
723.396 321.56 li
cp
f
723.425 371.623 mo
721.622 376.575 li
726.575 378.377 li
728.378 373.425 li
723.425 371.623 li
cp
723.25 371.247 mo
728.753 373.25 li
726.75 378.753 li
721.247 376.75 li
723.25 371.247 li
cp
f
723.294 421.341 mo
721.341 426.706 li
726.706 428.659 li
728.659 423.294 li
723.294 421.341 li
cp
723.104 420.935 mo
729.065 423.104 li
726.896 429.065 li
720.935 426.896 li
723.104 420.935 li
cp
f
723.162 471.06 mo
721.06 476.838 li
726.838 478.94 li
728.94 473.162 li
723.162 471.06 li
cp
722.958 470.622 mo
729.378 472.958 li
727.042 479.378 li
720.622 477.042 li
722.958 470.622 li
cp
f
723.031 520.778 mo
720.778 526.969 li
726.969 529.222 li
729.222 523.031 li
723.031 520.778 li
cp
722.813 520.309 mo
729.691 522.813 li
727.188 529.691 li
720.309 527.188 li
722.813 520.309 li
cp
f
722.9 570.496 mo
720.496 577.1 li
727.1 579.504 li
729.504 572.9 li
722.9 570.496 li
cp
722.667 569.996 mo
730.004 572.667 li
727.333 580.004 li
719.996 577.333 li
722.667 569.996 li
cp
f
722.769 620.215 mo
720.215 627.231 li
727.231 629.785 li
729.785 622.769 li
722.769 620.215 li
cp
722.521 619.684 mo
730.316 622.521 li
727.479 630.316 li
719.684 627.479 li
722.521 619.684 li
cp
f
722.638 669.934 mo
719.934 677.362 li
727.362 680.066 li
730.066 672.638 li
722.638 669.934 li
cp
722.375 669.371 mo
730.629 672.375 li
727.625 680.629 li
719.371 677.625 li
722.375 669.371 li
cp
f
722.506 719.652 mo
719.652 727.494 li
727.494 730.348 li
730.348 722.506 li
722.506 719.652 li
cp
722.229 719.058 mo
730.942 722.229 li
727.771 730.942 li
719.058 727.771 li
722.229 719.058 li
cp
f
722.375 769.371 mo
719.371 777.625 li
727.625 780.629 li
730.629 772.375 li
722.375 769.371 li
cp
722.083 768.745 mo
731.255 772.083 li
727.917 781.255 li
718.745 777.917 li
722.083 768.745 li
cp
f
722.244 819.089 mo
719.089 827.756 li
727.756 830.911 li
730.911 822.244 li
722.244 819.089 li
cp
721.938 818.433 mo
731.567 821.938 li
728.063 831.567 li
718.433 828.063 li
721.938 818.433 li
cp
f
722.112 868.808 mo
718.808 877.888 li
727.888 881.192 li
731.192 872.112 li
722.112 868.808 li
cp
721.792 868.12 mo
731.88 871.792 li
728.208 881.88 li
718.12 878.208 li
721.792 868.12 li
cp
f
721.981 918.526 mo
718.526 928.019 li
728.019 931.474 li
731.474 921.981 li
721.981 918.526 li
cp
721.646 917.807 mo
732.193 921.646 li
728.354 932.193 li
717.807 928.354 li
721.646 917.807 li
cp
f
721.85 968.245 mo
718.245 978.15 li
728.15 981.755 li
731.755 971.85 li
721.85 968.245 li
cp
721.5 967.494 mo
732.506 971.5 li
728.5 982.506 li
717.494 978.5 li
721.5 967.494 li
cp
f
774.409 23.7334 mo
773.733 25.5908 li
775.591 26.2666 li
776.267 24.4092 li
774.409 23.7334 li
cp
774.344 23.5928 mo
776.407 24.3438 li
775.656 26.4072 li
773.593 25.6563 li
774.344 23.5928 li
cp
f
774.291 73.48 mo
773.48 75.709 li
775.709 76.52 li
776.52 74.291 li
774.291 73.48 li
cp
774.213 73.311 mo
776.688 74.2124 li
775.787 76.689 li
773.312 75.7876 li
774.213 73.311 li
cp
f
774.173 123.227 mo
773.227 125.827 li
775.827 126.773 li
776.773 124.173 li
774.173 123.227 li
cp
774.081 123.03 mo
776.971 124.081 li
775.919 126.97 li
773.029 125.919 li
774.081 123.03 li
cp
f
774.055 172.974 mo
772.974 175.945 li
775.945 177.026 li
777.026 174.055 li
774.055 172.974 li
cp
773.95 172.748 mo
777.252 173.95 li
776.05 177.252 li
772.748 176.05 li
773.95 172.748 li
cp
f
773.937 222.72 mo
772.72 226.063 li
776.063 227.28 li
777.28 223.937 li
773.937 222.72 li
cp
773.818 222.467 mo
777.533 223.819 li
776.182 227.533 li
772.467 226.181 li
773.818 222.467 li
cp
f
773.818 272.467 mo
772.467 276.181 li
776.182 277.533 li
777.533 273.819 li
773.818 272.467 li
cp
773.688 272.186 mo
777.814 273.688 li
776.313 277.814 li
772.186 276.313 li
773.688 272.186 li
cp
f
773.7 322.213 mo
772.214 326.299 li
776.3 327.787 li
777.786 323.701 li
773.7 322.213 li
cp
773.557 321.904 mo
778.096 323.556 li
776.443 328.096 li
771.904 326.444 li
773.557 321.904 li
cp
f
773.582 371.96 mo
771.96 376.417 li
776.418 378.04 li
778.04 373.583 li
773.582 371.96 li
cp
773.425 371.623 mo
778.378 373.425 li
776.575 378.377 li
771.622 376.575 li
773.425 371.623 li
cp
f
773.465 421.707 mo
771.707 426.535 li
776.535 428.293 li
778.293 423.465 li
773.465 421.707 li
cp
773.294 421.341 mo
778.659 423.294 li
776.706 428.659 li
771.341 426.706 li
773.294 421.341 li
cp
f
773.347 471.453 mo
771.453 476.653 li
776.653 478.547 li
778.547 473.347 li
773.347 471.453 li
cp
773.162 471.06 mo
778.94 473.162 li
776.838 478.94 li
771.06 476.838 li
773.162 471.06 li
cp
f
773.229 521.2 mo
771.2 526.771 li
776.771 528.8 li
778.8 523.229 li
773.229 521.2 li
cp
773.031 520.778 mo
779.222 523.031 li
776.969 529.222 li
770.778 526.969 li
773.031 520.778 li
cp
f
773.11 570.947 mo
770.947 576.89 li
776.89 579.053 li
779.053 573.11 li
773.11 570.947 li
cp
772.9 570.496 mo
779.504 572.9 li
777.1 579.504 li
770.496 577.1 li
772.9 570.496 li
cp
f
772.992 620.693 mo
770.693 627.008 li
777.008 629.307 li
779.307 622.992 li
772.992 620.693 li
cp
772.769 620.215 mo
779.785 622.769 li
777.231 629.785 li
770.215 627.231 li
772.769 620.215 li
cp
f
772.874 670.44 mo
770.44 677.126 li
777.126 679.56 li
779.56 672.874 li
772.874 670.44 li
cp
772.638 669.934 mo
780.066 672.638 li
777.362 680.066 li
769.934 677.362 li
772.638 669.934 li
cp
f
772.756 720.187 mo
770.187 727.244 li
777.244 729.813 li
779.813 722.756 li
772.756 720.187 li
cp
772.506 719.652 mo
780.348 722.506 li
777.494 730.348 li
769.652 727.494 li
772.506 719.652 li
cp
f
772.638 769.934 mo
769.934 777.362 li
777.362 780.066 li
780.066 772.638 li
772.638 769.934 li
cp
772.375 769.371 mo
780.629 772.375 li
777.625 780.629 li
769.371 777.625 li
772.375 769.371 li
cp
f
772.52 819.681 mo
769.681 827.48 li
777.48 830.319 li
780.319 822.52 li
772.52 819.681 li
cp
772.244 819.089 mo
780.911 822.244 li
777.756 830.911 li
769.089 827.756 li
772.244 819.089 li
cp
f
772.401 869.427 mo
769.427 877.599 li
777.599 880.573 li
780.573 872.401 li
772.401 869.427 li
cp
772.112 868.808 mo
781.192 872.112 li
777.888 881.192 li
768.808 877.888 li
772.112 868.808 li
cp
f
772.283 919.174 mo
769.174 927.717 li
777.717 930.826 li
780.826 922.283 li
772.283 919.174 li
cp
771.981 918.526 mo
781.474 921.981 li
778.019 931.474 li
768.526 928.019 li
771.981 918.526 li
cp
f
772.165 968.92 mo
768.92 977.835 li
777.835 981.08 li
781.08 972.165 li
772.165 968.92 li
cp
771.85 968.245 mo
781.755 971.85 li
778.15 981.755 li
768.245 978.15 li
771.85 968.245 li
cp
f
824.475 23.874 mo
823.874 25.5249 li
825.525 26.126 li
826.126 24.4751 li
824.475 23.874 li
cp
824.417 23.749 mo
826.251 24.4165 li
825.583 26.251 li
823.749 25.5835 li
824.417 23.749 li
cp
f
824.37 73.6489 mo
823.649 75.6299 li
825.63 76.3511 li
826.351 74.3701 li
824.37 73.6489 li
cp
824.3 73.499 mo
826.501 74.2998 li
825.7 76.501 li
823.499 75.7002 li
824.3 73.499 li
cp
f
824.265 123.424 mo
823.424 125.735 li
825.735 126.576 li
826.576 124.265 li
824.265 123.424 li
cp
824.184 123.249 mo
826.751 124.184 li
825.816 126.751 li
823.249 125.816 li
824.184 123.249 li
cp
f
824.16 173.199 mo
823.198 175.84 li
825.84 176.801 li
826.802 174.16 li
824.16 173.199 li
cp
824.066 172.999 mo
827.002 174.066 li
825.934 177.001 li
822.998 175.934 li
824.066 172.999 li
cp
f
824.055 222.974 mo
822.974 225.945 li
825.945 227.026 li
827.026 224.055 li
824.055 222.974 li
cp
823.95 222.748 mo
827.252 223.95 li
826.05 227.252 li
822.748 226.05 li
823.95 222.748 li
cp
f
823.95 272.748 mo
822.748 276.05 li
826.05 277.252 li
827.252 273.95 li
823.95 272.748 li
cp
823.833 272.498 mo
827.502 273.833 li
826.167 277.502 li
822.498 276.167 li
823.833 272.498 li
cp
f
823.845 322.523 mo
822.523 326.155 li
826.155 327.477 li
827.477 323.845 li
823.845 322.523 li
cp
823.717 322.248 mo
827.752 323.717 li
826.283 327.752 li
822.248 326.283 li
823.717 322.248 li
cp
f
823.74 372.298 mo
822.298 376.26 li
826.26 377.702 li
827.702 373.74 li
823.74 372.298 li
cp
823.6 371.998 mo
828.002 373.6 li
826.4 378.002 li
821.998 376.4 li
823.6 371.998 li
cp
f
823.635 422.073 mo
822.072 426.365 li
826.365 427.927 li
827.928 423.635 li
823.635 422.073 li
cp
823.483 421.747 mo
828.253 423.483 li
826.517 428.253 li
821.747 426.517 li
823.483 421.747 li
cp
f
823.53 471.848 mo
821.848 476.47 li
826.47 478.152 li
828.152 473.53 li
823.53 471.848 li
cp
823.367 471.497 mo
828.503 473.366 li
826.633 478.503 li
821.497 476.634 li
823.367 471.497 li
cp
f
823.425 521.622 mo
821.622 526.575 li
826.575 528.378 li
828.378 523.425 li
823.425 521.622 li
cp
823.25 521.247 mo
828.753 523.25 li
826.75 528.753 li
821.247 526.75 li
823.25 521.247 li
cp
f
823.32 571.397 mo
821.397 576.68 li
826.68 578.603 li
828.603 573.32 li
823.32 571.397 li
cp
823.134 570.997 mo
829.003 573.134 li
826.866 579.003 li
820.997 576.866 li
823.134 570.997 li
cp
f
823.215 621.172 mo
821.172 626.785 li
826.785 628.828 li
828.828 623.215 li
823.215 621.172 li
cp
823.017 620.747 mo
829.253 623.017 li
826.983 629.253 li
820.747 626.983 li
823.017 620.747 li
cp
f
823.11 670.947 mo
820.947 676.89 li
826.89 679.053 li
829.053 673.11 li
823.11 670.947 li
cp
822.9 670.496 mo
829.504 672.9 li
827.1 679.504 li
820.496 677.1 li
822.9 670.496 li
cp
f
823.005 720.722 mo
820.722 726.995 li
826.995 729.278 li
829.278 723.005 li
823.005 720.722 li
cp
822.783 720.246 mo
829.754 722.783 li
827.217 729.754 li
820.246 727.217 li
822.783 720.246 li
cp
f
822.9 770.496 mo
820.496 777.1 li
827.1 779.504 li
829.504 772.9 li
822.9 770.496 li
cp
822.667 769.996 mo
830.004 772.667 li
827.333 780.004 li
819.996 777.333 li
822.667 769.996 li
cp
f
822.795 820.271 mo
820.271 827.205 li
827.205 829.729 li
829.729 822.795 li
822.795 820.271 li
cp
822.55 819.746 mo
830.254 822.55 li
827.45 830.254 li
819.746 827.45 li
822.55 819.746 li
cp
f
822.69 870.046 mo
820.046 877.31 li
827.31 879.954 li
829.954 872.69 li
822.69 870.046 li
cp
822.434 869.496 mo
830.504 872.434 li
827.566 880.504 li
819.496 877.566 li
822.434 869.496 li
cp
f
822.585 919.821 mo
819.821 927.415 li
827.415 930.179 li
830.179 922.585 li
822.585 919.821 li
cp
822.316 919.246 mo
830.754 922.316 li
827.684 930.754 li
819.246 927.684 li
822.316 919.246 li
cp
f
822.48 969.596 mo
819.596 977.52 li
827.52 980.404 li
830.404 972.48 li
822.48 969.596 li
cp
822.2 968.995 mo
831.005 972.2 li
827.8 981.005 li
818.995 977.8 li
822.2 968.995 li
cp
f
874.541 24.0146 mo
874.015 25.4595 li
875.459 25.9854 li
875.985 24.5405 li
874.541 24.0146 li
cp
874.489 23.9053 mo
876.095 24.4897 li
875.511 26.0947 li
873.905 25.5103 li
874.489 23.9053 li
cp
f
874.449 73.8179 mo
873.818 75.5513 li
875.551 76.1821 li
876.182 74.4487 li
874.449 73.8179 li
cp
874.388 73.6865 mo
876.313 74.3877 li
875.612 76.3135 li
873.687 75.6123 li
874.388 73.6865 li
cp
f
874.356 123.621 mo
873.621 125.643 li
875.644 126.379 li
876.379 124.357 li
874.356 123.621 li
cp
874.285 123.468 mo
876.532 124.285 li
875.715 126.532 li
873.468 125.715 li
874.285 123.468 li
cp
f
874.265 173.424 mo
873.424 175.735 li
875.735 176.576 li
876.576 174.265 li
874.265 173.424 li
cp
874.184 173.249 mo
876.751 174.184 li
875.816 176.751 li
873.249 175.816 li
874.184 173.249 li
cp
f
874.173 223.227 mo
873.227 225.827 li
875.827 226.773 li
876.773 224.173 li
874.173 223.227 li
cp
874.081 223.03 mo
876.971 224.081 li
875.919 226.97 li
873.029 225.919 li
874.081 223.03 li
cp
f
874.081 273.03 mo
873.029 275.919 li
875.919 276.97 li
876.971 274.081 li
874.081 273.03 li
cp
873.979 272.811 mo
877.189 273.979 li
876.021 277.189 li
872.811 276.021 li
873.979 272.811 li
cp
f
873.989 322.833 mo
872.833 326.011 li
876.011 327.167 li
877.167 323.989 li
873.989 322.833 li
cp
873.877 322.592 mo
877.408 323.877 li
876.123 327.408 li
872.592 326.123 li
873.877 322.592 li
cp
f
873.897 372.636 mo
872.636 376.103 li
876.103 377.364 li
877.364 373.897 li
873.897 372.636 li
cp
873.775 372.373 mo
877.627 373.775 li
876.225 377.627 li
872.373 376.225 li
873.775 372.373 li
cp
f
873.806 422.438 mo
872.438 426.194 li
876.194 427.562 li
877.562 423.806 li
873.806 422.438 li
cp
873.673 422.154 mo
877.846 423.673 li
876.327 427.846 li
872.154 426.327 li
873.673 422.154 li
cp
f
873.714 472.241 mo
872.241 476.286 li
876.286 477.759 li
877.759 473.714 li
873.714 472.241 li
cp
873.571 471.936 mo
878.064 473.571 li
876.429 478.064 li
871.936 476.429 li
873.571 471.936 li
cp
f
873.622 522.045 mo
872.045 526.378 li
876.378 527.955 li
877.955 523.622 li
873.622 522.045 li
cp
873.469 521.716 mo
878.284 523.469 li
876.531 528.284 li
871.716 526.531 li
873.469 521.716 li
cp
f
873.53 571.848 mo
871.848 576.47 li
876.47 578.152 li
878.152 573.53 li
873.53 571.848 li
cp
873.367 571.497 mo
878.503 573.366 li
876.633 578.503 li
871.497 576.634 li
873.367 571.497 li
cp
f
873.438 621.65 mo
871.65 626.562 li
876.562 628.35 li
878.35 623.438 li
873.438 621.65 li
cp
873.265 621.278 mo
878.722 623.265 li
876.735 628.722 li
871.278 626.735 li
873.265 621.278 li
cp
f
873.347 671.453 mo
871.453 676.653 li
876.653 678.547 li
878.547 673.347 li
873.347 671.453 li
cp
873.162 671.06 mo
878.94 673.162 li
876.838 678.94 li
871.06 676.838 li
873.162 671.06 li
cp
f
873.254 721.257 mo
871.257 726.746 li
876.746 728.743 li
878.743 723.254 li
873.254 721.257 li
cp
873.061 720.841 mo
879.159 723.061 li
876.939 729.159 li
870.841 726.939 li
873.061 720.841 li
cp
f
873.162 771.06 mo
871.06 776.838 li
876.838 778.94 li
878.94 773.162 li
873.162 771.06 li
cp
872.958 770.622 mo
879.378 772.958 li
877.042 779.378 li
870.622 777.042 li
872.958 770.622 li
cp
f
873.07 820.862 mo
870.862 826.93 li
876.93 829.138 li
879.138 823.07 li
873.07 820.862 li
cp
872.856 820.402 mo
879.598 822.856 li
877.144 829.598 li
870.402 827.144 li
872.856 820.402 li
cp
f
872.979 870.665 mo
870.665 877.021 li
877.021 879.335 li
879.335 872.979 li
872.979 870.665 li
cp
872.754 870.184 mo
879.816 872.754 li
877.246 879.816 li
870.184 877.246 li
872.754 870.184 li
cp
f
872.887 920.469 mo
870.469 927.113 li
877.113 929.531 li
879.531 922.887 li
872.887 920.469 li
cp
872.652 919.965 mo
880.035 922.652 li
877.348 930.035 li
869.965 927.348 li
872.652 919.965 li
cp
f
872.795 970.271 mo
870.271 977.205 li
877.205 979.729 li
879.729 972.795 li
872.795 970.271 li
cp
872.55 969.746 mo
880.254 972.55 li
877.45 980.254 li
869.746 977.45 li
872.55 969.746 li
cp
f
924.606 24.1558 mo
924.155 25.3936 li
925.394 25.8442 li
925.845 24.6064 li
924.606 24.1558 li
cp
924.563 24.0615 mo
925.938 24.5625 li
925.438 25.9385 li
924.062 25.4375 li
924.563 24.0615 li
cp
f
924.527 73.9868 mo
923.986 75.4727 li
925.473 76.0132 li
926.014 74.5273 li
924.527 73.9868 li
cp
924.475 73.874 mo
926.126 74.4751 li
925.525 76.126 li
923.874 75.5249 li
924.475 73.874 li
cp
f
924.449 123.818 mo
923.818 125.551 li
925.551 126.182 li
926.182 124.449 li
924.449 123.818 li
cp
924.388 123.687 mo
926.313 124.388 li
925.612 126.313 li
923.687 125.612 li
924.388 123.687 li
cp
f
924.37 173.649 mo
923.649 175.63 li
925.63 176.351 li
926.351 174.37 li
924.37 173.649 li
cp
924.3 173.499 mo
926.501 174.3 li
925.7 176.501 li
923.499 175.7 li
924.3 173.499 li
cp
f
924.291 223.48 mo
923.48 225.709 li
925.709 226.52 li
926.52 224.291 li
924.291 223.48 li
cp
924.213 223.311 mo
926.688 224.212 li
925.787 226.689 li
923.312 225.788 li
924.213 223.311 li
cp
f
924.213 273.311 mo
923.312 275.788 li
925.787 276.689 li
926.688 274.212 li
924.213 273.311 li
cp
924.125 273.124 mo
926.876 274.125 li
925.875 276.876 li
923.124 275.875 li
924.125 273.124 li
cp
f
924.134 323.143 mo
923.143 325.866 li
925.866 326.857 li
926.857 324.134 li
924.134 323.143 li
cp
924.037 322.936 mo
927.064 324.038 li
925.963 327.064 li
922.936 325.962 li
924.037 322.936 li
cp
f
924.055 372.974 mo
922.974 375.945 li
925.945 377.026 li
927.026 374.055 li
924.055 372.974 li
cp
923.95 372.748 mo
927.252 373.95 li
926.05 377.252 li
922.748 376.05 li
923.95 372.748 li
cp
f
923.977 422.805 mo
922.805 426.023 li
926.023 427.195 li
927.195 423.977 li
923.977 422.805 li
cp
923.862 422.561 mo
927.439 423.862 li
926.138 427.439 li
922.561 426.138 li
923.862 422.561 li
cp
f
923.897 472.636 mo
922.636 476.103 li
926.103 477.364 li
927.364 473.897 li
923.897 472.636 li
cp
923.775 472.373 mo
927.627 473.775 li
926.225 477.627 li
922.373 476.225 li
923.775 472.373 li
cp
f
923.818 522.467 mo
922.467 526.182 li
926.182 527.533 li
927.533 523.818 li
923.818 522.467 li
cp
923.688 522.186 mo
927.814 523.688 li
926.313 527.814 li
922.186 526.313 li
923.688 522.186 li
cp
f
923.74 572.298 mo
922.298 576.26 li
926.26 577.702 li
927.702 573.74 li
923.74 572.298 li
cp
923.6 571.998 mo
928.002 573.6 li
926.4 578.002 li
921.998 576.4 li
923.6 571.998 li
cp
f
923.661 622.129 mo
922.129 626.339 li
926.339 627.871 li
927.871 623.661 li
923.661 622.129 li
cp
923.513 621.811 mo
928.189 623.513 li
926.487 628.189 li
921.811 626.487 li
923.513 621.811 li
cp
f
923.582 671.96 mo
921.96 676.418 li
926.418 678.04 li
928.04 673.582 li
923.582 671.96 li
cp
923.425 671.622 mo
928.378 673.425 li
926.575 678.378 li
921.622 676.575 li
923.425 671.622 li
cp
f
923.504 721.791 mo
921.791 726.496 li
926.496 728.209 li
928.209 723.504 li
923.504 721.791 li
cp
923.338 721.435 mo
928.565 723.338 li
926.662 728.565 li
921.435 726.662 li
923.338 721.435 li
cp
f
923.425 771.622 mo
921.622 776.575 li
926.575 778.378 li
928.378 773.425 li
923.425 771.622 li
cp
923.25 771.247 mo
928.753 773.25 li
926.75 778.753 li
921.247 776.75 li
923.25 771.247 li
cp
f
923.347 821.453 mo
921.453 826.653 li
926.653 828.547 li
928.547 823.347 li
923.347 821.453 li
cp
923.162 821.06 mo
928.94 823.162 li
926.838 828.94 li
921.06 826.838 li
923.162 821.06 li
cp
f
923.268 871.285 mo
921.285 876.732 li
926.732 878.715 li
928.715 873.268 li
923.268 871.285 li
cp
923.075 870.872 mo
929.128 873.075 li
926.925 879.128 li
920.872 876.925 li
923.075 870.872 li
cp
f
923.188 921.116 mo
921.116 926.812 li
926.812 928.884 li
928.884 923.188 li
923.188 921.116 li
cp
922.987 920.685 mo
929.315 922.987 li
927.013 929.315 li
920.685 927.013 li
922.987 920.685 li
cp
f
923.11 970.947 mo
920.947 976.89 li
926.89 979.053 li
929.053 973.11 li
923.11 970.947 li
cp
922.9 970.496 mo
929.504 972.9 li
927.1 979.504 li
920.496 977.1 li
922.9 970.496 li
cp
f
974.672 24.2964 mo
974.296 25.3281 li
975.328 25.7036 li
975.704 24.6719 li
974.672 24.2964 li
cp
974.636 24.2183 mo
975.782 24.6353 li
975.364 25.7817 li
974.218 25.3647 li
974.636 24.2183 li
cp
f
974.606 74.1558 mo
974.155 75.3936 li
975.394 75.8442 li
975.845 74.6064 li
974.606 74.1558 li
cp
974.563 74.0615 mo
975.938 74.5625 li
975.438 75.9385 li
974.062 75.4375 li
974.563 74.0615 li
cp
f
974.541 124.015 mo
974.015 125.459 li
975.459 125.985 li
975.985 124.541 li
974.541 124.015 li
cp
974.489 123.905 mo
976.095 124.49 li
975.511 126.095 li
973.905 125.51 li
974.489 123.905 li
cp
f
974.475 173.874 mo
973.874 175.525 li
975.525 176.126 li
976.126 174.475 li
974.475 173.874 li
cp
974.417 173.749 mo
976.251 174.417 li
975.583 176.251 li
973.749 175.583 li
974.417 173.749 li
cp
f
974.409 223.733 mo
973.733 225.591 li
975.591 226.267 li
976.267 224.409 li
974.409 223.733 li
cp
974.344 223.593 mo
976.407 224.344 li
975.656 226.407 li
973.593 225.656 li
974.344 223.593 li
cp
f
974.344 273.593 mo
973.593 275.656 li
975.656 276.407 li
976.407 274.344 li
974.344 273.593 li
cp
974.271 273.437 mo
976.563 274.271 li
975.729 276.563 li
973.437 275.729 li
974.271 273.437 li
cp
f
974.278 323.452 mo
973.452 325.722 li
975.722 326.548 li
976.548 324.278 li
974.278 323.452 li
cp
974.198 323.28 mo
976.72 324.198 li
975.802 326.72 li
973.28 325.802 li
974.198 323.28 li
cp
f
974.213 373.311 mo
973.312 375.788 li
975.787 376.689 li
976.688 374.212 li
974.213 373.311 li
cp
974.125 373.124 mo
976.876 374.125 li
975.875 376.876 li
973.124 375.875 li
974.125 373.124 li
cp
f
974.146 423.171 mo
973.171 425.854 li
975.854 426.829 li
976.829 424.146 li
974.146 423.171 li
cp
974.052 422.967 mo
977.033 424.052 li
975.948 427.033 li
972.967 425.948 li
974.052 422.967 li
cp
f
974.081 473.029 mo
973.029 475.919 li
975.919 476.971 li
976.971 474.081 li
974.081 473.029 li
cp
973.979 472.811 mo
977.189 473.979 li
976.021 477.189 li
972.811 476.021 li
973.979 472.811 li
cp
f
974.016 522.889 mo
972.889 525.984 li
975.984 527.111 li
977.111 524.016 li
974.016 522.889 li
cp
973.906 522.654 mo
977.346 523.906 li
976.094 527.346 li
972.654 526.094 li
973.906 522.654 li
cp
f
973.95 572.748 mo
972.748 576.05 li
976.05 577.252 li
977.252 573.95 li
973.95 572.748 li
cp
973.833 572.498 mo
977.502 573.833 li
976.167 577.502 li
972.498 576.167 li
973.833 572.498 li
cp
f
973.885 622.607 mo
972.607 626.115 li
976.115 627.393 li
977.393 623.885 li
973.885 622.607 li
cp
973.761 622.342 mo
977.658 623.761 li
976.239 627.658 li
972.342 626.239 li
973.761 622.342 li
cp
f
973.818 672.467 mo
972.467 676.182 li
976.182 677.533 li
977.533 673.818 li
973.818 672.467 li
cp
973.688 672.186 mo
977.814 673.688 li
976.313 677.814 li
972.186 676.313 li
973.688 672.186 li
cp
f
973.753 722.326 mo
972.326 726.247 li
976.247 727.674 li
977.674 723.753 li
973.753 722.326 li
cp
973.614 722.029 mo
977.971 723.614 li
976.386 727.971 li
972.029 726.386 li
973.614 722.029 li
cp
f
973.688 772.186 mo
972.186 776.313 li
976.313 777.814 li
977.814 773.688 li
973.688 772.186 li
cp
973.542 771.873 mo
978.127 773.542 li
976.458 778.127 li
971.873 776.458 li
973.542 771.873 li
cp
f
973.622 822.045 mo
972.045 826.378 li
976.378 827.955 li
977.955 823.622 li
973.622 822.045 li
cp
973.469 821.716 mo
978.284 823.469 li
976.531 828.284 li
971.716 826.531 li
973.469 821.716 li
cp
f
973.557 871.904 mo
971.904 876.443 li
976.443 878.096 li
978.096 873.557 li
973.557 871.904 li
cp
973.396 871.56 mo
978.44 873.396 li
976.604 878.44 li
971.56 876.604 li
973.396 871.56 li
cp
f
973.49 921.763 mo
971.764 926.51 li
976.51 928.237 li
978.236 923.49 li
973.49 921.763 li
cp
973.323 921.403 mo
978.597 923.323 li
976.677 928.597 li
971.403 926.677 li
973.323 921.403 li
cp
f
973.425 971.622 mo
971.622 976.575 li
976.575 978.378 li
978.378 973.425 li
973.425 971.622 li
cp
973.25 971.247 mo
978.753 973.25 li
976.75 978.753 li
971.247 976.75 li
973.25 971.247 li
cp
f
-1.44678 -3.10303 mo
-3.10303 1.44727 li
1.44678 3.10303 li
3.10303 -1.44727 li
-1.44678 -3.10303 li
cp
-1.60791 -3.44775 mo
3.44775 -1.60791 li
1.60791 3.44775 li
-3.44775 1.60791 li
-1.60791 -3.44775 li
cp
f
-1.76855 46.207 mo
-3.79297 51.7686 li
1.76855 53.793 li
3.79297 48.2314 li
-1.76855 46.207 li
cp
-1.96484 45.7856 mo
4.21436 48.0352 li
1.96484 54.2144 li
-4.21436 51.9648 li
-1.96484 45.7856 li
cp
f
-2.09033 95.5176 mo
-4.48242 102.09 li
2.09033 104.482 li
4.48242 97.9097 li
-2.09033 95.5176 li
cp
-2.32227 95.0195 mo
4.98047 97.6777 li
2.32227 104.98 li
-4.98047 102.322 li
-2.32227 95.0195 li
cp
f
-2.41162 144.828 mo
-5.17188 152.412 li
2.41162 155.172 li
5.17188 147.588 li
-2.41162 144.828 li
cp
-2.67969 144.253 mo
5.74658 147.32 li
2.67969 155.747 li
-5.74658 152.68 li
-2.67969 144.253 li
cp
f
-2.7334 194.139 mo
-5.86133 202.733 li
2.7334 205.861 li
5.86133 197.267 li
-2.7334 194.139 li
cp
-3.03711 193.487 mo
6.5127 196.963 li
3.03711 206.513 li
-6.5127 203.037 li
-3.03711 193.487 li
cp
f
-3.05469 243.449 mo
-6.55127 253.055 li
3.05469 256.551 li
6.55127 246.945 li
-3.05469 243.449 li
cp
-3.39404 242.721 mo
7.27881 246.606 li
3.39404 257.279 li
-7.27881 253.394 li
-3.39404 242.721 li
cp
f
-3.37646 292.759 mo
-7.24072 303.376 li
3.37646 307.241 li
7.24072 296.624 li
-3.37646 292.759 li
cp
-3.75146 291.955 mo
8.04541 296.249 li
3.75146 308.045 li
-8.04541 303.751 li
-3.75146 291.955 li
cp
f
-3.69775 342.07 mo
-7.93018 353.698 li
3.69775 357.93 li
7.93018 346.302 li
-3.69775 342.07 li
cp
-4.10889 341.188 mo
8.81152 345.891 li
4.10889 358.812 li
-8.81152 354.109 li
-4.10889 341.188 li
cp
f
-4.01953 391.38 mo
-8.61963 404.02 li
4.01953 408.62 li
8.61963 395.98 li
-4.01953 391.38 li
cp
-4.46631 390.422 mo
9.57764 395.534 li
4.46631 409.577 li
-9.57764 404.466 li
-4.46631 390.422 li
cp
f
-4.34082 440.69 mo
-9.30957 454.341 li
4.34082 459.31 li
9.30957 445.659 li
-4.34082 440.69 li
cp
-4.82324 439.656 mo
10.3438 445.177 li
4.82324 460.344 li
-10.3438 454.823 li
-4.82324 439.656 li
cp
f
-4.6626 490.001 mo
-9.99902 504.663 li
4.6626 509.999 li
9.99902 495.337 li
-4.6626 490.001 li
cp
-5.18066 488.89 mo
11.1099 494.819 li
5.18066 511.11 li
-11.1099 505.181 li
-5.18066 488.89 li
cp
f
-4.98438 539.312 mo
-10.6885 554.984 li
4.98438 560.688 li
10.6885 545.016 li
-4.98438 539.312 li
cp
-5.53809 538.124 mo
11.8765 544.462 li
5.53809 561.876 li
-11.8765 555.538 li
-5.53809 538.124 li
cp
f
-5.30566 588.622 mo
-11.3784 605.306 li
5.30566 611.378 li
11.3784 594.694 li
-5.30566 588.622 li
cp
-5.89502 587.357 mo
12.6426 594.104 li
5.89502 612.643 li
-12.6426 605.896 li
-5.89502 587.357 li
cp
f
-5.62744 637.933 mo
-12.0679 655.627 li
5.62744 662.067 li
12.0679 644.373 li
-5.62744 637.933 li
cp
-6.25244 636.592 mo
13.4087 643.747 li
6.25244 663.408 li
-13.4087 656.253 li
-6.25244 636.592 li
cp
f
-5.94873 687.242 mo
-12.7573 705.949 li
5.94873 712.758 li
12.7573 694.051 li
-5.94873 687.242 li
cp
-6.60986 685.825 mo
14.1748 693.391 li
6.60986 714.175 li
-14.1748 706.609 li
-6.60986 685.825 li
cp
f
-6.27051 736.553 mo
-13.4468 756.271 li
6.27051 763.447 li
13.4468 743.729 li
-6.27051 736.553 li
cp
-6.96729 735.059 mo
14.9409 743.033 li
6.96729 764.941 li
-14.9409 756.967 li
-6.96729 735.059 li
cp
f
-6.5918 785.863 mo
-14.1367 806.592 li
6.5918 814.137 li
14.1367 793.408 li
-6.5918 785.863 li
cp
-7.32422 784.293 mo
15.707 792.676 li
7.32422 815.707 li
-15.707 807.324 li
-7.32422 784.293 li
cp
f
-6.91357 835.174 mo
-14.8262 856.913 li
6.91357 864.826 li
14.8262 843.087 li
-6.91357 835.174 li
cp
-7.68164 833.526 mo
16.4736 842.318 li
7.68164 866.474 li
-16.4736 857.682 li
-7.68164 833.526 li
cp
f
-7.23486 884.484 mo
-15.5156 907.235 li
7.23486 915.516 li
15.5156 892.765 li
-7.23486 884.484 li
cp
-8.03906 882.761 mo
17.2397 891.961 li
8.03906 917.239 li
-17.2397 908.039 li
-8.03906 882.761 li
cp
f
-7.55664 933.795 mo
-16.2051 957.557 li
7.55664 966.205 li
16.2051 942.443 li
-7.55664 933.795 li
cp
-8.39648 931.994 mo
18.0059 941.604 li
8.39648 968.006 li
-18.0059 958.396 li
-8.39648 931.994 li
cp
f
-7.87842 983.105 mo
-16.895 1007.88 li
7.87842 1016.89 li
16.895 992.122 li
-7.87842 983.105 li
cp
-8.75342 981.228 mo
18.772 991.246 li
8.75342 1018.77 li
-18.772 1008.75 li
-8.75342 981.228 li
cp
f
48.6118 -2.97656 mo
47.0234 1.3877 li
51.3882 2.97656 li
52.9766 -1.3877 li
48.6118 -2.97656 li
cp
48.458 -3.30713 mo
53.3071 -1.54199 li
51.542 3.30713 li
46.6929 1.54199 li
48.458 -3.30713 li
cp
f
48.3037 46.3623 mo
46.3623 51.6963 li
51.6963 53.6377 li
53.6377 48.3037 li
48.3037 46.3623 li
cp
48.1152 45.958 mo
54.042 48.1152 li
51.8848 54.042 li
45.958 51.8848 li
48.1152 45.958 li
cp
f
47.9951 95.7007 mo
45.7007 102.005 li
52.0049 104.299 li
54.2993 97.9951 li
47.9951 95.7007 li
cp
47.7725 95.2227 mo
54.7769 97.7725 li
52.2275 104.777 li
45.2231 102.228 li
47.7725 95.2227 li
cp
f
47.6865 145.039 mo
45.0391 152.313 li
52.3135 154.961 li
54.9609 147.687 li
47.6865 145.039 li
cp
47.4297 144.488 mo
55.5122 147.43 li
52.5703 155.512 li
44.4878 152.57 li
47.4297 144.488 li
cp
f
47.3784 194.378 mo
44.3779 202.622 li
52.6216 205.622 li
55.6221 197.378 li
47.3784 194.378 li
cp
47.0869 193.753 mo
56.2471 197.087 li
52.9131 206.247 li
43.7529 202.913 li
47.0869 193.753 li
cp
f
47.0698 243.716 mo
43.7163 252.93 li
52.9302 256.284 li
56.2837 247.07 li
47.0698 243.716 li
cp
46.7441 243.018 mo
56.9819 246.744 li
53.2559 256.982 li
43.0181 253.256 li
46.7441 243.018 li
cp
f
46.7612 293.055 mo
43.0547 303.239 li
53.2388 306.945 li
56.9453 296.761 li
46.7612 293.055 li
cp
46.4014 292.283 mo
57.7168 296.401 li
53.5986 307.717 li
42.2832 303.599 li
46.4014 292.283 li
cp
f
46.4531 342.394 mo
42.3936 353.547 li
53.5469 357.606 li
57.6064 346.453 li
46.4531 342.394 li
cp
46.0591 341.548 mo
58.4517 346.059 li
53.9409 358.452 li
41.5483 353.941 li
46.0591 341.548 li
cp
f
46.1445 391.732 mo
41.7319 403.855 li
53.8555 408.268 li
58.2681 396.145 li
46.1445 391.732 li
cp
45.7163 390.813 mo
59.1865 395.716 li
54.2837 409.187 li
40.8135 404.284 li
45.7163 390.813 li
cp
f
45.8359 441.07 mo
41.0703 454.164 li
54.1641 458.93 li
58.9297 445.836 li
45.8359 441.07 li
cp
45.3735 440.078 mo
59.9214 445.373 li
54.6265 459.922 li
40.0786 454.627 li
45.3735 440.078 li
cp
f
45.5278 490.409 mo
40.4092 504.473 li
54.4722 509.591 li
59.5908 495.527 li
45.5278 490.409 li
cp
45.0308 489.344 mo
60.6567 495.031 li
54.9692 510.656 li
39.3433 504.969 li
45.0308 489.344 li
cp
f
45.2192 539.748 mo
39.7476 554.78 li
54.7808 560.252 li
60.2524 545.22 li
45.2192 539.748 li
cp
44.688 538.608 mo
61.3916 544.688 li
55.312 561.392 li
38.6084 555.312 li
44.688 538.608 li
cp
f
44.9106 589.086 mo
39.0864 605.089 li
55.0894 610.914 li
60.9136 594.911 li
44.9106 589.086 li
cp
44.3452 587.874 mo
62.1265 594.346 li
55.6548 612.126 li
37.8735 605.654 li
44.3452 587.874 li
cp
f
44.6025 638.425 mo
38.4248 655.397 li
55.3975 661.575 li
61.5752 644.603 li
44.6025 638.425 li
cp
44.0024 637.139 mo
62.8613 644.003 li
55.9976 662.861 li
37.1387 655.997 li
44.0024 637.139 li
cp
f
44.2939 687.764 mo
37.7632 705.706 li
55.7061 712.236 li
62.2368 694.294 li
44.2939 687.764 li
cp
43.6602 686.403 mo
63.5962 693.66 li
56.3398 713.597 li
36.4038 706.34 li
43.6602 686.403 li
cp
f
43.9854 737.102 mo
37.1021 756.015 li
56.0146 762.898 li
62.8979 743.985 li
43.9854 737.102 li
cp
43.3174 735.669 mo
64.3311 743.317 li
56.6826 764.331 li
35.6689 756.683 li
43.3174 735.669 li
cp
f
43.6772 786.44 mo
36.4404 806.323 li
56.3228 813.56 li
63.5596 793.677 li
43.6772 786.44 li
cp
42.9746 784.934 mo
65.0659 792.975 li
57.0254 815.066 li
34.9341 807.025 li
42.9746 784.934 li
cp
f
43.3687 835.779 mo
35.7788 856.631 li
56.6313 864.221 li
64.2212 843.369 li
43.3687 835.779 li
cp
42.6318 834.199 mo
65.8013 842.632 li
57.3682 865.801 li
34.1987 857.368 li
42.6318 834.199 li
cp
f
43.0601 885.117 mo
35.1177 906.939 li
56.9399 914.883 li
64.8823 893.061 li
43.0601 885.117 li
cp
42.2891 883.464 mo
66.5361 892.289 li
57.7109 916.536 li
33.4639 907.711 li
42.2891 883.464 li
cp
f
42.752 934.456 mo
34.4561 957.248 li
57.248 965.544 li
65.5439 942.752 li
42.752 934.456 li
cp
41.9463 932.729 mo
67.271 941.946 li
58.0537 967.271 li
32.729 958.054 li
41.9463 932.729 li
cp
f
42.4434 983.795 mo
33.7949 1007.56 li
57.5566 1016.21 li
66.2051 992.443 li
42.4434 983.795 li
cp
41.6035 981.994 mo
68.0059 991.604 li
58.3965 1018.01 li
31.9941 1008.4 li
41.6035 981.994 li
cp
f
98.6709 -2.84961 mo
97.1504 1.3291 li
101.329 2.84961 li
102.85 -1.3291 li
98.6709 -2.84961 li
cp
98.5234 -3.1665 mo
103.167 -1.47656 li
101.477 3.1665 li
96.8335 1.47656 li
98.5234 -3.1665 li
cp
f
98.376 46.5171 mo
96.5171 51.624 li
101.624 53.4829 li
103.483 48.376 li
98.376 46.5171 li
cp
98.1953 46.1299 mo
103.87 48.1953 li
101.805 53.8701 li
96.1299 51.8047 li
98.1953 46.1299 li
cp
f
98.0806 95.8838 mo
95.8838 101.919 li
101.919 104.116 li
104.116 98.0806 li
98.0806 95.8838 li
cp
97.8672 95.4263 mo
104.574 97.8672 li
102.133 104.574 li
95.4263 102.133 li
97.8672 95.4263 li
cp
f
97.7852 145.25 mo
95.2505 152.215 li
102.215 154.75 li
104.75 147.785 li
97.7852 145.25 li
cp
97.5391 144.723 mo
105.277 147.539 li
102.461 155.277 li
94.7227 152.461 li
97.5391 144.723 li
cp
f
97.4897 194.617 mo
94.6172 202.51 li
102.51 205.383 li
105.383 197.49 li
97.4897 194.617 li
cp
97.2109 194.019 mo
105.981 197.211 li
102.789 205.981 li
94.019 202.789 li
97.2109 194.019 li
cp
f
97.1943 243.984 mo
93.9839 252.806 li
102.806 256.016 li
106.016 247.194 li
97.1943 243.984 li
cp
96.8828 243.315 mo
106.685 246.883 li
103.117 256.685 li
93.3154 253.117 li
96.8828 243.315 li
cp
f
96.8994 293.351 mo
93.3506 303.101 li
103.101 306.649 li
106.649 296.899 li
96.8994 293.351 li
cp
96.5547 292.611 mo
107.389 296.555 li
103.445 307.389 li
92.6113 303.445 li
96.5547 292.611 li
cp
f
96.604 342.717 mo
92.7173 353.396 li
103.396 357.283 li
107.283 346.604 li
96.604 342.717 li
cp
96.2266 341.908 mo
108.092 346.227 li
103.773 358.092 li
91.9077 353.773 li
96.2266 341.908 li
cp
f
96.3086 392.084 mo
92.084 403.691 li
103.691 407.916 li
107.916 396.309 li
96.3086 392.084 li
cp
95.8984 391.204 mo
108.796 395.898 li
104.102 408.796 li
91.2041 404.102 li
95.8984 391.204 li
cp
f
96.0132 441.45 mo
91.4507 453.986 li
103.987 458.55 li
108.549 446.014 li
96.0132 441.45 li
cp
95.5703 440.501 mo
109.5 445.57 li
104.43 459.499 li
90.5005 454.43 li
95.5703 440.501 li
cp
f
95.7178 490.817 mo
90.8174 504.282 li
104.282 509.183 li
109.183 495.718 li
95.7178 490.817 li
cp
95.2422 489.797 mo
110.203 495.242 li
104.758 510.203 li
89.7969 504.758 li
95.2422 489.797 li
cp
f
95.4229 540.184 mo
90.1841 554.577 li
104.577 559.816 li
109.816 545.423 li
95.4229 540.184 li
cp
94.9141 539.094 mo
110.907 544.914 li
105.086 560.906 li
89.0933 555.086 li
94.9141 539.094 li
cp
f
95.1274 589.551 mo
89.5508 604.873 li
104.873 610.449 li
110.449 595.127 li
95.1274 589.551 li
cp
94.5859 588.39 mo
111.61 594.586 li
105.414 611.61 li
88.3896 605.414 li
94.5859 588.39 li
cp
f
94.832 638.917 mo
88.9175 655.168 li
105.168 661.083 li
111.083 644.832 li
94.832 638.917 li
cp
94.2578 637.686 mo
112.314 644.258 li
105.742 662.314 li
87.686 655.742 li
94.2578 637.686 li
cp
f
94.5366 688.284 mo
88.2842 705.463 li
105.463 711.716 li
111.716 694.537 li
94.5366 688.284 li
cp
93.9297 686.982 mo
113.018 693.93 li
106.07 713.018 li
86.9824 706.07 li
93.9297 686.982 li
cp
f
94.2412 737.65 mo
87.6509 755.759 li
105.759 762.35 li
112.349 744.241 li
94.2412 737.65 li
cp
93.6016 736.278 mo
113.721 743.602 li
106.398 763.722 li
86.2788 756.398 li
93.6016 736.278 li
cp
f
93.9463 787.018 mo
87.0176 806.054 li
106.054 812.982 li
112.982 793.946 li
93.9463 787.018 li
cp
93.2734 785.575 mo
114.425 793.273 li
106.727 814.425 li
85.5752 806.727 li
93.2734 785.575 li
cp
f
93.6509 836.384 mo
86.3843 856.35 li
106.349 863.616 li
113.616 843.65 li
93.6509 836.384 li
cp
92.9453 834.871 mo
115.129 842.945 li
107.055 865.129 li
84.8711 857.055 li
92.9453 834.871 li
cp
f
93.3555 885.751 mo
85.751 906.645 li
106.645 914.249 li
114.249 893.355 li
93.3555 885.751 li
cp
92.6172 884.168 mo
115.833 892.617 li
107.383 915.832 li
84.1675 907.383 li
92.6172 884.168 li
cp
f
93.0601 935.117 mo
85.1177 956.939 li
106.94 964.883 li
114.882 943.061 li
93.0601 935.117 li
cp
92.2891 933.464 mo
116.536 942.289 li
107.711 966.536 li
83.4639 957.711 li
92.2891 933.464 li
cp
f
92.7651 984.484 mo
84.4844 1007.24 li
107.235 1015.52 li
115.516 992.765 li
92.7651 984.484 li
cp
91.9609 982.761 mo
117.24 991.961 li
108.039 1017.24 li
82.7603 1008.04 li
91.9609 982.761 li
cp
f
148.73 -2.72314 mo
147.277 1.27002 li
151.27 2.72314 li
152.723 -1.27002 li
148.73 -2.72314 li
cp
148.589 -3.02588 mo
153.026 -1.41113 li
151.411 3.02588 li
146.974 1.41113 li
148.589 -3.02588 li
cp
f
148.448 46.6719 mo
146.672 51.5518 li
151.552 53.3281 li
153.328 48.4482 li
148.448 46.6719 li
cp
148.275 46.3018 mo
153.698 48.2754 li
151.725 53.6982 li
146.302 51.7246 li
148.275 46.3018 li
cp
f
148.166 96.0664 mo
146.066 101.834 li
151.834 103.934 li
153.934 98.166 li
148.166 96.0664 li
cp
147.962 95.6294 mo
154.371 97.9619 li
152.038 104.371 li
145.629 102.038 li
147.962 95.6294 li
cp
f
147.884 145.461 mo
145.461 152.116 li
152.116 154.539 li
154.539 147.884 li
147.884 145.461 li
cp
147.648 144.957 mo
155.043 147.648 li
152.352 155.043 li
144.957 152.352 li
147.648 144.957 li
cp
f
147.602 194.856 mo
144.856 202.398 li
152.398 205.144 li
155.144 197.602 li
147.602 194.856 li
cp
147.335 194.285 mo
155.715 197.335 li
152.665 205.715 li
144.285 202.665 li
147.335 194.285 li
cp
f
147.319 244.251 mo
144.251 252.681 li
152.681 255.749 li
155.749 247.319 li
147.319 244.251 li
cp
147.021 243.612 mo
156.388 247.021 li
152.979 256.388 li
143.612 252.979 li
147.021 243.612 li
cp
f
147.037 293.646 mo
143.646 302.963 li
152.963 306.354 li
156.354 297.037 li
147.037 293.646 li
cp
146.708 292.94 mo
157.06 296.708 li
153.292 307.06 li
142.94 303.292 li
146.708 292.94 li
cp
f
146.755 343.041 mo
143.041 353.245 li
153.245 356.959 li
156.959 346.755 li
146.755 343.041 li
cp
146.395 342.268 mo
157.732 346.395 li
153.605 357.732 li
142.268 353.605 li
146.395 342.268 li
cp
f
146.473 392.436 mo
142.436 403.527 li
153.527 407.564 li
157.564 396.473 li
146.473 392.436 li
cp
146.081 391.595 mo
158.405 396.081 li
153.919 408.405 li
141.595 403.919 li
146.081 391.595 li
cp
f
146.19 441.83 mo
141.831 453.81 li
153.81 458.17 li
158.169 446.19 li
146.19 441.83 li
cp
145.767 440.923 mo
159.077 445.768 li
154.233 459.077 li
140.923 454.232 li
145.767 440.923 li
cp
f
145.908 491.226 mo
141.226 504.092 li
154.092 508.774 li
158.774 495.908 li
145.908 491.226 li
cp
145.454 490.25 mo
159.75 495.454 li
154.546 509.75 li
140.25 504.546 li
145.454 490.25 li
cp
f
145.626 540.62 mo
140.62 554.374 li
154.374 559.38 li
159.38 545.626 li
145.626 540.62 li
cp
145.14 539.578 mo
160.422 545.141 li
154.86 560.422 li
139.578 554.859 li
145.14 539.578 li
cp
f
145.344 590.015 mo
140.015 604.656 li
154.656 609.985 li
159.985 595.344 li
145.344 590.015 li
cp
144.827 588.905 mo
161.094 594.826 li
155.173 611.095 li
138.906 605.174 li
144.827 588.905 li
cp
f
145.062 639.41 mo
139.41 654.938 li
154.938 660.59 li
160.59 645.062 li
145.062 639.41 li
cp
144.513 638.233 mo
161.767 644.513 li
155.487 661.767 li
138.233 655.487 li
144.513 638.233 li
cp
f
144.78 688.805 mo
138.805 705.221 li
155.22 711.195 li
161.195 694.779 li
144.78 688.805 li
cp
144.2 687.561 mo
162.439 694.199 li
155.8 712.439 li
137.561 705.801 li
144.2 687.561 li
cp
f
144.498 738.199 mo
138.2 755.503 li
155.502 761.801 li
161.8 744.497 li
144.498 738.199 li
cp
143.886 736.889 mo
163.111 743.886 li
156.114 763.111 li
136.889 756.114 li
143.886 736.889 li
cp
f
144.215 787.595 mo
137.594 805.785 li
155.785 812.405 li
162.406 794.215 li
144.215 787.595 li
cp
143.572 786.216 mo
163.784 793.572 li
156.428 813.784 li
136.216 806.428 li
143.572 786.216 li
cp
f
143.933 836.989 mo
136.989 856.067 li
156.067 863.011 li
163.011 843.933 li
143.933 836.989 li
cp
143.259 835.544 mo
164.457 843.259 li
156.741 864.456 li
135.543 856.741 li
143.259 835.544 li
cp
f
143.651 886.384 mo
136.384 906.35 li
156.349 913.616 li
163.616 893.65 li
143.651 886.384 li
cp
142.945 884.871 mo
165.129 892.945 li
157.055 915.129 li
134.871 907.055 li
142.945 884.871 li
cp
f
143.369 935.779 mo
135.779 956.631 li
156.631 964.221 li
164.221 943.369 li
143.369 935.779 li
cp
142.632 934.199 mo
165.801 942.632 li
157.368 965.801 li
134.199 957.368 li
142.632 934.199 li
cp
f
143.086 985.174 mo
135.174 1006.91 li
156.914 1014.83 li
164.826 993.087 li
143.086 985.174 li
cp
142.318 983.526 mo
166.474 992.318 li
157.682 1016.47 li
133.526 1007.68 li
142.318 983.526 li
cp
f
198.789 -2.59668 mo
197.403 1.21094 li
201.211 2.59668 li
202.597 -1.21094 li
198.789 -2.59668 li
cp
198.655 -2.88477 mo
202.885 -1.34521 li
201.345 2.88477 li
197.115 1.34521 li
198.655 -2.88477 li
cp
f
198.52 46.8267 mo
196.827 51.48 li
201.48 53.1733 li
203.173 48.52 li
198.52 46.8267 li
cp
198.356 46.4736 mo
203.526 48.3555 li
201.644 53.5264 li
196.474 51.6445 li
198.356 46.4736 li
cp
f
198.251 96.2495 mo
196.25 101.749 li
201.749 103.75 li
203.75 98.251 li
198.251 96.2495 li
cp
198.057 95.833 mo
204.167 98.0566 li
201.943 104.167 li
195.833 101.943 li
198.057 95.833 li
cp
f
197.982 145.672 mo
195.672 152.018 li
202.018 154.328 li
204.328 147.982 li
197.982 145.672 li
cp
197.758 145.191 mo
204.809 147.758 li
202.242 154.809 li
195.191 152.242 li
197.758 145.191 li
cp
f
197.713 195.096 mo
195.096 202.287 li
202.287 204.904 li
204.904 197.713 li
197.713 195.096 li
cp
197.459 194.551 mo
205.449 197.459 li
202.541 205.449 li
194.551 202.541 li
197.459 194.551 li
cp
f
197.444 244.519 mo
194.519 252.556 li
202.556 255.481 li
205.481 247.444 li
197.444 244.519 li
cp
197.16 243.909 mo
206.091 247.16 li
202.84 256.091 li
193.909 252.84 li
197.16 243.909 li
cp
f
197.175 293.941 mo
193.941 302.825 li
202.825 306.059 li
206.059 297.175 li
197.175 293.941 li
cp
196.861 293.269 mo
206.731 296.861 li
203.139 306.731 li
193.269 303.139 li
196.861 293.269 li
cp
f
196.906 343.364 mo
193.364 353.094 li
203.094 356.636 li
206.636 346.906 li
196.906 343.364 li
cp
196.562 342.627 mo
207.373 346.562 li
203.438 357.373 li
192.627 353.438 li
196.562 342.627 li
cp
f
196.637 392.788 mo
192.788 403.363 li
203.363 407.213 li
207.212 396.637 li
196.637 392.788 li
cp
196.263 391.986 mo
208.014 396.263 li
203.737 408.014 li
191.986 403.737 li
196.263 391.986 li
cp
f
196.368 442.211 mo
192.21 453.633 li
203.632 457.789 li
207.79 446.367 li
196.368 442.211 li
cp
195.964 441.345 mo
208.655 445.964 li
204.036 458.655 li
191.345 454.036 li
195.964 441.345 li
cp
f
196.099 491.634 mo
191.633 503.901 li
203.901 508.366 li
208.367 496.099 li
196.099 491.634 li
cp
195.665 490.704 mo
209.296 495.665 li
204.335 509.296 li
190.704 504.335 li
195.665 490.704 li
cp
f
195.83 541.057 mo
191.057 554.171 li
204.17 558.943 li
208.943 545.829 li
195.83 541.057 li
cp
195.366 540.063 mo
209.937 545.366 li
204.634 559.938 li
190.063 554.634 li
195.366 540.063 li
cp
f
195.561 590.479 mo
190.479 604.439 li
204.439 609.521 li
209.521 595.561 li
195.561 590.479 li
cp
195.067 589.422 mo
210.578 595.067 li
204.933 610.578 li
189.422 604.933 li
195.067 589.422 li
cp
f
195.292 639.902 mo
189.902 654.709 li
204.708 660.098 li
210.098 645.291 li
195.292 639.902 li
cp
194.768 638.78 mo
211.219 644.769 li
205.232 661.22 li
188.781 655.231 li
194.768 638.78 li
cp
f
195.022 689.325 mo
189.326 704.978 li
204.978 710.675 li
210.674 695.022 li
195.022 689.325 li
cp
194.469 688.14 mo
211.86 694.47 li
205.531 711.86 li
188.14 705.53 li
194.469 688.14 li
cp
f
194.753 738.748 mo
188.749 755.247 li
205.247 761.252 li
211.251 744.753 li
194.753 738.748 li
cp
194.17 737.498 mo
212.501 744.17 li
205.83 762.502 li
187.499 755.83 li
194.17 737.498 li
cp
f
194.484 788.172 mo
188.171 805.516 li
205.516 811.828 li
211.829 794.484 li
194.484 788.172 li
cp
193.872 786.857 mo
213.143 793.871 li
206.128 813.143 li
186.857 806.129 li
193.872 786.857 li
cp
f
194.215 837.595 mo
187.594 855.785 li
205.785 862.405 li
212.406 844.215 li
194.215 837.595 li
cp
193.572 836.216 mo
213.784 843.572 li
206.428 863.784 li
186.216 856.428 li
193.572 836.216 li
cp
f
193.946 887.018 mo
187.018 906.054 li
206.054 912.982 li
212.982 893.946 li
193.946 887.018 li
cp
193.273 885.575 mo
214.425 893.273 li
206.727 914.425 li
185.575 906.727 li
193.273 885.575 li
cp
f
193.677 936.44 mo
186.44 956.323 li
206.323 963.56 li
213.56 943.677 li
193.677 936.44 li
cp
192.975 934.934 mo
215.066 942.975 li
207.025 965.066 li
184.934 957.025 li
192.975 934.934 li
cp
f
193.408 985.863 mo
185.863 1006.59 li
206.592 1014.14 li
214.137 993.408 li
193.408 985.863 li
cp
192.676 984.293 mo
215.707 992.676 li
207.324 1015.71 li
184.293 1007.32 li
192.676 984.293 li
cp
f
248.848 -2.46973 mo
247.53 1.15186 li
251.152 2.46973 li
252.47 -1.15186 li
248.848 -2.46973 li
cp
248.72 -2.74414 mo
252.744 -1.27979 li
251.28 2.74414 li
247.256 1.27979 li
248.72 -2.74414 li
cp
f
248.592 46.9814 mo
246.981 51.4077 li
251.408 53.0186 li
253.019 48.5923 li
248.592 46.9814 li
cp
248.436 46.646 mo
253.354 48.436 li
251.564 53.354 li
246.646 51.564 li
248.436 46.646 li
cp
f
248.336 96.4326 mo
246.433 101.664 li
251.664 103.567 li
253.567 98.3364 li
248.336 96.4326 li
cp
248.151 96.0361 mo
253.964 98.1514 li
251.849 103.964 li
246.036 101.849 li
248.151 96.0361 li
cp
f
248.081 145.884 mo
245.884 151.919 li
251.919 154.116 li
254.116 148.081 li
248.081 145.884 li
cp
247.867 145.426 mo
254.574 147.867 li
252.133 154.574 li
245.426 152.133 li
247.867 145.426 li
cp
f
247.825 195.335 mo
245.335 202.175 li
252.175 204.665 li
254.665 197.825 li
247.825 195.335 li
cp
247.583 194.816 mo
255.184 197.583 li
252.417 205.184 li
244.816 202.417 li
247.583 194.816 li
cp
f
247.569 244.786 mo
244.786 252.432 li
252.431 255.214 li
255.214 247.568 li
247.569 244.786 li
cp
247.298 244.207 mo
255.793 247.298 li
252.702 255.793 li
244.207 252.702 li
247.298 244.207 li
cp
f
247.313 294.237 mo
244.237 302.688 li
252.688 305.763 li
255.763 297.313 li
247.313 294.237 li
cp
247.014 293.597 mo
256.403 297.014 li
252.986 306.403 li
243.597 302.986 li
247.014 293.597 li
cp
f
247.057 343.688 mo
243.688 352.943 li
252.943 356.312 li
256.312 347.057 li
247.057 343.688 li
cp
246.729 342.987 mo
257.013 346.729 li
253.271 357.013 li
242.987 353.271 li
246.729 342.987 li
cp
f
246.801 393.139 mo
243.139 403.199 li
253.199 406.86 li
256.861 396.801 li
246.801 393.139 li
cp
246.445 392.377 mo
257.623 396.445 li
253.555 407.623 li
242.377 403.555 li
246.445 392.377 li
cp
f
246.545 442.591 mo
242.59 453.455 li
253.455 457.409 li
257.41 446.545 li
246.545 442.591 li
cp
246.161 441.768 mo
258.233 446.161 li
253.839 458.232 li
241.767 453.839 li
246.161 441.768 li
cp
f
246.289 492.042 mo
242.042 503.711 li
253.711 507.958 li
257.958 496.289 li
246.289 492.042 li
cp
245.876 491.157 mo
258.843 495.877 li
254.124 508.843 li
241.157 504.123 li
245.876 491.157 li
cp
f
246.033 541.493 mo
241.493 553.967 li
253.967 558.507 li
258.507 546.033 li
246.033 541.493 li
cp
245.592 540.548 mo
259.453 545.592 li
254.408 559.452 li
240.547 554.408 li
245.592 540.548 li
cp
f
245.777 590.944 mo
240.944 604.223 li
254.223 609.056 li
259.056 595.777 li
245.777 590.944 li
cp
245.308 589.938 mo
260.063 595.308 li
254.692 610.063 li
239.938 604.692 li
245.308 589.938 li
cp
f
245.521 640.396 mo
240.395 654.479 li
254.479 659.604 li
259.605 645.521 li
245.521 640.396 li
cp
245.023 639.328 mo
260.672 645.023 li
254.977 660.672 li
239.328 654.977 li
245.023 639.328 li
cp
f
245.265 689.846 mo
239.846 704.734 li
254.735 710.154 li
260.154 695.266 li
245.265 689.846 li
cp
244.739 688.718 mo
261.282 694.739 li
255.261 711.282 li
238.718 705.261 li
244.739 688.718 li
cp
f
245.009 739.297 mo
239.297 754.991 li
254.991 760.703 li
260.703 745.009 li
245.009 739.297 li
cp
244.455 738.108 mo
261.892 744.455 li
255.545 761.892 li
238.108 755.545 li
244.455 738.108 li
cp
f
244.753 788.748 mo
238.749 805.247 li
255.247 811.252 li
261.251 794.753 li
244.753 788.748 li
cp
244.17 787.498 mo
262.502 794.17 li
255.83 812.502 li
237.499 805.83 li
244.17 787.498 li
cp
f
244.498 838.199 mo
238.2 855.503 li
255.502 861.801 li
261.8 844.497 li
244.498 838.199 li
cp
243.886 836.889 mo
263.111 843.886 li
256.114 863.111 li
236.889 856.114 li
243.886 836.889 li
cp
f
244.241 887.65 mo
237.651 905.759 li
255.759 912.35 li
262.349 894.241 li
244.241 887.65 li
cp
243.602 886.278 mo
263.721 893.602 li
256.398 913.722 li
236.279 906.398 li
243.602 886.278 li
cp
f
243.985 937.102 mo
237.102 956.015 li
256.015 962.898 li
262.898 943.985 li
243.985 937.102 li
cp
243.317 935.669 mo
264.331 943.317 li
256.683 964.331 li
235.669 956.683 li
243.317 935.669 li
cp
f
243.729 986.553 mo
236.553 1006.27 li
256.271 1013.45 li
263.447 993.729 li
243.729 986.553 li
cp
243.033 985.059 mo
264.941 993.033 li
256.967 1014.94 li
235.059 1006.97 li
243.033 985.059 li
cp
f
298.907 -2.34326 mo
297.657 1.09277 li
301.093 2.34326 li
302.343 -1.09277 li
298.907 -2.34326 li
cp
298.786 -2.60352 mo
302.604 -1.21387 li
301.214 2.60352 li
297.396 1.21387 li
298.786 -2.60352 li
cp
f
298.665 47.1362 mo
297.136 51.3354 li
301.335 52.8638 li
302.864 48.6646 li
298.665 47.1362 li
cp
298.516 46.8179 mo
303.182 48.5161 li
301.484 53.1821 li
296.818 51.4839 li
298.516 46.8179 li
cp
f
298.422 96.6152 mo
296.615 101.578 li
301.578 103.385 li
303.385 98.4219 li
298.422 96.6152 li
cp
298.247 96.2393 mo
303.761 98.2466 li
301.753 103.761 li
296.239 101.753 li
298.247 96.2393 li
cp
f
298.179 146.095 mo
296.095 151.821 li
301.821 153.905 li
303.905 148.179 li
298.179 146.095 li
cp
297.977 145.661 mo
304.339 147.977 li
302.023 154.339 li
295.661 152.023 li
297.977 145.661 li
cp
f
297.936 195.574 mo
295.574 202.064 li
302.064 204.426 li
304.426 197.936 li
297.936 195.574 li
cp
297.707 195.082 mo
304.918 197.707 li
302.293 204.918 li
295.082 202.293 li
297.707 195.082 li
cp
f
297.693 245.053 mo
295.053 252.307 li
302.307 254.947 li
304.947 247.693 li
297.693 245.053 li
cp
297.437 244.503 mo
305.497 247.437 li
302.563 255.497 li
294.503 252.563 li
297.437 244.503 li
cp
f
297.451 294.533 mo
294.533 302.549 li
302.549 305.467 li
305.467 297.451 li
297.451 294.533 li
cp
297.167 293.925 mo
306.075 297.167 li
302.833 306.075 li
293.925 302.833 li
297.167 293.925 li
cp
f
297.208 344.012 mo
294.012 352.792 li
302.792 355.988 li
305.988 347.208 li
297.208 344.012 li
cp
296.897 343.347 mo
306.653 346.897 li
303.103 356.653 li
293.347 353.103 li
296.897 343.347 li
cp
f
296.965 393.491 mo
293.491 403.035 li
303.035 406.509 li
306.509 396.965 li
296.965 393.491 li
cp
296.627 392.768 mo
307.232 396.628 li
303.373 407.232 li
292.768 403.372 li
296.627 392.768 li
cp
f
296.722 442.971 mo
292.97 453.278 li
303.278 457.029 li
307.029 446.722 li
296.722 442.971 li
cp
296.358 442.189 mo
307.811 446.357 li
303.642 457.811 li
292.189 453.643 li
296.358 442.189 li
cp
f
296.479 492.45 mo
292.45 503.521 li
303.521 507.55 li
307.55 496.479 li
296.479 492.45 li
cp
296.088 491.61 mo
308.39 496.088 li
303.912 508.39 li
291.611 503.912 li
296.088 491.61 li
cp
f
296.236 541.929 mo
291.929 553.764 li
303.764 558.071 li
308.071 546.236 li
296.236 541.929 li
cp
295.818 541.032 mo
308.968 545.818 li
304.182 558.968 li
291.032 554.182 li
295.818 541.032 li
cp
f
295.994 591.408 mo
291.408 604.007 li
304.006 608.592 li
308.592 595.993 li
295.994 591.408 li
cp
295.548 590.454 mo
309.546 595.549 li
304.452 609.546 li
290.454 604.451 li
295.548 590.454 li
cp
f
295.751 640.888 mo
290.888 654.249 li
304.249 659.112 li
309.112 645.751 li
295.751 640.888 li
cp
295.279 639.875 mo
310.125 645.278 li
304.721 660.125 li
289.875 654.722 li
295.279 639.875 li
cp
f
295.508 690.367 mo
290.367 704.492 li
304.492 709.633 li
309.633 695.508 li
295.508 690.367 li
cp
295.009 689.297 mo
310.703 695.009 li
304.991 710.703 li
289.296 704.991 li
295.009 689.297 li
cp
f
295.265 739.846 mo
289.846 754.734 li
304.735 760.154 li
310.154 745.266 li
295.265 739.846 li
cp
294.739 738.718 mo
311.282 744.739 li
305.261 761.282 li
288.718 755.261 li
294.739 738.718 li
cp
f
295.022 789.325 mo
289.326 804.978 li
304.978 810.675 li
310.675 795.022 li
295.022 789.325 li
cp
294.469 788.14 mo
311.86 794.47 li
305.531 811.86 li
288.14 805.53 li
294.469 788.14 li
cp
f
294.78 838.805 mo
288.805 855.221 li
305.22 861.195 li
311.195 844.779 li
294.78 838.805 li
cp
294.2 837.561 mo
312.439 844.199 li
305.8 862.439 li
287.561 855.801 li
294.2 837.561 li
cp
f
294.537 888.284 mo
288.284 905.463 li
305.463 911.716 li
311.716 894.537 li
294.537 888.284 li
cp
293.93 886.982 mo
313.018 893.93 li
306.07 913.018 li
286.982 906.07 li
293.93 886.982 li
cp
f
294.294 937.764 mo
287.763 955.706 li
305.706 962.236 li
312.236 944.294 li
294.294 937.764 li
cp
293.66 936.403 mo
313.597 943.66 li
306.34 963.597 li
286.404 956.34 li
293.66 936.403 li
cp
f
294.051 987.242 mo
287.243 1005.95 li
305.949 1012.76 li
312.758 994.051 li
294.051 987.242 li
cp
293.39 985.825 mo
314.175 993.391 li
306.609 1014.17 li
285.825 1006.61 li
293.39 985.825 li
cp
f
348.967 -2.2168 mo
347.783 1.03369 li
351.033 2.2168 li
352.217 -1.03369 li
348.967 -2.2168 li
cp
348.852 -2.46289 mo
352.463 -1.14844 li
351.148 2.46289 li
347.537 1.14844 li
348.852 -2.46289 li
cp
f
348.736 47.291 mo
347.291 51.2632 li
351.264 52.709 li
352.709 48.7368 li
348.736 47.291 li
cp
348.597 46.9897 mo
353.01 48.5962 li
351.403 53.0103 li
346.99 51.4038 li
348.597 46.9897 li
cp
f
348.507 96.7983 mo
346.799 101.493 li
351.493 103.202 li
353.201 98.5068 li
348.507 96.7983 li
cp
348.341 96.4424 mo
353.558 98.3413 li
351.659 103.558 li
346.442 101.659 li
348.341 96.4424 li
cp
f
348.277 146.306 mo
346.306 151.723 li
351.723 153.694 li
353.694 148.277 li
348.277 146.306 li
cp
348.086 145.896 mo
354.104 148.086 li
351.914 154.104 li
345.896 151.914 li
348.086 145.896 li
cp
f
348.048 195.813 mo
345.813 201.952 li
351.952 204.187 li
354.187 198.048 li
348.048 195.813 li
cp
347.831 195.348 mo
354.652 197.831 li
352.169 204.652 li
345.348 202.169 li
347.831 195.348 li
cp
f
347.818 245.321 mo
345.32 252.182 li
352.182 254.679 li
354.68 247.818 li
347.818 245.321 li
cp
347.575 244.801 mo
355.199 247.576 li
352.425 255.199 li
344.801 252.424 li
347.575 244.801 li
cp
f
347.588 294.828 mo
344.828 302.412 li
352.412 305.172 li
355.172 297.588 li
347.588 294.828 li
cp
347.32 294.253 mo
355.746 297.32 li
352.68 305.747 li
344.254 302.68 li
347.32 294.253 li
cp
f
347.358 344.335 mo
344.336 352.642 li
352.642 355.665 li
355.664 347.358 li
347.358 344.335 li
cp
347.065 343.706 mo
356.294 347.065 li
352.935 356.294 li
343.706 352.935 li
347.065 343.706 li
cp
f
347.129 393.843 mo
343.843 402.871 li
352.871 406.157 li
356.157 397.129 li
347.129 393.843 li
cp
346.81 393.159 mo
356.841 396.81 li
353.19 406.841 li
343.159 403.19 li
346.81 393.159 li
cp
f
346.899 443.351 mo
343.351 453.101 li
353.101 456.649 li
356.649 446.899 li
346.899 443.351 li
cp
346.555 442.611 mo
357.389 446.555 li
353.445 457.389 li
342.611 453.445 li
346.555 442.611 li
cp
f
346.67 492.857 mo
342.857 503.33 li
353.33 507.143 li
357.143 496.67 li
346.67 492.857 li
cp
346.3 492.064 mo
357.936 496.3 li
353.7 507.936 li
342.064 503.7 li
346.3 492.064 li
cp
f
346.439 542.365 mo
342.365 553.561 li
353.561 557.635 li
357.635 546.439 li
346.439 542.365 li
cp
346.044 541.517 mo
358.483 546.044 li
353.956 558.483 li
341.517 553.956 li
346.044 541.517 li
cp
f
346.21 591.873 mo
341.873 603.79 li
353.79 608.127 li
358.127 596.21 li
346.21 591.873 li
cp
345.789 590.97 mo
359.03 595.789 li
354.211 609.03 li
340.97 604.211 li
345.789 590.97 li
cp
f
345.98 641.38 mo
341.38 654.02 li
354.02 658.62 li
358.62 645.98 li
345.98 641.38 li
cp
345.534 640.423 mo
359.577 645.534 li
354.466 659.577 li
340.423 654.466 li
345.534 640.423 li
cp
f
345.751 690.888 mo
340.888 704.249 li
354.249 709.112 li
359.112 695.751 li
345.751 690.888 li
cp
345.278 689.875 mo
360.125 695.278 li
354.722 710.125 li
339.875 704.722 li
345.278 689.875 li
cp
f
345.521 740.396 mo
340.396 754.479 li
354.479 759.604 li
359.604 745.521 li
345.521 740.396 li
cp
345.023 739.328 mo
360.672 745.023 li
354.977 760.672 li
339.328 754.977 li
345.023 739.328 li
cp
f
345.291 789.902 mo
339.902 804.709 li
354.709 810.098 li
360.098 795.291 li
345.291 789.902 li
cp
344.769 788.78 mo
361.22 794.769 li
355.231 811.22 li
338.78 805.231 li
344.769 788.78 li
cp
f
345.062 839.41 mo
339.41 854.938 li
354.938 860.59 li
360.59 845.062 li
345.062 839.41 li
cp
344.513 838.233 mo
361.767 844.513 li
355.487 861.767 li
338.233 855.487 li
344.513 838.233 li
cp
f
344.832 888.917 mo
338.917 905.168 li
355.168 911.083 li
361.083 894.832 li
344.832 888.917 li
cp
344.258 887.686 mo
362.314 894.258 li
355.742 912.314 li
337.686 905.742 li
344.258 887.686 li
cp
f
344.603 938.425 mo
338.425 955.397 li
355.397 961.575 li
361.575 944.603 li
344.603 938.425 li
cp
344.003 937.139 mo
362.861 944.003 li
355.997 962.861 li
337.139 955.997 li
344.003 937.139 li
cp
f
344.373 987.933 mo
337.933 1005.63 li
355.627 1012.07 li
362.067 994.373 li
344.373 987.933 li
cp
343.747 986.592 mo
363.408 993.747 li
356.253 1013.41 li
336.592 1006.25 li
343.747 986.592 li
cp
f
399.025 -2.08984 mo
397.91 .974609 li
400.975 2.08984 li
402.09 -.974609 li
399.025 -2.08984 li
cp
398.917 -2.32227 mo
402.322 -1.08301 li
401.083 2.32227 li
397.678 1.08301 li
398.917 -2.32227 li
cp
f
398.809 47.4458 mo
397.445 51.1909 li
401.191 52.5542 li
402.555 48.8091 li
398.809 47.4458 li
cp
398.677 47.1621 mo
402.838 48.6768 li
401.323 52.8379 li
397.162 51.3232 li
398.677 47.1621 li
cp
f
398.593 96.9814 mo
396.981 101.408 li
401.407 103.019 li
403.019 98.5923 li
398.593 96.9814 li
cp
398.436 96.646 mo
403.354 98.436 li
401.564 103.354 li
396.646 101.564 li
398.436 96.646 li
cp
f
398.376 146.517 mo
396.517 151.624 li
401.624 153.483 li
403.483 148.376 li
398.376 146.517 li
cp
398.195 146.13 mo
403.87 148.195 li
401.805 153.87 li
396.13 151.805 li
398.195 146.13 li
cp
f
398.159 196.053 mo
396.053 201.841 li
401.841 203.947 li
403.947 198.159 li
398.159 196.053 li
cp
397.955 195.614 mo
404.386 197.955 li
402.045 204.386 li
395.614 202.045 li
397.955 195.614 li
cp
f
397.942 245.588 mo
395.588 252.057 li
402.058 254.412 li
404.412 247.943 li
397.942 245.588 li
cp
397.714 245.098 mo
404.902 247.714 li
402.286 254.902 li
395.098 252.286 li
397.714 245.098 li
cp
f
397.727 295.124 mo
395.124 302.274 li
402.273 304.876 li
404.876 297.726 li
397.727 295.124 li
cp
397.474 294.582 mo
405.418 297.474 li
402.526 305.418 li
394.582 302.526 li
397.474 294.582 li
cp
f
397.51 344.659 mo
394.659 352.49 li
402.49 355.341 li
405.341 347.51 li
397.51 344.659 li
cp
397.232 344.066 mo
405.935 347.233 li
402.768 355.934 li
394.065 352.767 li
397.232 344.066 li
cp
f
397.293 394.195 mo
394.194 402.707 li
402.707 405.806 li
405.806 397.293 li
397.293 394.195 li
cp
396.992 393.55 mo
406.45 396.992 li
403.008 406.45 li
393.55 403.008 li
396.992 393.55 li
cp
f
397.076 443.73 mo
393.73 452.924 li
402.924 456.27 li
406.27 447.076 li
397.076 443.73 li
cp
396.752 443.034 mo
406.966 446.752 li
403.248 456.966 li
393.034 453.248 li
396.752 443.034 li
cp
f
396.859 493.266 mo
393.266 503.141 li
403.141 506.734 li
406.734 496.859 li
396.859 493.266 li
cp
396.511 492.518 mo
407.482 496.511 li
403.489 507.482 li
392.518 503.489 li
396.511 492.518 li
cp
f
396.644 542.802 mo
392.802 553.356 li
403.356 557.198 li
407.198 546.644 li
396.644 542.802 li
cp
396.271 542.002 mo
407.998 546.271 li
403.729 557.998 li
392.002 553.729 li
396.271 542.002 li
cp
f
396.427 592.337 mo
392.337 603.573 li
403.573 607.663 li
407.663 596.427 li
396.427 592.337 li
cp
396.029 591.485 mo
408.515 596.029 li
403.971 608.515 li
391.485 603.971 li
396.029 591.485 li
cp
f
396.21 641.873 mo
391.873 653.79 li
403.79 658.127 li
408.127 646.21 li
396.21 641.873 li
cp
395.789 640.97 mo
409.03 645.789 li
404.211 659.03 li
390.97 654.211 li
395.789 640.97 li
cp
f
395.993 691.408 mo
391.408 704.007 li
404.007 708.592 li
408.592 695.993 li
395.993 691.408 li
cp
395.549 690.454 mo
409.546 695.549 li
404.451 709.546 li
390.454 704.451 li
395.549 690.454 li
cp
f
395.777 740.944 mo
390.944 754.223 li
404.223 759.056 li
409.056 745.777 li
395.777 740.944 li
cp
395.308 739.938 mo
410.063 745.308 li
404.692 760.063 li
389.938 754.692 li
395.308 739.938 li
cp
f
395.561 790.479 mo
390.479 804.439 li
404.439 809.521 li
409.521 795.561 li
395.561 790.479 li
cp
395.067 789.422 mo
410.578 795.067 li
404.933 810.578 li
389.422 804.933 li
395.067 789.422 li
cp
f
395.344 840.015 mo
390.015 854.656 li
404.656 859.985 li
409.985 845.344 li
395.344 840.015 li
cp
394.826 838.905 mo
411.095 844.826 li
405.174 861.095 li
388.905 855.174 li
394.826 838.905 li
cp
f
395.127 889.551 mo
389.551 904.873 li
404.873 910.449 li
410.449 895.127 li
395.127 889.551 li
cp
394.586 888.39 mo
411.61 894.586 li
405.414 911.61 li
388.39 905.414 li
394.586 888.39 li
cp
f
394.911 939.086 mo
389.086 955.089 li
405.089 960.914 li
410.914 944.911 li
394.911 939.086 li
cp
394.346 937.874 mo
412.126 944.346 li
405.654 962.126 li
387.874 955.654 li
394.346 937.874 li
cp
f
394.694 988.622 mo
388.622 1005.31 li
405.306 1011.38 li
411.378 994.694 li
394.694 988.622 li
cp
394.104 987.357 mo
412.643 994.104 li
405.896 1012.64 li
387.357 1005.9 li
394.104 987.357 li
cp
f
449.085 -1.96338 mo
448.037 .915527 li
450.915 1.96338 li
451.963 -.915527 li
449.085 -1.96338 li
cp
448.982 -2.18115 mo
452.182 -1.01709 li
451.018 2.18115 li
447.818 1.01709 li
448.982 -2.18115 li
cp
f
448.881 47.6006 mo
447.601 51.1191 li
451.119 52.3994 li
452.399 48.8809 li
448.881 47.6006 li
cp
448.757 47.334 mo
452.666 48.7568 li
451.243 52.666 li
447.334 51.2432 li
448.757 47.334 li
cp
f
448.678 97.1641 mo
447.164 101.322 li
451.322 102.836 li
452.836 98.6777 li
448.678 97.1641 li
cp
448.53 96.8491 mo
453.15 98.5308 li
451.47 103.151 li
446.85 101.469 li
448.53 96.8491 li
cp
f
448.475 146.728 mo
446.728 151.526 li
451.525 153.272 li
453.272 148.474 li
448.475 146.728 li
cp
448.305 146.364 mo
453.636 148.305 li
451.695 153.636 li
446.364 151.695 li
448.305 146.364 li
cp
f
448.271 196.292 mo
446.292 201.729 li
451.729 203.708 li
453.708 198.271 li
448.271 196.292 li
cp
448.079 195.88 mo
454.12 198.079 li
451.921 204.12 li
445.88 201.921 li
448.079 195.88 li
cp
f
448.067 245.855 mo
445.855 251.933 li
451.933 254.145 li
454.145 248.067 li
448.067 245.855 li
cp
447.853 245.395 mo
454.605 247.853 li
452.147 254.605 li
445.395 252.147 li
447.853 245.395 li
cp
f
447.864 295.419 mo
445.419 302.136 li
452.136 304.581 li
454.581 297.864 li
447.864 295.419 li
cp
447.627 294.91 mo
455.09 297.626 li
452.373 305.09 li
444.91 302.374 li
447.627 294.91 li
cp
f
447.66 344.983 mo
444.982 352.339 li
452.34 355.017 li
455.018 347.661 li
447.66 344.983 li
cp
447.4 344.425 mo
455.574 347.4 li
452.6 355.575 li
444.426 352.6 li
447.4 344.425 li
cp
f
447.457 394.547 mo
444.547 402.543 li
452.543 405.453 li
455.453 397.457 li
447.457 394.547 li
cp
447.175 393.941 mo
456.06 397.175 li
452.825 406.06 li
443.94 402.825 li
447.175 393.941 li
cp
f
447.254 444.11 mo
444.11 452.746 li
452.746 455.89 li
455.89 447.254 li
447.254 444.11 li
cp
446.948 443.456 mo
456.544 446.948 li
453.052 456.544 li
443.456 453.052 li
446.948 443.456 li
cp
f
447.05 493.674 mo
443.674 502.95 li
452.95 506.326 li
456.326 497.05 li
447.05 493.674 li
cp
446.723 492.972 mo
457.028 496.723 li
453.277 507.028 li
442.972 503.277 li
446.723 492.972 li
cp
f
446.847 543.238 mo
443.238 553.153 li
453.153 556.762 li
456.762 546.847 li
446.847 543.238 li
cp
446.496 542.486 mo
457.514 546.496 li
453.504 557.514 li
442.486 553.504 li
446.496 542.486 li
cp
f
446.644 592.802 mo
442.802 603.356 li
453.356 607.198 li
457.198 596.644 li
446.644 592.802 li
cp
446.271 592.002 mo
457.998 596.271 li
453.729 607.998 li
442.002 603.729 li
446.271 592.002 li
cp
f
446.439 642.365 mo
442.365 653.561 li
453.561 657.635 li
457.635 646.439 li
446.439 642.365 li
cp
446.044 641.517 mo
458.483 646.044 li
453.956 658.483 li
441.517 653.956 li
446.044 641.517 li
cp
f
446.236 691.929 mo
441.929 703.764 li
453.764 708.071 li
458.071 696.236 li
446.236 691.929 li
cp
445.818 691.032 mo
458.968 695.818 li
454.182 708.968 li
441.032 704.182 li
445.818 691.032 li
cp
f
446.033 741.493 mo
441.493 753.967 li
453.967 758.507 li
458.507 746.033 li
446.033 741.493 li
cp
445.592 740.548 mo
459.452 745.592 li
454.408 759.452 li
440.548 754.408 li
445.592 740.548 li
cp
f
445.829 791.057 mo
441.057 804.171 li
454.171 808.943 li
458.943 795.829 li
445.829 791.057 li
cp
445.366 790.063 mo
459.938 795.366 li
454.634 809.938 li
440.063 804.634 li
445.366 790.063 li
cp
f
445.626 840.62 mo
440.62 854.374 li
454.374 859.38 li
459.38 845.626 li
445.626 840.62 li
cp
445.141 839.578 mo
460.422 845.141 li
454.859 860.422 li
439.578 854.859 li
445.141 839.578 li
cp
f
445.423 890.184 mo
440.184 904.577 li
454.577 909.816 li
459.816 895.423 li
445.423 890.184 li
cp
444.914 889.094 mo
460.906 894.914 li
455.086 910.906 li
439.094 905.086 li
444.914 889.094 li
cp
f
445.22 939.748 mo
439.748 954.78 li
454.78 960.252 li
460.252 945.22 li
445.22 939.748 li
cp
444.688 938.608 mo
461.392 944.688 li
455.312 961.392 li
438.608 955.312 li
444.688 938.608 li
cp
f
445.016 989.312 mo
439.312 1004.98 li
454.984 1010.69 li
460.688 995.016 li
445.016 989.312 li
cp
444.462 988.124 mo
461.876 994.462 li
455.538 1011.88 li
438.124 1005.54 li
444.462 988.124 li
cp
f
499.144 -1.83643 mo
498.163 .856445 li
500.856 1.83643 li
501.837 -.856445 li
499.144 -1.83643 li
cp
499.049 -2.04053 mo
502.041 -.95166 li
500.951 2.04053 li
497.959 .95166 li
499.049 -2.04053 li
cp
f
498.953 47.7554 mo
497.755 51.0469 li
501.047 52.2446 li
502.245 48.9531 li
498.953 47.7554 li
cp
498.837 47.5059 mo
502.494 48.8369 li
501.163 52.4941 li
497.506 51.1631 li
498.837 47.5059 li
cp
f
498.763 97.3472 mo
497.348 101.237 li
501.237 102.653 li
502.652 98.7632 li
498.763 97.3472 li
cp
498.626 97.0522 mo
502.947 98.6255 li
501.374 102.948 li
497.053 101.375 li
498.626 97.0522 li
cp
f
498.572 146.939 mo
496.939 151.427 li
501.428 153.061 li
503.061 148.573 li
498.572 146.939 li
cp
498.414 146.599 mo
503.401 148.414 li
501.586 153.401 li
496.599 151.586 li
498.414 146.599 li
cp
f
498.383 196.531 mo
496.531 201.618 li
501.617 203.469 li
503.469 198.382 li
498.383 196.531 li
cp
498.202 196.146 mo
503.854 198.203 li
501.798 203.854 li
496.146 201.797 li
498.202 196.146 li
cp
f
498.192 246.123 mo
496.123 251.808 li
501.808 253.877 li
503.877 248.192 li
498.192 246.123 li
cp
497.991 245.692 mo
504.308 247.991 li
502.009 254.308 li
495.692 252.009 li
497.991 245.692 li
cp
f
498.002 295.715 mo
495.715 301.998 li
501.998 304.285 li
504.285 298.002 li
498.002 295.715 li
cp
497.779 295.239 mo
504.762 297.78 li
502.221 304.761 li
495.238 302.22 li
497.779 295.239 li
cp
f
497.812 345.307 mo
495.307 352.188 li
502.188 354.693 li
504.693 347.812 li
497.812 345.307 li
cp
497.568 344.785 mo
505.215 347.568 li
502.432 355.215 li
494.785 352.432 li
497.568 344.785 li
cp
f
497.621 394.898 mo
494.898 402.379 li
502.379 405.102 li
505.102 397.621 li
497.621 394.898 li
cp
497.356 394.332 mo
505.668 397.356 li
502.644 405.668 li
494.332 402.644 li
497.356 394.332 li
cp
f
497.431 444.49 mo
494.49 452.569 li
502.569 455.51 li
505.51 447.431 li
497.431 444.49 li
cp
497.146 443.878 mo
506.122 447.146 li
502.854 456.122 li
493.878 452.854 li
497.146 443.878 li
cp
f
497.24 494.082 mo
494.082 502.76 li
502.76 505.918 li
505.918 497.24 li
497.24 494.082 li
cp
496.934 493.425 mo
506.575 496.934 li
503.066 506.575 li
493.425 503.066 li
496.934 493.425 li
cp
f
497.05 543.674 mo
493.674 552.95 li
502.95 556.326 li
506.326 547.05 li
497.05 543.674 li
cp
496.723 542.972 mo
507.028 546.723 li
503.277 557.028 li
492.972 553.277 li
496.723 542.972 li
cp
f
496.859 593.266 mo
493.266 603.141 li
503.141 606.734 li
506.734 596.859 li
496.859 593.266 li
cp
496.511 592.518 mo
507.482 596.511 li
503.489 607.482 li
492.518 603.489 li
496.511 592.518 li
cp
f
496.67 642.857 mo
492.857 653.33 li
503.33 657.143 li
507.143 646.67 li
496.67 642.857 li
cp
496.3 642.064 mo
507.936 646.3 li
503.7 657.936 li
492.064 653.7 li
496.3 642.064 li
cp
f
496.479 692.45 mo
492.45 703.521 li
503.521 707.55 li
507.55 696.479 li
496.479 692.45 li
cp
496.088 691.61 mo
508.39 696.088 li
503.912 708.39 li
491.61 703.912 li
496.088 691.61 li
cp
f
496.289 742.042 mo
492.042 753.711 li
503.711 757.958 li
507.958 746.289 li
496.289 742.042 li
cp
495.877 741.157 mo
508.843 745.877 li
504.123 758.843 li
491.157 754.123 li
495.877 741.157 li
cp
f
496.099 791.634 mo
491.634 803.901 li
503.901 808.366 li
508.366 796.099 li
496.099 791.634 li
cp
495.665 790.704 mo
509.296 795.665 li
504.335 809.296 li
490.704 804.335 li
495.665 790.704 li
cp
f
495.908 841.226 mo
491.226 854.092 li
504.092 858.774 li
508.774 845.908 li
495.908 841.226 li
cp
495.454 840.25 mo
509.75 845.454 li
504.546 859.75 li
490.25 854.546 li
495.454 840.25 li
cp
f
495.718 890.817 mo
490.817 904.282 li
504.282 909.183 li
509.183 895.718 li
495.718 890.817 li
cp
495.242 889.797 mo
510.203 895.242 li
504.758 910.203 li
489.797 904.758 li
495.242 889.797 li
cp
f
495.527 940.409 mo
490.409 954.473 li
504.473 959.591 li
509.591 945.527 li
495.527 940.409 li
cp
495.031 939.344 mo
510.656 945.031 li
504.969 960.656 li
489.344 954.969 li
495.031 939.344 li
cp
f
495.337 990.001 mo
490.001 1004.66 li
504.663 1010 li
509.999 995.337 li
495.337 990.001 li
cp
494.819 988.89 mo
511.11 994.819 li
505.181 1011.11 li
488.89 1005.18 li
494.819 988.89 li
cp
f
549.203 -1.70996 mo
548.29 .797363 li
550.797 1.70996 li
551.71 -.797363 li
549.203 -1.70996 li
cp
549.114 -1.8999 mo
551.9 -.885742 li
550.886 1.8999 li
548.1 .885742 li
549.114 -1.8999 li
cp
f
549.025 47.9102 mo
547.91 50.9746 li
550.975 52.0898 li
552.09 49.0254 li
549.025 47.9102 li
cp
548.917 47.6777 mo
552.322 48.917 li
551.083 52.3223 li
547.678 51.083 li
548.917 47.6777 li
cp
f
548.849 97.5303 mo
547.53 101.152 li
551.151 102.47 li
552.47 98.8481 li
548.849 97.5303 li
cp
548.721 97.2559 mo
552.744 98.7202 li
551.279 102.744 li
547.256 101.28 li
548.721 97.2559 li
cp
f
548.671 147.15 mo
547.15 151.329 li
551.329 152.85 li
552.85 148.671 li
548.671 147.15 li
cp
548.523 146.833 mo
553.166 148.523 li
551.477 153.167 li
546.834 151.477 li
548.523 146.833 li
cp
f
548.494 196.77 mo
546.771 201.506 li
551.506 203.23 li
553.229 198.494 li
548.494 196.77 li
cp
548.326 196.411 mo
553.589 198.327 li
551.674 203.589 li
546.411 201.673 li
548.326 196.411 li
cp
f
548.316 246.39 mo
546.391 251.683 li
551.684 253.61 li
553.609 248.317 li
548.316 246.39 li
cp
548.13 245.989 mo
554.011 248.13 li
551.87 254.011 li
545.989 251.87 li
548.13 245.989 li
cp
f
548.14 296.01 mo
546.01 301.86 li
551.86 303.99 li
553.99 298.14 li
548.14 296.01 li
cp
547.933 295.567 mo
554.433 297.933 li
552.067 304.433 li
545.567 302.067 li
547.933 295.567 li
cp
f
547.962 345.63 mo
545.63 352.038 li
552.038 354.37 li
554.37 347.962 li
547.962 345.63 li
cp
547.736 345.145 mo
554.855 347.736 li
552.264 354.855 li
545.145 352.264 li
547.736 345.145 li
cp
f
547.785 395.25 mo
545.25 402.215 li
552.215 404.75 li
554.75 397.785 li
547.785 395.25 li
cp
547.539 394.723 mo
555.277 397.539 li
552.461 405.277 li
544.723 402.461 li
547.539 394.723 li
cp
f
547.608 444.87 mo
544.87 452.392 li
552.392 455.13 li
555.13 447.608 li
547.608 444.87 li
cp
547.342 444.301 mo
555.699 447.342 li
552.658 455.699 li
544.301 452.658 li
547.342 444.301 li
cp
f
547.431 494.49 mo
544.49 502.569 li
552.569 505.51 li
555.51 497.431 li
547.431 494.49 li
cp
547.146 493.878 mo
556.122 497.146 li
552.854 506.122 li
543.878 502.854 li
547.146 493.878 li
cp
f
547.254 544.11 mo
544.11 552.746 li
552.746 555.89 li
555.89 547.254 li
547.254 544.11 li
cp
546.948 543.456 mo
556.544 546.948 li
553.052 556.544 li
543.456 553.052 li
546.948 543.456 li
cp
f
547.076 593.73 mo
543.73 602.924 li
552.924 606.27 li
556.27 597.076 li
547.076 593.73 li
cp
546.752 593.034 mo
556.966 596.752 li
553.248 606.966 li
543.034 603.248 li
546.752 593.034 li
cp
f
546.899 643.351 mo
543.351 653.101 li
553.101 656.649 li
556.649 646.899 li
546.899 643.351 li
cp
546.555 642.611 mo
557.389 646.555 li
553.445 657.389 li
542.611 653.445 li
546.555 642.611 li
cp
f
546.722 692.971 mo
542.971 703.278 li
553.278 707.029 li
557.029 696.722 li
546.722 692.971 li
cp
546.357 692.189 mo
557.811 696.357 li
553.643 707.811 li
542.189 703.643 li
546.357 692.189 li
cp
f
546.545 742.591 mo
542.591 753.455 li
553.455 757.409 li
557.409 746.545 li
546.545 742.591 li
cp
546.161 741.768 mo
558.232 746.161 li
553.839 758.232 li
541.768 753.839 li
546.161 741.768 li
cp
f
546.367 792.211 mo
542.211 803.632 li
553.633 807.789 li
557.789 796.368 li
546.367 792.211 li
cp
545.964 791.345 mo
558.655 795.964 li
554.036 808.655 li
541.345 804.036 li
545.964 791.345 li
cp
f
546.19 841.83 mo
541.83 853.81 li
553.81 858.17 li
558.17 846.19 li
546.19 841.83 li
cp
545.768 840.923 mo
559.077 845.768 li
554.232 859.077 li
540.923 854.232 li
545.768 840.923 li
cp
f
546.014 891.45 mo
541.45 903.986 li
553.986 908.55 li
558.55 896.014 li
546.014 891.45 li
cp
545.57 890.501 mo
559.499 895.57 li
554.43 909.499 li
540.501 904.43 li
545.57 890.501 li
cp
f
545.836 941.07 mo
541.07 954.164 li
554.164 958.93 li
558.93 945.836 li
545.836 941.07 li
cp
545.373 940.078 mo
559.922 945.373 li
554.627 959.922 li
540.078 954.627 li
545.373 940.078 li
cp
f
545.659 990.69 mo
540.69 1004.34 li
554.341 1009.31 li
559.31 995.659 li
545.659 990.69 li
cp
545.177 989.656 mo
560.344 995.177 li
554.823 1010.34 li
539.656 1004.82 li
545.177 989.656 li
cp
f
599.262 -1.58301 mo
598.417 .738281 li
600.738 1.58301 li
601.583 -.738281 li
599.262 -1.58301 li
cp
599.18 -1.75928 mo
601.759 -.820313 li
600.82 1.75928 li
598.241 .820313 li
599.18 -1.75928 li
cp
f
599.098 48.0649 mo
598.064 50.9023 li
600.902 51.9351 li
601.936 49.0977 li
599.098 48.0649 li
cp
598.997 47.8501 mo
602.15 48.9976 li
601.003 52.1499 li
597.85 51.0024 li
598.997 47.8501 li
cp
f
598.934 97.7129 mo
597.713 101.066 li
601.066 102.287 li
602.287 98.9336 li
598.934 97.7129 li
cp
598.815 97.459 mo
602.541 98.8149 li
601.185 102.541 li
597.459 101.185 li
598.815 97.459 li
cp
f
598.77 147.361 mo
597.361 151.23 li
601.23 152.639 li
602.639 148.77 li
598.77 147.361 li
cp
598.633 147.068 mo
602.932 148.633 li
601.367 152.932 li
597.068 151.367 li
598.633 147.068 li
cp
f
598.605 197.009 mo
597.01 201.395 li
601.395 202.991 li
602.99 198.605 li
598.605 197.009 li
cp
598.45 196.677 mo
603.323 198.451 li
601.55 203.323 li
596.677 201.549 li
598.45 196.677 li
cp
f
598.441 246.658 mo
596.657 251.559 li
601.559 253.342 li
603.343 248.441 li
598.441 246.658 li
cp
598.269 246.286 mo
603.714 248.268 li
601.731 253.714 li
596.286 251.732 li
598.269 246.286 li
cp
f
598.277 296.306 mo
596.306 301.723 li
601.723 303.694 li
603.694 298.277 li
598.277 296.306 li
cp
598.086 295.896 mo
604.104 298.086 li
601.914 304.104 li
595.896 301.914 li
598.086 295.896 li
cp
f
598.113 345.954 mo
595.954 351.887 li
601.887 354.046 li
604.046 348.113 li
598.113 345.954 li
cp
597.903 345.504 mo
604.496 347.904 li
602.097 354.496 li
595.504 352.096 li
597.903 345.504 li
cp
f
597.949 395.602 mo
595.603 402.051 li
602.051 404.397 li
604.397 397.949 li
597.949 395.602 li
cp
597.722 395.113 mo
604.887 397.722 li
602.278 404.887 li
595.113 402.278 li
597.722 395.113 li
cp
f
597.785 445.25 mo
595.25 452.215 li
602.215 454.75 li
604.75 447.785 li
597.785 445.25 li
cp
597.539 444.723 mo
605.277 447.539 li
602.461 455.277 li
594.723 452.461 li
597.539 444.723 li
cp
f
597.621 494.898 mo
594.898 502.379 li
602.379 505.102 li
605.102 497.621 li
597.621 494.898 li
cp
597.356 494.332 mo
605.668 497.356 li
602.644 505.668 li
594.332 502.644 li
597.356 494.332 li
cp
f
597.457 544.547 mo
594.547 552.543 li
602.543 555.453 li
605.453 547.457 li
597.457 544.547 li
cp
597.175 543.94 mo
606.06 547.175 li
602.825 556.06 li
593.94 552.825 li
597.175 543.94 li
cp
f
597.293 594.194 mo
594.195 602.707 li
602.707 605.806 li
605.805 597.293 li
597.293 594.194 li
cp
596.992 593.55 mo
606.45 596.992 li
603.008 606.45 li
593.55 603.008 li
596.992 593.55 li
cp
f
597.129 643.843 mo
593.843 652.871 li
602.871 656.157 li
606.157 647.129 li
597.129 643.843 li
cp
596.81 643.159 mo
606.841 646.81 li
603.19 656.841 li
593.159 653.19 li
596.81 643.159 li
cp
f
596.965 693.491 mo
593.491 703.035 li
603.035 706.509 li
606.509 696.965 li
596.965 693.491 li
cp
596.628 692.768 mo
607.232 696.628 li
603.372 707.232 li
592.768 703.372 li
596.628 692.768 li
cp
f
596.801 743.14 mo
593.14 753.199 li
603.199 756.86 li
606.86 746.801 li
596.801 743.14 li
cp
596.445 742.377 mo
607.623 746.445 li
603.555 757.623 li
592.377 753.555 li
596.445 742.377 li
cp
f
596.637 792.787 mo
592.787 803.363 li
603.363 807.213 li
607.213 796.637 li
596.637 792.787 li
cp
596.263 791.986 mo
608.014 796.263 li
603.737 808.014 li
591.986 803.737 li
596.263 791.986 li
cp
f
596.473 842.436 mo
592.436 853.527 li
603.527 857.564 li
607.564 846.473 li
596.473 842.436 li
cp
596.081 841.595 mo
608.405 846.081 li
603.919 858.405 li
591.595 853.919 li
596.081 841.595 li
cp
f
596.309 892.084 mo
592.084 903.691 li
603.691 907.916 li
607.916 896.309 li
596.309 892.084 li
cp
595.898 891.204 mo
608.796 895.898 li
604.102 908.796 li
591.204 904.102 li
595.898 891.204 li
cp
f
596.145 941.732 mo
591.732 953.855 li
603.855 958.268 li
608.268 946.145 li
596.145 941.732 li
cp
595.716 940.813 mo
609.187 945.716 li
604.284 959.187 li
590.813 954.284 li
595.716 940.813 li
cp
f
595.98 991.38 mo
591.38 1004.02 li
604.02 1008.62 li
608.62 995.98 li
595.98 991.38 li
cp
595.534 990.423 mo
609.577 995.534 li
604.466 1009.58 li
590.423 1004.47 li
595.534 990.423 li
cp
f
649.32 -1.45654 mo
648.543 .679199 li
650.68 1.45654 li
651.457 -.679199 li
649.32 -1.45654 li
cp
649.245 -1.61816 mo
651.618 -.754883 li
650.755 1.61816 li
648.382 .754883 li
649.245 -1.61816 li
cp
f
649.17 48.2197 mo
648.22 50.8301 li
650.83 51.7803 li
651.78 49.1699 li
649.17 48.2197 li
cp
649.078 48.022 mo
651.979 49.0776 li
650.922 51.978 li
648.021 50.9224 li
649.078 48.022 li
cp
f
649.019 97.896 mo
647.896 100.981 li
650.981 102.104 li
652.104 99.019 li
649.019 97.896 li
cp
648.91 97.6621 mo
652.338 98.9102 li
651.09 102.338 li
647.662 101.09 li
648.91 97.6621 li
cp
f
648.868 147.572 mo
647.572 151.132 li
651.132 152.428 li
652.428 148.868 li
648.868 147.572 li
cp
648.742 147.303 mo
652.697 148.742 li
651.258 152.697 li
647.303 151.258 li
648.742 147.303 li
cp
f
648.717 197.249 mo
647.249 201.283 li
651.283 202.751 li
652.751 198.717 li
648.717 197.249 li
cp
648.574 196.943 mo
653.057 198.574 li
651.426 203.057 li
646.943 201.426 li
648.574 196.943 li
cp
f
648.566 246.925 mo
646.925 251.434 li
651.434 253.075 li
653.075 248.566 li
648.566 246.925 li
cp
648.407 246.583 mo
653.417 248.407 li
651.593 253.417 li
646.583 251.593 li
648.407 246.583 li
cp
f
648.415 296.602 mo
646.602 301.585 li
651.585 303.398 li
653.398 298.415 li
648.415 296.602 li
cp
648.239 296.224 mo
653.776 298.239 li
651.761 303.776 li
646.224 301.761 li
648.239 296.224 li
cp
f
648.265 346.278 mo
646.277 351.736 li
651.735 353.722 li
653.723 348.264 li
648.265 346.278 li
cp
648.071 345.864 mo
654.136 348.071 li
651.929 354.136 li
645.864 351.929 li
648.071 345.864 li
cp
f
648.113 395.954 mo
645.954 401.887 li
651.887 404.046 li
654.046 398.113 li
648.113 395.954 li
cp
647.903 395.504 mo
654.496 397.903 li
652.097 404.496 li
645.504 402.097 li
647.903 395.504 li
cp
f
647.962 445.63 mo
645.63 452.038 li
652.038 454.37 li
654.37 447.962 li
647.962 445.63 li
cp
647.736 445.145 mo
654.855 447.736 li
652.264 454.855 li
645.145 452.264 li
647.736 445.145 li
cp
f
647.812 495.307 mo
645.307 502.188 li
652.188 504.693 li
654.693 497.812 li
647.812 495.307 li
cp
647.568 494.785 mo
655.215 497.568 li
652.432 505.215 li
644.785 502.432 li
647.568 494.785 li
cp
f
647.66 544.982 mo
644.982 552.34 li
652.34 555.018 li
655.018 547.66 li
647.66 544.982 li
cp
647.4 544.426 mo
655.574 547.4 li
652.6 555.574 li
644.426 552.6 li
647.4 544.426 li
cp
f
647.51 594.659 mo
644.659 602.49 li
652.49 605.341 li
655.341 597.51 li
647.51 594.659 li
cp
647.232 594.065 mo
655.935 597.232 li
652.768 605.935 li
644.065 602.768 li
647.232 594.065 li
cp
f
647.358 644.336 mo
644.336 652.642 li
652.642 655.664 li
655.664 647.358 li
647.358 644.336 li
cp
647.065 643.706 mo
656.294 647.065 li
652.935 656.294 li
643.706 652.935 li
647.065 643.706 li
cp
f
647.208 694.012 mo
644.012 702.792 li
652.792 705.988 li
655.988 697.208 li
647.208 694.012 li
cp
646.897 693.347 mo
656.653 696.897 li
653.103 706.653 li
643.347 703.103 li
646.897 693.347 li
cp
f
647.057 743.688 mo
643.688 752.943 li
652.943 756.312 li
656.312 747.057 li
647.057 743.688 li
cp
646.729 742.987 mo
657.013 746.729 li
653.271 757.013 li
642.987 753.271 li
646.729 742.987 li
cp
f
646.906 793.364 mo
643.364 803.094 li
653.094 806.636 li
656.636 796.906 li
646.906 793.364 li
cp
646.563 792.627 mo
657.373 796.562 li
653.438 807.373 li
642.627 803.438 li
646.563 792.627 li
cp
f
646.755 843.041 mo
643.041 853.245 li
653.245 856.959 li
656.959 846.755 li
646.755 843.041 li
cp
646.395 842.268 mo
657.732 846.395 li
653.605 857.732 li
642.268 853.605 li
646.395 842.268 li
cp
f
646.604 892.717 mo
642.717 903.396 li
653.396 907.283 li
657.283 896.604 li
646.604 892.717 li
cp
646.227 891.908 mo
658.092 896.227 li
653.773 908.092 li
641.908 903.773 li
646.227 891.908 li
cp
f
646.453 942.394 mo
642.394 953.547 li
653.547 957.606 li
657.606 946.453 li
646.453 942.394 li
cp
646.059 941.548 mo
658.452 946.059 li
653.941 958.452 li
641.548 953.941 li
646.059 941.548 li
cp
f
646.302 992.069 mo
642.069 1003.7 li
653.698 1007.93 li
657.931 996.302 li
646.302 992.069 li
cp
645.892 991.188 mo
658.812 995.892 li
654.108 1008.81 li
641.188 1004.11 li
645.892 991.188 li
cp
f
699.38 -1.33008 mo
698.67 .620117 li
700.62 1.33008 li
701.33 -.620117 li
699.38 -1.33008 li
cp
699.311 -1.47754 mo
701.478 -.688965 li
700.689 1.47754 li
698.522 .688965 li
699.311 -1.47754 li
cp
f
699.242 48.3745 mo
698.375 50.7578 li
700.758 51.6255 li
701.625 49.2422 li
699.242 48.3745 li
cp
699.158 48.1938 mo
701.806 49.1577 li
700.842 51.8062 li
698.194 50.8423 li
699.158 48.1938 li
cp
f
699.104 98.0791 mo
698.079 100.896 li
700.896 101.921 li
701.921 99.1045 li
699.104 98.0791 li
cp
699.005 97.8657 mo
702.135 99.0049 li
700.995 102.134 li
697.865 100.995 li
699.005 97.8657 li
cp
f
698.967 147.783 mo
697.783 151.034 li
701.033 152.217 li
702.217 148.966 li
698.967 147.783 li
cp
698.852 147.537 mo
702.463 148.852 li
701.148 152.463 li
697.537 151.148 li
698.852 147.537 li
cp
f
698.828 197.488 mo
697.488 201.171 li
701.172 202.512 li
702.512 198.829 li
698.828 197.488 li
cp
698.698 197.209 mo
702.791 198.698 li
701.302 202.791 li
697.209 201.302 li
698.698 197.209 li
cp
f
698.69 247.192 mo
697.192 251.309 li
701.31 252.808 li
702.808 248.691 li
698.69 247.192 li
cp
698.545 246.88 mo
703.119 248.545 li
701.455 253.12 li
696.881 251.455 li
698.545 246.88 li
cp
f
698.553 296.897 mo
696.896 301.447 li
701.447 303.103 li
703.104 298.553 li
698.553 296.897 li
cp
698.393 296.552 mo
703.448 298.392 li
701.607 303.448 li
696.552 301.608 li
698.393 296.552 li
cp
f
698.415 346.602 mo
696.602 351.585 li
701.585 353.398 li
703.398 348.415 li
698.415 346.602 li
cp
698.239 346.224 mo
703.776 348.239 li
701.761 353.776 li
696.224 351.761 li
698.239 346.224 li
cp
f
698.277 396.306 mo
696.306 401.723 li
701.723 403.694 li
703.694 398.277 li
698.277 396.306 li
cp
698.086 395.896 mo
704.104 398.086 li
701.914 404.104 li
695.896 401.914 li
698.086 395.896 li
cp
f
698.14 446.01 mo
696.01 451.86 li
701.86 453.99 li
703.99 448.14 li
698.14 446.01 li
cp
697.933 445.567 mo
704.433 447.933 li
702.067 454.433 li
695.567 452.067 li
697.933 445.567 li
cp
f
698.002 495.715 mo
695.715 501.998 li
701.998 504.285 li
704.285 498.002 li
698.002 495.715 li
cp
697.779 495.238 mo
704.762 497.779 li
702.221 504.762 li
695.238 502.221 li
697.779 495.238 li
cp
f
697.864 545.419 mo
695.419 552.136 li
702.136 554.581 li
704.581 547.864 li
697.864 545.419 li
cp
697.627 544.91 mo
705.09 547.627 li
702.373 555.09 li
694.91 552.373 li
697.627 544.91 li
cp
f
697.727 595.124 mo
695.124 602.273 li
702.273 604.876 li
704.876 597.727 li
697.727 595.124 li
cp
697.474 594.582 mo
705.418 597.474 li
702.526 605.418 li
694.582 602.526 li
697.474 594.582 li
cp
f
697.588 644.828 mo
694.828 652.412 li
702.412 655.172 li
705.172 647.588 li
697.588 644.828 li
cp
697.32 644.254 mo
705.746 647.32 li
702.68 655.746 li
694.254 652.68 li
697.32 644.254 li
cp
f
697.45 694.532 mo
694.532 702.55 li
702.55 705.468 li
705.468 697.45 li
697.45 694.532 li
cp
697.167 693.925 mo
706.075 697.167 li
702.833 706.075 li
693.925 702.833 li
697.167 693.925 li
cp
f
697.313 744.237 mo
694.237 752.688 li
702.688 755.763 li
705.763 747.313 li
697.313 744.237 li
cp
697.014 743.597 mo
706.403 747.014 li
702.986 756.403 li
693.597 752.986 li
697.014 743.597 li
cp
f
697.175 793.941 mo
693.941 802.825 li
702.825 806.059 li
706.059 797.175 li
697.175 793.941 li
cp
696.861 793.269 mo
706.731 796.861 li
703.139 806.731 li
693.269 803.139 li
696.861 793.269 li
cp
f
697.037 843.646 mo
693.646 852.963 li
702.963 856.354 li
706.354 847.037 li
697.037 843.646 li
cp
696.708 842.939 mo
707.061 846.708 li
703.292 857.061 li
692.939 853.292 li
696.708 842.939 li
cp
f
696.899 893.351 mo
693.351 903.101 li
703.101 906.649 li
706.649 896.899 li
696.899 893.351 li
cp
696.555 892.611 mo
707.389 896.555 li
703.445 907.389 li
692.611 903.445 li
696.555 892.611 li
cp
f
696.762 943.055 mo
693.055 953.238 li
703.238 956.945 li
706.945 946.762 li
696.762 943.055 li
cp
696.401 942.283 mo
707.717 946.401 li
703.599 957.717 li
692.283 953.599 li
696.401 942.283 li
cp
f
696.624 992.76 mo
692.76 1003.38 li
703.376 1007.24 li
707.24 996.624 li
696.624 992.76 li
cp
696.248 991.955 mo
708.045 996.248 li
703.752 1008.04 li
691.955 1003.75 li
696.248 991.955 li
cp
f
749.438 -1.20313 mo
748.797 .561035 li
750.562 1.20313 li
751.203 -.561035 li
749.438 -1.20313 li
cp
749.377 -1.33691 mo
751.337 -.623535 li
750.623 1.33691 li
748.663 .623535 li
749.377 -1.33691 li
cp
f
749.314 48.5293 mo
748.529 50.6855 li
750.686 51.4707 li
751.471 49.3145 li
749.314 48.5293 li
cp
749.238 48.3662 mo
751.634 49.2383 li
750.762 51.6338 li
748.366 50.7617 li
749.238 48.3662 li
cp
f
749.189 98.2617 mo
748.262 100.811 li
750.811 101.738 li
751.738 99.1895 li
749.189 98.2617 li
cp
749.1 98.0688 mo
751.932 99.0996 li
750.9 101.931 li
748.068 100.9 li
749.1 98.0688 li
cp
f
749.064 147.995 mo
747.994 150.935 li
750.936 152.005 li
752.006 149.065 li
749.064 147.995 li
cp
748.961 147.771 mo
752.229 148.961 li
751.039 152.229 li
747.771 151.039 li
748.961 147.771 li
cp
f
748.94 197.727 mo
747.728 201.06 li
751.06 202.273 li
752.272 198.94 li
748.94 197.727 li
cp
748.822 197.475 mo
752.525 198.822 li
751.178 202.525 li
747.475 201.178 li
748.822 197.475 li
cp
f
748.815 247.46 mo
747.46 251.185 li
751.185 252.54 li
752.54 248.815 li
748.815 247.46 li
cp
748.684 247.178 mo
752.822 248.684 li
751.316 252.822 li
747.178 251.316 li
748.684 247.178 li
cp
f
748.69 297.192 mo
747.192 301.309 li
751.31 302.808 li
752.808 298.691 li
748.69 297.192 li
cp
748.545 296.88 mo
753.119 298.545 li
751.455 303.12 li
746.881 301.455 li
748.545 296.88 li
cp
f
748.566 346.925 mo
746.925 351.434 li
751.434 353.075 li
753.075 348.566 li
748.566 346.925 li
cp
748.407 346.583 mo
753.417 348.407 li
751.593 353.417 li
746.583 351.593 li
748.407 346.583 li
cp
f
748.441 396.657 mo
746.657 401.559 li
751.559 403.343 li
753.343 398.441 li
748.441 396.657 li
cp
748.269 396.286 mo
753.714 398.269 li
751.731 403.714 li
746.286 401.731 li
748.269 396.286 li
cp
f
748.316 446.391 mo
746.391 451.684 li
751.684 453.609 li
753.609 448.316 li
748.316 446.391 li
cp
748.13 445.989 mo
754.011 448.13 li
751.87 454.011 li
745.989 451.87 li
748.13 445.989 li
cp
f
748.192 496.123 mo
746.123 501.808 li
751.808 503.877 li
753.877 498.192 li
748.192 496.123 li
cp
747.991 495.692 mo
754.308 497.991 li
752.009 504.308 li
745.692 502.009 li
747.991 495.692 li
cp
f
748.067 545.855 mo
745.855 551.933 li
751.933 554.145 li
754.145 548.067 li
748.067 545.855 li
cp
747.853 545.395 mo
754.605 547.853 li
752.147 554.605 li
745.395 552.147 li
747.853 545.395 li
cp
f
747.942 595.588 mo
745.588 602.058 li
752.058 604.412 li
754.412 597.942 li
747.942 595.588 li
cp
747.714 595.098 mo
754.902 597.714 li
752.286 604.902 li
745.098 602.286 li
747.714 595.098 li
cp
f
747.818 645.32 mo
745.32 652.182 li
752.182 654.68 li
754.68 647.818 li
747.818 645.32 li
cp
747.575 644.801 mo
755.199 647.575 li
752.425 655.199 li
744.801 652.425 li
747.575 644.801 li
cp
f
747.693 695.054 mo
745.054 702.307 li
752.307 704.946 li
754.946 697.693 li
747.693 695.054 li
cp
747.438 694.504 mo
755.496 697.437 li
752.563 705.496 li
744.504 702.563 li
747.438 694.504 li
cp
f
747.568 744.786 mo
744.786 752.432 li
752.432 755.214 li
755.214 747.568 li
747.568 744.786 li
cp
747.299 744.206 mo
755.793 747.299 li
752.701 755.794 li
744.207 752.701 li
747.299 744.206 li
cp
f
747.444 794.519 mo
744.519 802.556 li
752.556 805.481 li
755.481 797.444 li
747.444 794.519 li
cp
747.16 793.909 mo
756.091 797.16 li
752.84 806.091 li
743.909 802.84 li
747.16 793.909 li
cp
f
747.319 844.251 mo
744.251 852.681 li
752.681 855.749 li
755.749 847.319 li
747.319 844.251 li
cp
747.021 843.612 mo
756.388 847.021 li
752.979 856.388 li
743.612 852.979 li
747.021 843.612 li
cp
f
747.194 893.983 mo
743.983 902.806 li
752.806 906.017 li
756.017 897.194 li
747.194 893.983 li
cp
746.883 893.315 mo
756.685 896.883 li
753.117 906.685 li
743.315 903.117 li
746.883 893.315 li
cp
f
747.07 943.717 mo
743.717 952.93 li
752.93 956.283 li
756.283 947.07 li
747.07 943.717 li
cp
746.744 943.019 mo
756.981 946.744 li
753.256 956.981 li
743.019 953.256 li
746.744 943.019 li
cp
f
746.945 993.449 mo
743.449 1003.05 li
753.055 1006.55 li
756.551 996.945 li
746.945 993.449 li
cp
746.605 992.721 mo
757.279 996.605 li
753.395 1007.28 li
742.721 1003.39 li
746.605 992.721 li
cp
f
799.498 -1.07666 mo
798.924 .501953 li
800.502 1.07666 li
801.076 -.501953 li
799.498 -1.07666 li
cp
799.442 -1.19629 mo
801.196 -.557617 li
800.558 1.19629 li
798.804 .557617 li
799.442 -1.19629 li
cp
f
799.387 48.6841 mo
798.685 50.6138 li
800.613 51.3159 li
801.315 49.3862 li
799.387 48.6841 li
cp
799.318 48.5381 mo
801.462 49.3184 li
800.682 51.4619 li
798.538 50.6816 li
799.318 48.5381 li
cp
f
799.274 98.4448 mo
798.445 100.725 li
800.726 101.555 li
801.555 99.2749 li
799.274 98.4448 li
cp
799.194 98.272 mo
801.728 99.1943 li
800.806 101.728 li
798.272 100.806 li
799.194 98.272 li
cp
f
799.163 148.206 mo
798.206 150.837 li
800.837 151.794 li
801.794 149.163 li
799.163 148.206 li
cp
799.07 148.006 mo
801.994 149.07 li
800.93 151.994 li
798.006 150.93 li
799.07 148.006 li
cp
f
799.052 197.966 mo
797.967 200.948 li
800.948 202.034 li
802.033 199.052 li
799.052 197.966 li
cp
798.946 197.74 mo
802.26 198.946 li
801.054 202.26 li
797.74 201.054 li
798.946 197.74 li
cp
f
798.94 247.727 mo
797.728 251.06 li
801.06 252.273 li
802.272 248.94 li
798.94 247.727 li
cp
798.822 247.475 mo
802.525 248.822 li
801.178 252.525 li
797.475 251.178 li
798.822 247.475 li
cp
f
798.828 297.488 mo
797.488 301.171 li
801.172 302.512 li
802.512 298.829 li
798.828 297.488 li
cp
798.698 297.209 mo
802.791 298.698 li
801.302 302.791 li
797.209 301.302 li
798.698 297.209 li
cp
f
798.717 347.249 mo
797.249 351.283 li
801.283 352.751 li
802.751 348.717 li
798.717 347.249 li
cp
798.574 346.943 mo
803.057 348.575 li
801.426 353.057 li
796.943 351.425 li
798.574 346.943 li
cp
f
798.605 397.01 mo
797.01 401.395 li
801.395 402.99 li
802.99 398.605 li
798.605 397.01 li
cp
798.45 396.677 mo
803.323 398.45 li
801.55 403.323 li
796.677 401.55 li
798.45 396.677 li
cp
f
798.494 446.771 mo
796.771 451.506 li
801.506 453.229 li
803.229 448.494 li
798.494 446.771 li
cp
798.326 446.411 mo
803.589 448.326 li
801.674 453.589 li
796.411 451.674 li
798.326 446.411 li
cp
f
798.383 496.531 mo
796.531 501.617 li
801.617 503.469 li
803.469 498.383 li
798.383 496.531 li
cp
798.203 496.146 mo
803.854 498.202 li
801.797 503.854 li
796.146 501.798 li
798.203 496.146 li
cp
f
798.271 546.292 mo
796.292 551.729 li
801.729 553.708 li
803.708 548.271 li
798.271 546.292 li
cp
798.079 545.88 mo
804.12 548.079 li
801.921 554.12 li
795.88 551.921 li
798.079 545.88 li
cp
f
798.159 596.053 mo
796.053 601.841 li
801.841 603.947 li
803.947 598.159 li
798.159 596.053 li
cp
797.955 595.614 mo
804.386 597.955 li
802.045 604.386 li
795.614 602.045 li
797.955 595.614 li
cp
f
798.048 645.813 mo
795.813 651.952 li
801.952 654.187 li
804.187 648.048 li
798.048 645.813 li
cp
797.831 645.348 mo
804.652 647.831 li
802.169 654.652 li
795.348 652.169 li
797.831 645.348 li
cp
f
797.937 695.574 mo
795.574 702.063 li
802.063 704.426 li
804.426 697.937 li
797.937 695.574 li
cp
797.707 695.082 mo
804.918 697.707 li
802.293 704.918 li
795.082 702.293 li
797.707 695.082 li
cp
f
797.824 745.335 mo
795.335 752.176 li
802.176 754.665 li
804.665 747.824 li
797.824 745.335 li
cp
797.583 744.816 mo
805.184 747.583 li
802.417 755.184 li
794.816 752.417 li
797.583 744.816 li
cp
f
797.713 795.096 mo
795.096 802.287 li
802.287 804.904 li
804.904 797.713 li
797.713 795.096 li
cp
797.459 794.551 mo
805.449 797.459 li
802.541 805.449 li
794.551 802.541 li
797.459 794.551 li
cp
f
797.602 844.856 mo
794.856 852.398 li
802.398 855.144 li
805.144 847.602 li
797.602 844.856 li
cp
797.335 844.285 mo
805.715 847.335 li
802.665 855.715 li
794.285 852.665 li
797.335 844.285 li
cp
f
797.49 894.617 mo
794.617 902.51 li
802.51 905.383 li
805.383 897.49 li
797.49 894.617 li
cp
797.211 894.019 mo
805.981 897.211 li
802.789 905.981 li
794.019 902.789 li
797.211 894.019 li
cp
f
797.378 944.378 mo
794.378 952.622 li
802.622 955.622 li
805.622 947.378 li
797.378 944.378 li
cp
797.087 943.753 mo
806.247 947.087 li
802.913 956.247 li
793.753 952.913 li
797.087 943.753 li
cp
f
797.267 994.139 mo
794.139 1002.73 li
802.733 1005.86 li
805.861 997.267 li
797.267 994.139 li
cp
796.963 993.487 mo
806.513 996.963 li
803.037 1006.51 li
793.487 1003.04 li
796.963 993.487 li
cp
f
849.557 -.950195 mo
849.05 .442871 li
850.443 .950195 li
850.95 -.442871 li
849.557 -.950195 li
cp
849.508 -1.05566 mo
851.056 -.492188 li
850.492 1.05566 li
848.944 .492188 li
849.508 -1.05566 li
cp
f
849.459 48.8389 mo
848.839 50.5415 li
850.541 51.1611 li
851.161 49.4585 li
849.459 48.8389 li
cp
849.398 48.71 mo
851.29 49.3984 li
850.602 51.29 li
848.71 50.6016 li
849.398 48.71 li
cp
f
849.36 98.6279 mo
848.628 100.64 li
850.64 101.372 li
851.372 99.3604 li
849.36 98.6279 li
cp
849.289 98.4756 mo
851.524 99.2891 li
850.711 101.524 li
848.476 100.711 li
849.289 98.4756 li
cp
f
849.262 148.417 mo
848.417 150.738 li
850.738 151.583 li
851.583 149.262 li
849.262 148.417 li
cp
849.18 148.241 mo
851.759 149.18 li
850.82 151.759 li
848.241 150.82 li
849.18 148.241 li
cp
f
849.163 198.206 mo
848.206 200.837 li
850.837 201.794 li
851.794 199.163 li
849.163 198.206 li
cp
849.07 198.006 mo
851.994 199.07 li
850.93 201.994 li
848.006 200.93 li
849.07 198.006 li
cp
f
849.064 247.995 mo
847.994 250.935 li
850.936 252.005 li
852.006 249.065 li
849.064 247.995 li
cp
848.961 247.771 mo
852.229 248.961 li
851.039 252.229 li
847.771 251.039 li
848.961 247.771 li
cp
f
848.967 297.784 mo
847.783 301.034 li
851.033 302.216 li
852.217 298.966 li
848.967 297.784 li
cp
848.852 297.537 mo
852.463 298.852 li
851.148 302.463 li
847.537 301.148 li
848.852 297.537 li
cp
f
848.868 347.572 mo
847.572 351.132 li
851.132 352.428 li
852.428 348.868 li
848.868 347.572 li
cp
848.742 347.303 mo
852.697 348.742 li
851.258 352.697 li
847.303 351.258 li
848.742 347.303 li
cp
f
848.77 397.361 mo
847.361 401.23 li
851.23 402.639 li
852.639 398.77 li
848.77 397.361 li
cp
848.633 397.068 mo
852.932 398.633 li
851.367 402.932 li
847.068 401.367 li
848.633 397.068 li
cp
f
848.671 447.15 mo
847.15 451.329 li
851.329 452.85 li
852.85 448.671 li
848.671 447.15 li
cp
848.523 446.834 mo
853.166 448.523 li
851.477 453.166 li
846.834 451.477 li
848.523 446.834 li
cp
f
848.572 496.939 mo
846.939 501.428 li
851.428 503.061 li
853.061 498.572 li
848.572 496.939 li
cp
848.414 496.599 mo
853.401 498.414 li
851.586 503.401 li
846.599 501.586 li
848.414 496.599 li
cp
f
848.475 546.728 mo
846.728 551.525 li
851.525 553.272 li
853.272 548.475 li
848.475 546.728 li
cp
848.305 546.364 mo
853.636 548.305 li
851.695 553.636 li
846.364 551.695 li
848.305 546.364 li
cp
f
848.376 596.517 mo
846.517 601.624 li
851.624 603.483 li
853.483 598.376 li
848.376 596.517 li
cp
848.195 596.13 mo
853.87 598.195 li
851.805 603.87 li
846.13 601.805 li
848.195 596.13 li
cp
f
848.277 646.306 mo
846.306 651.723 li
851.723 653.694 li
853.694 648.277 li
848.277 646.306 li
cp
848.086 645.896 mo
854.104 648.086 li
851.914 654.104 li
845.896 651.914 li
848.086 645.896 li
cp
f
848.179 696.095 mo
846.095 701.821 li
851.821 703.905 li
853.905 698.179 li
848.179 696.095 li
cp
847.977 695.661 mo
854.339 697.977 li
852.023 704.339 li
845.661 702.023 li
847.977 695.661 li
cp
f
848.08 745.884 mo
845.884 751.92 li
851.92 754.116 li
854.116 748.08 li
848.08 745.884 li
cp
847.867 745.426 mo
854.574 747.867 li
852.133 754.574 li
845.426 752.133 li
847.867 745.426 li
cp
f
847.982 795.673 mo
845.673 802.018 li
852.018 804.327 li
854.327 797.982 li
847.982 795.673 li
cp
847.758 795.191 mo
854.809 797.758 li
852.242 804.809 li
845.191 802.242 li
847.758 795.191 li
cp
f
847.884 845.461 mo
845.461 852.116 li
852.116 854.539 li
854.539 847.884 li
847.884 845.461 li
cp
847.648 844.957 mo
855.043 847.648 li
852.352 855.043 li
844.957 852.352 li
847.648 844.957 li
cp
f
847.785 895.25 mo
845.25 902.215 li
852.215 904.75 li
854.75 897.785 li
847.785 895.25 li
cp
847.539 894.723 mo
855.277 897.539 li
852.461 905.277 li
844.723 902.461 li
847.539 894.723 li
cp
f
847.687 945.039 mo
845.039 952.313 li
852.313 954.961 li
854.961 947.687 li
847.687 945.039 li
cp
847.43 944.488 mo
855.512 947.43 li
852.57 955.512 li
844.488 952.57 li
847.43 944.488 li
cp
f
847.588 994.828 mo
844.828 1002.41 li
852.412 1005.17 li
855.172 997.588 li
847.588 994.828 li
cp
847.32 994.254 mo
855.746 997.32 li
852.68 1005.75 li
844.254 1002.68 li
847.32 994.254 li
cp
f
899.616 -.823242 mo
899.177 .383789 li
900.384 .823242 li
900.823 -.383789 li
899.616 -.823242 li
cp
899.573 -.914551 mo
900.915 -.426758 li
900.427 .914551 li
899.085 .426758 li
899.573 -.914551 li
cp
f
899.531 48.9937 mo
898.994 50.4692 li
900.469 51.0063 li
901.006 49.5308 li
899.531 48.9937 li
cp
899.479 48.8818 mo
901.118 49.4785 li
900.521 51.1182 li
898.882 50.5215 li
899.479 48.8818 li
cp
f
899.445 98.8105 mo
898.811 100.555 li
900.555 101.189 li
901.189 99.4453 li
899.445 98.8105 li
cp
899.384 98.6787 mo
901.321 99.3838 li
900.616 101.321 li
898.679 100.616 li
899.384 98.6787 li
cp
f
899.36 148.628 mo
898.628 150.64 li
900.64 151.372 li
901.372 149.36 li
899.36 148.628 li
cp
899.289 148.476 mo
901.524 149.289 li
900.711 151.524 li
898.476 150.711 li
899.289 148.476 li
cp
f
899.274 198.445 mo
898.445 200.725 li
900.726 201.555 li
901.555 199.275 li
899.274 198.445 li
cp
899.194 198.272 mo
901.728 199.194 li
900.806 201.728 li
898.272 200.806 li
899.194 198.272 li
cp
f
899.189 248.262 mo
898.262 250.811 li
900.811 251.738 li
901.738 249.189 li
899.189 248.262 li
cp
899.1 248.069 mo
901.932 249.1 li
900.9 251.931 li
898.068 250.9 li
899.1 248.069 li
cp
f
899.104 298.079 mo
898.079 300.896 li
900.896 301.921 li
901.921 299.104 li
899.104 298.079 li
cp
899.005 297.866 mo
902.135 299.005 li
900.995 302.134 li
897.865 300.995 li
899.005 297.866 li
cp
f
899.019 347.896 mo
897.896 350.981 li
900.981 352.104 li
902.104 349.019 li
899.019 347.896 li
cp
898.91 347.662 mo
902.338 348.91 li
901.09 352.338 li
897.662 351.09 li
898.91 347.662 li
cp
f
898.934 397.713 mo
897.713 401.066 li
901.066 402.287 li
902.287 398.934 li
898.934 397.713 li
cp
898.815 397.459 mo
902.541 398.815 li
901.185 402.541 li
897.459 401.185 li
898.815 397.459 li
cp
f
898.849 447.53 mo
897.53 451.151 li
901.151 452.47 li
902.47 448.849 li
898.849 447.53 li
cp
898.721 447.256 mo
902.744 448.721 li
901.279 452.744 li
897.256 451.279 li
898.721 447.256 li
cp
f
898.763 497.348 mo
897.348 501.237 li
901.237 502.652 li
902.652 498.763 li
898.763 497.348 li
cp
898.626 497.053 mo
902.947 498.626 li
901.374 502.947 li
897.053 501.374 li
898.626 497.053 li
cp
f
898.678 547.164 mo
897.164 551.322 li
901.322 552.836 li
902.836 548.678 li
898.678 547.164 li
cp
898.531 546.85 mo
903.15 548.53 li
901.469 553.15 li
896.85 551.47 li
898.531 546.85 li
cp
f
898.593 596.981 mo
896.981 601.407 li
901.407 603.019 li
903.019 598.593 li
898.593 596.981 li
cp
898.436 596.646 mo
903.354 598.436 li
901.564 603.354 li
896.646 601.564 li
898.436 596.646 li
cp
f
898.507 646.799 mo
896.799 651.493 li
901.493 653.201 li
903.201 648.507 li
898.507 646.799 li
cp
898.341 646.442 mo
903.558 648.341 li
901.659 653.558 li
896.442 651.659 li
898.341 646.442 li
cp
f
898.422 696.615 mo
896.615 701.578 li
901.578 703.385 li
903.385 698.422 li
898.422 696.615 li
cp
898.246 696.239 mo
903.761 698.246 li
901.754 703.761 li
896.239 701.754 li
898.246 696.239 li
cp
f
898.336 746.433 mo
896.433 751.664 li
901.664 753.567 li
903.567 748.336 li
898.336 746.433 li
cp
898.151 746.036 mo
903.964 748.151 li
901.849 753.964 li
896.036 751.849 li
898.151 746.036 li
cp
f
898.251 796.249 mo
896.25 801.749 li
901.749 803.751 li
903.75 798.251 li
898.251 796.249 li
cp
898.057 795.833 mo
904.167 798.057 li
901.943 804.167 li
895.833 801.943 li
898.057 795.833 li
cp
f
898.166 846.066 mo
896.066 851.834 li
901.834 853.934 li
903.934 848.166 li
898.166 846.066 li
cp
897.962 845.63 mo
904.37 847.962 li
902.038 854.37 li
895.63 852.038 li
897.962 845.63 li
cp
f
898.08 895.884 mo
895.884 901.92 li
901.92 904.116 li
904.116 898.08 li
898.08 895.884 li
cp
897.867 895.426 mo
904.574 897.867 li
902.133 904.574 li
895.426 902.133 li
897.867 895.426 li
cp
f
897.995 945.7 mo
895.7 952.005 li
902.005 954.3 li
904.3 947.995 li
897.995 945.7 li
cp
897.772 945.223 mo
904.777 947.772 li
902.228 954.777 li
895.223 952.228 li
897.772 945.223 li
cp
f
897.91 995.518 mo
895.518 1002.09 li
902.09 1004.48 li
904.482 997.91 li
897.91 995.518 li
cp
897.678 995.02 mo
904.98 997.678 li
902.322 1004.98 li
895.02 1002.32 li
897.678 995.02 li
cp
f
949.675 -.696777 mo
949.304 .324707 li
950.325 .696777 li
950.696 -.324707 li
949.675 -.696777 li
cp
949.639 -.773926 mo
950.774 -.36084 li
950.361 .773926 li
949.226 .36084 li
949.639 -.773926 li
cp
f
949.603 49.1484 mo
949.148 50.397 li
950.397 50.8516 li
950.852 49.603 li
949.603 49.1484 li
cp
949.559 49.0537 mo
950.946 49.5586 li
950.441 50.9463 li
949.054 50.4414 li
949.559 49.0537 li
cp
f
949.531 98.9937 mo
948.994 100.469 li
950.469 101.006 li
951.006 99.5308 li
949.531 98.9937 li
cp
949.479 98.8818 mo
951.118 99.4785 li
950.521 101.118 li
948.882 100.521 li
949.479 98.8818 li
cp
f
949.459 148.839 mo
948.839 150.542 li
950.541 151.161 li
951.161 149.458 li
949.459 148.839 li
cp
949.398 148.71 mo
951.29 149.398 li
950.602 151.29 li
948.71 150.602 li
949.398 148.71 li
cp
f
949.387 198.684 mo
948.685 200.614 li
950.613 201.316 li
951.315 199.386 li
949.387 198.684 li
cp
949.318 198.538 mo
951.462 199.318 li
950.682 201.462 li
948.538 200.682 li
949.318 198.538 li
cp
f
949.314 248.529 mo
948.529 250.686 li
950.686 251.471 li
951.471 249.314 li
949.314 248.529 li
cp
949.238 248.366 mo
951.634 249.238 li
950.762 251.634 li
948.366 250.762 li
949.238 248.366 li
cp
f
949.242 298.375 mo
948.375 300.758 li
950.758 301.625 li
951.625 299.242 li
949.242 298.375 li
cp
949.158 298.194 mo
951.806 299.158 li
950.842 301.806 li
948.194 300.842 li
949.158 298.194 li
cp
f
949.17 348.22 mo
948.22 350.83 li
950.83 351.78 li
951.78 349.17 li
949.17 348.22 li
cp
949.078 348.022 mo
951.979 349.078 li
950.922 351.978 li
948.021 350.922 li
949.078 348.022 li
cp
f
949.098 398.064 mo
948.064 400.902 li
950.902 401.936 li
951.936 399.098 li
949.098 398.064 li
cp
948.997 397.85 mo
952.15 398.997 li
951.003 402.15 li
947.85 401.003 li
948.997 397.85 li
cp
f
949.025 447.91 mo
947.91 450.975 li
950.975 452.09 li
952.09 449.025 li
949.025 447.91 li
cp
948.917 447.678 mo
952.322 448.917 li
951.083 452.322 li
947.678 451.083 li
948.917 447.678 li
cp
f
948.953 497.755 mo
947.755 501.047 li
951.047 502.245 li
952.245 498.953 li
948.953 497.755 li
cp
948.837 497.506 mo
952.494 498.837 li
951.163 502.494 li
947.506 501.163 li
948.837 497.506 li
cp
f
948.881 547.601 mo
947.601 551.119 li
951.119 552.399 li
952.399 548.881 li
948.881 547.601 li
cp
948.757 547.334 mo
952.666 548.757 li
951.243 552.666 li
947.334 551.243 li
948.757 547.334 li
cp
f
948.809 597.445 mo
947.445 601.191 li
951.191 602.555 li
952.555 598.809 li
948.809 597.445 li
cp
948.677 597.162 mo
952.838 598.677 li
951.323 602.838 li
947.162 601.323 li
948.677 597.162 li
cp
f
948.736 647.291 mo
947.291 651.264 li
951.264 652.709 li
952.709 648.736 li
948.736 647.291 li
cp
948.597 646.99 mo
953.01 648.597 li
951.403 653.01 li
946.99 651.403 li
948.597 646.99 li
cp
f
948.664 697.136 mo
947.136 701.336 li
951.336 702.864 li
952.864 698.664 li
948.664 697.136 li
cp
948.517 696.818 mo
953.182 698.517 li
951.483 703.182 li
946.818 701.483 li
948.517 696.818 li
cp
f
948.593 746.981 mo
946.981 751.407 li
951.407 753.019 li
953.019 748.593 li
948.593 746.981 li
cp
948.436 746.646 mo
953.354 748.436 li
951.564 753.354 li
946.646 751.564 li
948.436 746.646 li
cp
f
948.521 796.826 mo
946.826 801.479 li
951.479 803.174 li
953.174 798.521 li
948.521 796.826 li
cp
948.355 796.474 mo
953.526 798.355 li
951.645 803.526 li
946.474 801.645 li
948.355 796.474 li
cp
f
948.448 846.672 mo
946.672 851.552 li
951.552 853.328 li
953.328 848.448 li
948.448 846.672 li
cp
948.275 846.302 mo
953.698 848.275 li
951.725 853.698 li
946.302 851.725 li
948.275 846.302 li
cp
f
948.376 896.517 mo
946.517 901.624 li
951.624 903.483 li
953.483 898.376 li
948.376 896.517 li
cp
948.195 896.13 mo
953.87 898.195 li
951.805 903.87 li
946.13 901.805 li
948.195 896.13 li
cp
f
948.304 946.362 mo
946.362 951.696 li
951.696 953.638 li
953.638 948.304 li
948.304 946.362 li
cp
948.115 945.958 mo
954.042 948.115 li
951.885 954.042 li
945.958 951.885 li
948.115 945.958 li
cp
f
948.231 996.207 mo
946.207 1001.77 li
951.769 1003.79 li
953.793 998.231 li
948.231 996.207 li
cp
948.035 995.786 mo
954.214 998.035 li
951.965 1004.21 li
945.786 1001.96 li
948.035 995.786 li
cp
f
999.734 -.569824 mo
999.43 .265625 li
1000.27 .569824 li
1000.57 -.265625 li
999.734 -.569824 li
cp
999.705 -.633301 mo
1000.63 -.29541 li
1000.29 .633301 li
999.367 .29541 li
999.705 -.633301 li
cp
f
999.675 49.3032 mo
999.304 50.3247 li
1000.33 50.6968 li
1000.7 49.6753 li
999.675 49.3032 li
cp
999.639 49.2261 mo
1000.77 49.6392 li
1000.36 50.7739 li
999.226 50.3608 li
999.639 49.2261 li
cp
f
999.616 99.1768 mo
999.177 100.384 li
1000.38 100.823 li
1000.82 99.6162 li
999.616 99.1768 li
cp
999.573 99.0854 mo
1000.92 99.5732 li
1000.43 100.915 li
999.085 100.427 li
999.573 99.0854 li
cp
f
999.557 149.05 mo
999.05 150.443 li
1000.44 150.95 li
1000.95 149.557 li
999.557 149.05 li
cp
999.508 148.944 mo
1001.06 149.508 li
1000.49 151.056 li
998.944 150.492 li
999.508 148.944 li
cp
f
999.498 198.923 mo
998.924 200.502 li
1000.5 201.077 li
1001.08 199.498 li
999.498 198.923 li
cp
999.442 198.804 mo
1001.2 199.442 li
1000.56 201.196 li
998.804 200.558 li
999.442 198.804 li
cp
f
999.438 248.797 mo
998.797 250.561 li
1000.56 251.203 li
1001.2 249.439 li
999.438 248.797 li
cp
999.377 248.663 mo
1001.34 249.376 li
1000.62 251.337 li
998.663 250.624 li
999.377 248.663 li
cp
f
999.38 298.67 mo
998.67 300.62 li
1000.62 301.33 li
1001.33 299.38 li
999.38 298.67 li
cp
999.311 298.522 mo
1001.48 299.311 li
1000.69 301.478 li
998.522 300.689 li
999.311 298.522 li
cp
f
999.32 348.543 mo
998.543 350.679 li
1000.68 351.457 li
1001.46 349.321 li
999.32 348.543 li
cp
999.245 348.382 mo
1001.62 349.245 li
1000.75 351.618 li
998.382 350.755 li
999.245 348.382 li
cp
f
999.262 398.417 mo
998.417 400.738 li
1000.74 401.583 li
1001.58 399.262 li
999.262 398.417 li
cp
999.18 398.241 mo
1001.76 399.18 li
1000.82 401.759 li
998.241 400.82 li
999.18 398.241 li
cp
f
999.203 448.29 mo
998.29 450.797 li
1000.8 451.71 li
1001.71 449.203 li
999.203 448.29 li
cp
999.114 448.101 mo
1001.9 449.114 li
1000.89 451.899 li
998.1 450.886 li
999.114 448.101 li
cp
f
999.144 498.163 mo
998.163 500.856 li
1000.86 501.837 li
1001.84 499.144 li
999.144 498.163 li
cp
999.049 497.959 mo
1002.04 499.049 li
1000.95 502.041 li
997.959 500.951 li
999.049 497.959 li
cp
f
999.085 548.037 mo
998.037 550.915 li
1000.92 551.963 li
1001.96 549.085 li
999.085 548.037 li
cp
998.982 547.818 mo
1002.18 548.982 li
1001.02 552.182 li
997.818 551.018 li
998.982 547.818 li
cp
f
999.025 597.91 mo
997.91 600.975 li
1000.97 602.09 li
1002.09 599.025 li
999.025 597.91 li
cp
998.917 597.678 mo
1002.32 598.917 li
1001.08 602.322 li
997.678 601.083 li
998.917 597.678 li
cp
f
998.967 647.783 mo
997.783 651.033 li
1001.03 652.217 li
1002.22 648.967 li
998.967 647.783 li
cp
998.852 647.537 mo
1002.46 648.852 li
1001.15 652.463 li
997.537 651.148 li
998.852 647.537 li
cp
f
998.907 697.657 mo
997.657 701.093 li
1001.09 702.343 li
1002.34 698.907 li
998.907 697.657 li
cp
998.786 697.396 mo
1002.6 698.786 li
1001.21 702.604 li
997.396 701.214 li
998.786 697.396 li
cp
f
998.849 747.53 mo
997.53 751.151 li
1001.15 752.47 li
1002.47 748.849 li
998.849 747.53 li
cp
998.721 747.256 mo
1002.74 748.721 li
1001.28 752.744 li
997.256 751.279 li
998.721 747.256 li
cp
f
998.789 797.403 mo
997.403 801.211 li
1001.21 802.597 li
1002.6 798.789 li
998.789 797.403 li
cp
998.654 797.115 mo
1002.88 798.654 li
1001.35 802.885 li
997.115 801.346 li
998.654 797.115 li
cp
f
998.73 847.276 mo
997.277 851.27 li
1001.27 852.724 li
1002.72 848.73 li
998.73 847.276 li
cp
998.589 846.975 mo
1003.03 848.589 li
1001.41 853.025 li
996.975 851.411 li
998.589 846.975 li
cp
f
998.671 897.15 mo
997.15 901.329 li
1001.33 902.85 li
1002.85 898.671 li
998.671 897.15 li
cp
998.523 896.834 mo
1003.17 898.523 li
1001.48 903.166 li
996.834 901.477 li
998.523 896.834 li
cp
f
998.612 947.023 mo
997.023 951.388 li
1001.39 952.977 li
1002.98 948.612 li
998.612 947.023 li
cp
998.458 946.692 mo
1003.31 948.458 li
1001.54 953.308 li
996.692 951.542 li
998.458 946.692 li
cp
f
998.553 996.896 mo
996.896 1001.45 li
1001.45 1003.1 li
1003.1 998.553 li
998.553 996.896 li
cp
998.393 996.552 mo
1003.45 998.393 li
1001.61 1003.45 li
996.552 1001.61 li
998.393 996.552 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Zydd) ()
%%Title: (bw_shape_733.eps)
%%CreationDate: 9/26/2016 5:04 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6CQg'bE@&,eBu^0lc,R6tcDZWjISc[++=5<<Ot_KP3%N*Ye_LD%`-V&V<J,sRrVCMpLl@;:mV8o#gf2u7+qT#E__^W8PF`BF
%If0-)-_EQ7]74mCs6XG0J,/p)6>'*o;XTcK32IUEr1fn^jR7#9GPs@ijt?Ht9E.T+j52k%HCXuR_s;MjfD!Tu5!HWnIX:kgiV)7#
%l0"tjJ%3'SrVGe`lFAtSn*A`_LHhCp]=iOh-Q;U@YPd"e]Xb`Tjhp-7eak4p.fReDc%H&c7&.g'gAH6oqH%n5d9"rGcZDZf)lN_s
%GCT?iInBL$s7t`JIWtbXc-u:Eeaq&'rP/7EVgeKC+JuobIX<@]AF/J,:&fT-SYn-D^U\Z7q^g>]9kR>pq55U-p`HEk^;VHq4=\^3
%$kHG$+"dMgp-JZ?6KA*De!;Smc,lQI>j'9`^VD^cS.O2lH0R;!J6lI\T7"L7M/VnXf6;.OYF_rnGI-q:g)TC-lRDJNbKm3PGJsN5
%f(AEu%KE.^BDPK/^V@>Yo?U3^Isq"PqQ]sAT0>GgFn9PD)el,_s/U8>mbR:'iud]-T':#Gr)o==rmq[!Y&ES&ahTQJYP>$^r[Rnk
%3TKj8O5F8.'+c7'hr/q^3PhllrT;qlq<E`NTM1]1r:]ONrU1j-JT(4uX*dO]o+,EM.>Mjt6*>aHVXE[rX%$Luj/Za?'YYjFrV#dD
%gRJ)4f3=/?s4u_[RgG##S<Ef.DuVS8s3((bjY#e9IX]#FYICXYf:W)S6aaN'oiJZg0CI_Frc!Xrrs=IQ&YAFtlF.;]QJUkVqoH^f
%\)kro&&/%f!tDcNLZ'?TkVpqV^Ad]s*HhA;j28L<^UjI-iQ"1ZjO6$uYHCZC>E@A`l2Bl2'0`5lIY7Z,?JW9mkmQP9l(J?-1*E4g
%ir8i@gP<8/iV(CDrL;8#?9Q%$(unu[?JSsOT"(QK52U``4]h7l:=c>h50>GTaD\7h5P$!]B=Pkb:?]8Qk#24EV`m5koCD&9gK4DI
%#@rE,g?J?m=0Lj9_X[$\48)efO-eIJ\UO):YF`KRDgHj3k,I1@*"Lk]I/#F?q:-""Y9%S"T'i&`rfbq4W:(KMJ%YgK^"hc1];P*m
%^OLL<S\A;gTla#=H$ko4]=CHoH0k[_\R4Bh?esSqI/A0]p:HgGC\Cj+gP+K?p7kIVR_SO'/'bc\`KhbBFI`c5?bEqC8+Sm8ie-EA
%p#iC=fAD_2HM)OUG]Wi#Z\Y7JS""bNeXjL$GOp2FrE^"YD_WP"IJ)FH>C;AcJ(^AQg%A_$/#%Ls>[4r:Elc[a(]3e7\(C9/q:YeZ
%J,&Uu+.[jUGP4gDNq=th4oO_+=*N8o^S,__\tRfsFZW0cIZ&^K1SR*?iKN0H^Fl9_R+,AqQp\17:rX?b+-d>=%/](_(f7+jJ,B=;
%s-$Xd8tZ'MhVG):TDn(^eEP5=WKYQs2;Z]^aP5WkJ,H(jcfe-Oi'3.6MXHOOq:k`9lBYbtfCER%q<I#/H^o<N2t4k;_`'ML8ABOH
%s8-WDRs*&kmRK=%dFf&:r0-6,s-K,"8ijrc_pn]`5:9t$Vsh5a\`l/Kr8R"0&FksfIo\c6DK'jl)ILh@it(7(5Q:NW)k&UtVu(C.
%TD[g=p7>$hTVq8Kk1.*,CO-`p%A3R_j5\[eB)[Fcd[g./]:7P6O4X-f/9C[@YNW$%h>#Un&+B\VrQ5(bs7H!Y=-$.,9+U2eFG9U1
%kN@;DFo/>4N/jh1S9Rh*Fucb]c-uU[^\h/Us)<Jd1#LFH_s9Nm^\Oh3WLirF]D)J8h=/9eJ'9!+R%_L:DtpO3Ld/72rBCo/s8FZ?
%J+u\4\?FoSlIG:p7m._3o1T+5%YVUR.K',@O*:skG9;@Uht`^A:ChY2E.@ne&H2FR($8_FLXL8=nOVKq\`'*bIGN45^7`+(kGpQ6
%Mu<n99`B7nb^Xt<VHk;:!-DksE7kLtpcmF3k%88lX+0oVY<RMaGl-13?iKi8lR6nTA4UPG"0h1D%p8T<)brWph=]=cl'&SXDsE6]
%SUU8MXl<*Jgg*)AC&56uZ_t8Ccf9:P[l<u:NRar>H$aU85',h\f+5?OdoZ&'Y>1_(H[[sQmcoWEGrPbH4^+]XYWgV+l1Cm#RL;6j
%HTlj.bJ+RYHh6l[S_DOCm*Y;\d!0^t]qr^)j6>gjmbKHJ*sP^(PcMjf<tAAnDbdL@d5q%rS3STcqkpo)"JaR5d!a`_+a`VFnA^mg
%?>CoUGPCO#ci*S-\mb9NP98PD.<oe0qbPc@4hQ#WIh+3(4PbW"QI^6Pe@IX8r9F:YX/E.uY=m2jatFj?T<99N^HVVqqCg1-rkEc%
%F*mNV_t6kCK62-<nF1Vgl$RXRm5o+cIeiKA+m"o;qXsNNRs0(SC#f(t\qakA:>&PmPjmKkT=X9Tp8U;9q"&u`rUa@tZG\]!l]`Pn
%c%c/ih=Fi;o*^1sJ?.-Xm>gBr\@oGf5!@BHo9#s!3r.`1mEPKa%[Z65]!($fTDn,Bmr!(0QgbO;O&(So4BLJ<eF(*+VT"l"f>"rn
%p:KKpr8i4pB-0,/I/V=fh#>;\GN2c3fKG@4\XMrS4P[NC/"Z;"YAkp3IJQ1b]QsKo"b6L&pU2:9iVVr][oe2G]eJI=mEJj]%PXOM
%$U"aP,.:L,W"-?9Qq)nI`V7$=I<p$YHZf@7H<nlVq>0(?c1RP@07NcND]YM5rTsuh58DM*ltqc,9qCdgs6KOOIX%fikEc_RcbH+/
%J%`fc?7ifCIJW'7hlM3/@qNmlI.@(e#)>emro3qM6g(Z/eAHVch$s%0mTs26OiOCaBi?BB\Z]qCQL;HaM<BZGCX2rReikZ,m8mYB
%Zj/<5HDc24CWqp$(Eak".3LhQeNL"dioe,+k64YrS)\3FpUB6ms(_83X7r1YqoO9)adpU8ns02J@P"G'ArtN[\\B/WNK8(g^\IB#
%^Z+"bfe7bZ@e1hZ00/ji05Q*oHbM3pkp*sK@dsR",bOKH-AQZR\S$E_n9!,#V3cSFoNhK5>#kOf?QWT[^84mUc!.n&DesD7/q%kh
%qnd&CJ%Bq&MZ1se%F=fohW$Kl3D\8:`Q&ciV)^s,1uA8!e4I\fo@MJHh<M=?3:KB:c\GR-(S(!VIcM;.gV.%,;uAN)CndOdXPDse
%oBkWYZ,LqA^8H+c35(j6XXu_Umb9[Ea;)5bpq(eJk!c>V4YWG;p7&dEqcM/@^iaWp\SdsJP&DdjM"/DJG;&BOhg=($rH(<<n#RHr
%N%]*`>4QZG5!Q].q$uN9a6rdG\5,-\e\h"N'n&EI,(K4Ho]h4\(QUCsH@-790`HO`1mcg=4aq&45O7F79T2,^o?GbWbNF:4T""LN
%q(uDK^#0X^>X.%lHf)T@c%hn`=,?+SA<Y>epu^^^S>!$rO/H&<cZa7&o7"_:s#lZto'PH`*lSpjH2V\X5Pm5Pg`QASE,'`"]L![l
%LJE;GF8><MK@I1%.V&.qDs0plh8A9feOf^d:?*/>bh<CBpqkopIMdXtUq-T,eU()=H@9p_h5n;7iqG,(V,+;PhS0!J"7A`UH@>hc
%5qLJVca6C5G9#K2=4.V&HhI(W^5d6nL]2h5hqn=ro(jDSF!#MA3:."ckmmi_:D7s.4W#8#QOs1Eo/o0&Qc?3i3h/ha*n.(((TlRE
%rAcP24g,qLhS+(AAir$E>(>eLa"EhYicVNPn`oE0ksI\noOj7)I/+4-48ZSg]3[P/J'WfBSpknVpnt%K:-R\(mX=j#ao.d34\+Db
%5@;.8IDPg&8T,]cH+<mIlbe!Dmp<D7d]WOP:\<h!J,Q'T/=l@s"r"W[rTI%DpXe;/@2ItAB47N09:;[o0SC,(eT:bB[9F)e=7$N'
%pN(H9ds&kW^&HBfKsRqSZ0-(%pG[LBX7h:sigT?9bM159:5)\`f;6q;+30?mhEY:,p"RHbml@Yc*kNGs[GQ-g;>.b230dfp+203_
%V68r2d.a(+nFlO14:\"RoV%nLcZo'Lj&X[I^_^T*Zt=X\Lc5O1p<C5Hf,k'PS5e)0%5@*l`og[ahmX06#>TVc`UN`,T1+2!LWckR
%:]G\<MO+7KG^OT/k>/hga5;@AcTaR@Dr.rY];'XW5PnZS:sqp;A)5pi#\@gDp'G*`rU@W0fQ?8no62i?Kk8-3p.2jg8sl_-5/M<c
%c<p7-1\:(,Y.o4+r>?*sQdVMWOo8b#hcK?sIf#HjJ%<;lo(qmGlZVE,K3^C'rpK=A%;)c5j=EC\+5C@m;.o7L+QjE531@&g28>ID
%cMZ3/P@5PQ[=3Ui1D$fCnFZEhYu=Wq.)2JmS7JpdqaBJiqH*E.D:7etI<G5]ori(0IIm1+qU8mIj/(3g]tOC0)S6g1:&OD$(.ac(
%3$b7BV1+OocTD3L0@V",+m+tHl"%H)"-67(YC?DE:\a:?rorZpceC0rDeo.kJ,%P1Vk9UBm'#Yi!M]]<iX]l6(H;1J&eI&:nrJ;"
%nW2Q*pd]i/OP0XhM/rXq/;cK6H=&E5;iFJ$rpBuA<GE]fHiLf:Y'F\chU+F+(b"^7*S^sq:r!%uk33\kf,pP?YScsj"8]e3MuEQh
%rYqj0Mm)%0'_E!1Y<RNL`nU'j++AA,p>L#FF"EAE"p+"Ms7lUY."B3gEqSkr40[k]\GH3ec0>9)iQZkWLZH_Qe*C;paFE&&Jj8ci
%r"43mNkT+#j%#p#(H*])s.&M+r1f8_H90Zq_A,5Cdha+5!T1QYM<tAL?Sh)C$a#^ZM]VZnHfPS48)N3J5Q27CDteW6q>^KoY'uFu
%dAa2UP6/De&WL1(6mMMD*P.K[#*dM(A,4)NkbtaBQ(k2VR#LpWd)"1RU8C^<3r'ga]VOY,_LKqOT5ce!8g0u$]OF[NDghJVoI7@g
%l?/FB7OM8q7LifP)jf:Op`P94WJq5Gdi\n*1H'A^[4>>Wn*fqon`=-SK7:Kr2,>(co"8^4/lBh7$2++=s)hZGi"HS3+=R$2T,@Se
%`m_5R2g53=.<%KH5T`*P4Ne&rT7>Sj$6BNmjkNG7ouU.A4t1pY-d26lKBX3PWE9U%&M?ef<6?!S"F$9MZVAG3GK#WfRBWZCF:2!:
%$qr]TpNb<WLg$:YQQB[U9gPnH"'>o1>,&(g6.5;O\PTQtjT'MGVTu5c[m_nIZP29:3H1`Kd2W\-fosAl"*mM.)fgoGRQe.->qr-[
%:8^Y.Nk6f^H!hmNakc,[]-D?knsXob8\Q>!aT3r\lmCfa!Nm?9Y$U#-!Uc%DSQG2rN*N\*jQaSEOu#YsB[AU>%)C9/9<VTC](XQ`
%+6ZWNh=^F\(#Z%(F:2?d%#d5=pNb<W*4k8FG/th>j_P#O+2CWq7G'l^Au<>OJsHpdDr&riHQ*(<mKTnJYK\ud_p&h<AT78O%Pc?N
%e5]jkkXmJSVbXfRI&s5iE.F^)c+fBFoA7lm8\36KG"9>Ol`$)p*-3Naol:%"+o$4TZianD7_/)`Ploe_m$u[DDN%c.(Y"naS(5YC
%Q&^T&HO>L6mE/MGd]5MmJnA5<&WX5`%g="O:(Oq]#!*\J3!HmjIj>rVFV"*;8Eg&8BTJ5=+.n8CN=kH"K@%/9eMK]Ug_A<H0$"^R
%<&<0];WDSh:OS9I0=[\(Uq>WO#C<J7-4GlW8*&gj'(s[7hl>=jb6OX:Wj6adJ<7qZ*YX'cD*ootGYB2Gh-O49h&*\20?CPRD`&us
%"%&@;S_bibC=5FRTW;ad9$;+`7Q2nFkjl+1CEqX:QQu[HNnnf$@<W2e_L@.aK,oP),Db-0SS5TMnq#EF+/gssc#)5VRlR\*g_dG=
%2lIbpXeR>]i>,`p(A]Xl9/RL7HLd6E`02Df3:-fU%h/=8N_i+!'t"n]/U\PKrIos]&[aeaZCfXC8\-Of&e=,(Eo$@ngP/orE0q[0
%<:<97J3Ls=(T,KYFuP.ng'`#Yi,Cj(D@a2ZF0`FC/A6F2K.aiP1L\b[.bq#3no:u2lEl^lr\Q&Ak\+PrF.TgYkB9AZArVRrgbIC[
%'tJ!>Ek!U\Bg\0s*'*i#*Pf0RRslG6F'c2`0l$;t:cgYl?un<_&e&!G-_&2Fq(uO2&5#]`2cq#.Bh`1G0AKRtb(D6'D1+ceDf:Y9
%Cr4W[b*!DJes*4t_r_'ES$7?f6=Qb0Q,St1`,\:m&b(A59is>;+`k8"#8P`p&F0Qc95BI'!S1Um\5$i(jf050knTb'7:Qe;]]M7h
%-'mIMXif/L@&mua/WQnZVq52E_X7\86Dc%FCfMt6>(SsZcj4[D'oE,uC0GZD+mWU**[a"A]:`4jL%etnCV]?b%-@d2Rj.h%a$ZqL
%3M&or&'Yio!EV$(6`VFj`PE*o<VBr/1u'[=2)<P*45<VOYgMlpf]52<d\8tVYVAG0%Pen/[!qM.Dq?CfNQH^R;.I0<3m_tuJIK*2
%^!Ect%G]c-_8>,E1X29s[htkd3nF8LdaV.GI4.lt1BD[[C?$!3UI@5P"cS?&0%8!S0p(<eY1?9DYgMkY\E&GJ3Gh-D3;?`V&+F>S
%!A#POp=u_h(io,sWH'Za1>i8i+e(Nrg>*[Z]*X:I\^NF)hI;7ENPWHYYH8Ih/TfW&QGA=lP4i`MB':Fl+omD1.s?1\ggbAA2)a//
%Z0UUYlBR1V?1Hcb@fb`"S#.N=HX*n8P'MnI@Dg;85>=g`2ReG.DB`P0mW&c]q9@l1\&a?SQN""/`@O_4'?s%T8Mt^T!)$t(J<#Lf
%LEYfU[B!rbD2gMd&$0E8]m=HWo@DHul^;ChDZN"J$S:X^%G'><a5Z#e#n)NX*X$JPM7dG6BI0ir@lfa)SX_%cQ(97Q-JF2V!a.5>
%K\:!Z`M:[<C<?3b(JckC?kup3)e]BY-_4E^/NNIa&cTAK\kZPqid:aXY?Me0?ug%qmNs3F#3Y9!p4lk.7Ej6@a^Sso.U]NEM)7ZG
%^!G/o8WbBBdO08K1.p<Xi=.,(]K/\4aT^EqUC)7(irFNhW[V9?"50LE^J1Ci&'4:i&_;/mcK*UX40uIT@!<7n97qli0ndGifI4rA
%$a&Y&&oC";Z%5(rWo#h`EcBtk0f?4e2?lgH@N+/ceB[HAYiQjl$]TObb)[YUWGDiNaj3mr3!\T_3U3ae$$lngqTJ+5F\@j"Z+Dl:
%G7tJ0K<l$?`ksCDU?oR"+QX`re/>IOi$,1MT2s.llNQK;\u*d"*.SPP;X!jh8%Wj/`_.%S$,B5+2sa"N**Z=T]5"dYPT=o4gotQl
%%"*i`F]Y-gh&<o;$&[i\mj>0bd8j]:[ceMdbihqbPaMT.$`mn\(3_Pi1uZiL`%3Y2k"gu%J`(`lpNb<W%(k#i&=3Bl/)$Gs@uMB]
%;_5!%Y0$uWMO@9sG'&fJAr<S!<*S#2(qXB%iN]n'MhT%p/CJJ(0b4H&.d<C&9?<rTVe.QIf4Mm]_sA/O/afd_jal?7\Mj7hfH$)i
%[?.t9WltY9^2UkuZ'=!#dDdJbY1s2l4[*8RR+CY^1RhU$Frqm5\6t2JBFgI&7DEu^G]9]GZ<7@=Lo&O_*]u"AXpCa>Y[u+GCT4GU
%a[#@-\GNpRG=4$bTIfge>;n7OT>:OZ9kuJp.NdTKXAF'mGK:$!6T0'n[C\;<pCS[/9<))fa3-uGpTmUq1Sp#\3[N.19`eCp@bb8H
%cUio9<&*eV]Qb;"MALK/=7)%#c(HJR5^u=nTZ[S&4K_;j+W#""`N7H#E;:UpbBD0H2ReG.52p'l8Jk)\*\Jmmi8lii9ke1&Bi`ko
%X%X'o(3`j4\tg@Q\%'&eQ3W$)`SK]W]5uWQl:KG5'YW(Nioooi`rRa1e4jQN!*?"`??,UZLO=V6A5hYk]3Ach+$m3B65u\LNjc?'
%&?g4M^^@X?:MHV&7EoAF(-C'&ecr!oEMn=5a=pH+>!-u83Pnf^D>K$a4TN'C!8>>bqhM"2=JgSP(3[0Am68BuEJ7%t%Mpam=056N
%1Zus/bI53P(02krk)s_.>nJBb4EJWS>Mp-*+Lkt;I9s<C68oc.S?H=B\LJX$*.U\ZA"Ge8++R!r@p?5V3<5D)9q>AQD@PEM7*ad!
%REW7["X:0h?sI<lQaSc9V9)u8M'D.egg.2NU=W'cj)2\+P(=a,EVFb/mMri>$6OioAO9,'`I&L-YZ(uPaV0:/d)i#!c</6jmVjYS
%['7/"G4uS:Mb?Y[62,Vn\X$X%*0[UiYFIui!ZcPD&@T*\U.F#YR,"NDAL.t4P:%.O+rGNr=7)%#FU$&.o#b*2cp\msHn49S;(hrd
%*V/kQ9u'1:GNW.TYgMUaYh_hI/2$0tcKF6TjLS!TI6'Bh,uK1)"<mqg!C/$-mV+\R'OAQfCo1/4nnpQ$F>E-aT8n(bf[BV'1\HYQ
%+!nr3R:j>kT?K\b4Y(W9R8;s]9jsj\$J]h:b/hs%W6DA]NSJqMcf1*ck+fA?>Fo7VQJU^GJXMbGPZ,u`?B`".]GK=>7,aEK`%pU1
%;[A;k,5GBbHb??8j6c6ZOc-e@aYF1H^sZM6"q4iRqmKABG#^^+\L\Lhr+ng9.e[^Rh;_enh&*bI2pnso>Sba"TpnB)9EJ.P>_^0u
%YfB#eU2JFFV!0ugQfU[hZW[Qb'LpmlFQ[g;kZZ0Z1JRUL98!q"kod=/cr^]u<BdYJlF!ZK>.Okud!UVWYp1$-[ta<g@V@"2/CGL,
%E,.9UD%d*^L^U?STu&<a=D$>mGGAUoBGjV6Z.1u_PXH`A1[[E0=ri_EXA6tEo;^ADilWD#1!@dq1d*L>@(6D4>liAhJ`bX:BkD2H
%]P;Y+jR+@J[c!RQFLX)6fKPspm`AS"%ChkhW+_d\NUY/>9._FQdc-4i7DRl"JZb,d@#):U>.A$c`,<"A0HZ6@`cpMfTE@M%W[ih4
%II#qo4L6IN:!XRq&>E$1dFusO41DgZG'=Ti)gQ&<W5Fm'69Yf$$RphA-Aj6K'Wpl7=pBu+VGh#c=fRkk5R8%;K"l,93J5:2B#.h!
%ccY=U>cGY\gs!?\k70AD!@Np1'MXrMg[RI82@j+"ek`Q`\_XAB]:8TK82;FAEk"_!jK8o3!l35Va\Si]5A-Bsf!bBgD'+lS!8MO3
%`@[.'?Yn,BL"-dGm#1P\a&g$XB7@JhGWkZgomNKGmt6>MXc^5b&DG2b1X7"YU&YgYKd+EG:mD$X:`i8R?.:k<Xdfn-TLl&sf#]T[
%l0r,=#1%+GW(e[2#P%s(H/05-o)YA)d*oWqF-/Op!S;`[jlHL2!LorhairnuJDErXCo!S(*tMF>!BUJkSm(3O\<?<TOMaDh5[9un
%ZYBulU+[;VCQTK%(r9O2d1]u%2Wolb`WMdR/0/4=@eg$$`4gpBORYSJ+rA2H%C'.Z&)fRI6bD:#k15@E9t5$#S@O^la$<.><BJ7V
%YRE06O>V%Yc<3gmFG9*\+..,HRd[XM%_t(L;ftYrg)XVf*52A*OPba$gUlIL/Tt[@3HNJ@_"F;UrtisQpURp@GT\tYhM2EKF1YXd
%G;h7_O`TZK4rhDj<*j(uq3%cK-"G8fe<M\THbQ;XI*'n0,o:_pljBpNoR'57q3%`?9BsZdbWT<2<PE#1q2u,t>@Vk9;6uC+G!NcP
%"9m4.7uKrq^^t7-#:5OD`HPT1oo!&rG[K6]cVW44A!h(5r8D=m7k?G8D;n<_9,9,tiHC+&N0:(A=$[dlF/hVa&<p*Ugk_NmRa$i.
%lLkf:djpktp1TtOW$Nkrgar#d"fsO\NCGm>/S1b*\q'7g]aPW+UHf6'BeTpa1Vglp)TSC<Hh$DM$][-h`"5;L+Lc@,QqGX+[`-V5
%Xg+GgRa%r8]8tm;?>>T+kDki`%e20Kj2>nNFcbi6MD-Cs7-CVVEC+*gJEXtcN"m_8=?Wa)EL&Kf`-MNj0J)pgYCP^mXLMC-3N+MN
%Tg4?1Fep3*D_-,F+<rDN?>a@pCUidW,,SEEaJ(oS9GYcVLc9n_V5jMsJ.>?5PdSk;.%r"bb&UK("22@)O0udQ_WHC#Um5Q_Qh,pi
%&=p2E-e#&*+98?RK2C]9]aH4TaR%kH/K&DC%G?.4_Xr]g=n:fjH+))e8i.M%XH6//XAr+#aLJ]E2J?TgfYtN-Z94"E_fR'k/o8fU
%96ea9Br5@%-jB1(_uMSrl00'_KtipJiJc`06=p@<NU<7fCi0^8IDito;L_C%&<96%TjKl*@Kk2H9kDe1(>D,f&cITP7>h6A#_R\!
%`k;eH+JZaP16k;?YW4sLn8,[KU`j)haD]C\m[fR71n!cG>1hUKZMOoXknQK>H@h29Ns1N)FhKQDbYpeYl58d$'Jf).F3#>(/^-g?
%@jT8G&BMBU]Ol4M/1mbNe%Dd5AKi(h%JH/H[X!"5H_+9ikJg%3gbH6Y?F.1"@eUH8djmaq3iSlGP;]C%dn/a\"[1<`kVWB(h$N:&
%rB/p#k:LK[O;4$Be#DLfnN>Wak;DWhh.c%0krdEdk:LLf%G?/__"<Kkf`AMPYX'"(AnIBNV4LO\Qem@lL%f^@9EiXJl.++-1%&VW
%,T-cS(\aNQCsF.rJ;94HLg;!6\.dqE)eNQE7)r=Dg)u<]=@On@Lg)Z(&:J86CWPogntfF;a)!qE)&c%hASBU;J$hm!q0\TD,pV\]
%Q(`^H*XYM^>,/Rn^1N<:L0*Ia/8YlYojjC<>oG$&mKE@@L)K1/jsr;Pe&5.dmR7X"[rH&pA<e_tD@P6HKY-l6n<d;NBULTfV$]Yr
%Ues[u<l"!VC<AZV/<XI)T7j'YWeAAYDN%^f=l-#-,%V.O"(3!e(91rR12'A0[_2R-RT&CX7BOm>(DO`!BNs>Ce]k)>D/Kbb^Rq1N
%JfJqn3?0SYR."V2,Wt3T?NH?%'fCl0"C`sh]g.=SIQ)fl"!/TmEAbKmg70<%8RI1cj]!cM>T)qMAl>^WZ;0*rL&#!AJfZ7R>J;u'
%F'c2`2.H:noic=OF?Ef+!>KRFOLK<aCG-51'WnOR\Dl@s+Q^6i_RPpUX(;ui>hj[4ZT1;%.5"bAUu'Li+J7@33p*b`c\Tp$1)m<\
%5/Pc:D:'>uYG+0)F.6B$G!D+mOURP75?ckF/7G4KBp`Dg;MD2AJQPab9U,km+=)9\rb@$+Gk7\6/;R]=$A:$J%Zh,;e1l![_3Lg:
%Jh3iV+G!ZqEl6hcd5L(9D&'u6`.BpX\>EB%qCF18%G:Wt]`n\.cINtpPe_n.i5.a1.2Ehq-i[c!-7^\/\e:_`42dF.q8L#U=<jS/
%=1g/>7[jKf1[<hLX(?mL:b@P<"NZG9<S%TSE9_,CI_%+F$hPuI4.dY9OAfhSS_Mp<ZMTK*N<Cs3jc;kGNtD0u_UL>@)iqCpMP+&%
%%C%a$(%t_1_KZKOU(X>$"74h&%'[_LlJA@=8$.,.?!Y&0?$^Ym\p+,]Rp,u<5>eVHpSD.Xg709Veo`1$\R[0pQ.N)n<\q%dFjHK2
%KGa,-BVdEqS?J7?4k^jjaq]flH0L=lX&tlp#JsOmF9H6:2D5'Rjt+/o%`eok<K7jg[`7Q\@U157bKq6oB^76H<-^Q^QM#q@m]dX;
%RI!@jT`Wb)SPRlEW1+"5aV[uFE[>^:Zo7tBH#.YT3\I`KXN3)\TMJg/0]b3Kkb1rloiru/(0P,)]JR&S8G<eR)Auj>kbFFBNeKY&
%)(m[I<`k'=#kh5-)MURMKXb)p)M68OPXKJr)LHI4F,&12+2#rqaFseubU%q1`\\*XP'GqZ@i>EO4:8RKfS^-,>=3QudB/P`F[/i6
%<E\B^QW/38<O`XjP:"@QKc@knWe-0G<Oi^$<XE8EF+>gB/AcnB#328!BU2oA,LEGA<oq>ZCmuR-79+6dV!TZ&\?NM$AG6bp)YmVC
%e8Bs'(5`j4kZ5!cF8uTO5nq7:X+;*2,*PF;9:#fB<51,E<PN8P`.cGWZ:<fTT"3>GZ7TICZpF!*VO%6Sd`)I(F&`?Kg)tOCSb&;p
%N?K6a'&QlT%b!p@L5"KMNP^HkXtm4qo`Dfp<p$]qeomi^)<"]nWhp'Q(Ik[`="&1t(H,oV7AVRdN%a9bX8ohWBZ!Ma[FAZM2D1AF
%Xg@,cNE]mSk;A`5"*Q'NXVKMCm>f1GJBjIe6GQL0`(*\Y<>cAXj5'h[l[t;1\<jJ[A/#E"q*JUpfGkGqmsW(nXC,P>LugP=d(@"A
%lq/5(/fUf1R?ogLNU<7fCi56bSOBs<eACk:o!]dIKhOX+U7s<q93B%RViSg,>((un%ZKP8TNR\Or<Gpr7^9a1X\Q+)3C#LNbDJAU
%/IG*^\.(5@2gK"Lj+=Pd"Ei/4Xg+GgRa%rX]9E$@RSoM:>d+4V>"Gn&--GI%T)`#_/374:,[b*h)3M?:RMGQP=M0T%D6KDX]s'L^
%2CIUc'5De=)&<C?d155KQ*)l&;;-TV\k_q7ERG=f?VEm6B45jsaR1=f[1imFfpJPrDaRPU(u\l%d->=PAo!&^`OuG\KLt-FEA)qj
%a=,X4Z=P8'@<2Y+MJ(C$,7XI[6[jAOFSCa$Voa$Ve&(7uOPNK]CIK4:*A32a'WE?SU7uX-V$lh=,.uHZPX<bp$;PmT@X/[2H.@=s
%L!9Y'*n%FZ`/`JU_7_U?`&3D++Dk@9[rP$p`,5;oDnE6_2->&8k$!lLdj?,Q3u0@7aD<7q,c`E1#\L.RWNB:'^A1E*MArF7EA(fJ
%as\%p1*t)XYW8@6JbTTK($E%A\8iOQ/mX::r-4kD8ls8U"^nkM8lr$'g4deR+hNr2f89p&1&5LNYh5P!.OXF]b,/@m&9ZN\b#T2F
%oV0Il\E[8>rl7YR<JFYeX3,W=CsF0HWADc4d](aF0IWLN6q=>UfO,XkMtgB%XkZ%H]kEV[%%GZ$enEl2]PBt6bM'jJKjqH\!&mQ:
%ZE&*V0<Oe6=tA.OJLFh.#daGG8Mjre>?CI.FK):RYW8B,,4Ok_W'u_HJSRZ6Q"0*]DVM;pJQE)>Y%b<+Oj5+l/mC]M$_(?fFslg_
%("FsM&!s'1];[\CpW@e6%PJJr;RW<uQ)b`7G%cM>4r8>XY[@tW9IenmX\5>7joAPq@E[FV)bL]0'\u%/o"Jlk;i?'*+.:FiRO")[
%[cMqh10n&8g_d>:5Okn=cfONp&Sj0n;qB<YV5C*9d`-h"LRM5Cb(?@*4@iD<0]\C_6>i#XJV`E/NIm-J#K14X]2C#E.B3cS-NIgh
%.kB^>C$)iMT3a=jl,m[C0R:'@;s'L]XhhT@=P$+*$8ruci6Bf.Jn>c4,\$tYQAI#_96"SFX3!7UZ-&@X<4qdicbag`8qDN?iXDj>
%7.k)Y4Kit*_C+tD>nT18c$NZJJD5g:&<mTU9MHNqe;N^af5,>afDS+K7NPWQk%GJg:!(-OkK96f(f'ZnT"0HneZuNgQ2E0%\Blg`
%eM7IoY*tohZoLD&"^6n:Fi>QLG63/,)^]TNS(eV9D$ittC=:E7bp5t8(K>`Lju0]'m!^-a,EjXg_l;F$nY/rk&lal;<_>WRq1(00
%W4-WrLSP@mX&L[t8s#lH9]Vqn:_>cJ3?U5S0"iS:*,4qD&^,#&\P+MH:Hfe!l#kqDkIr&S:!5r-==FdhRp.+\5Coss.OVfP1pS[a
%b4_ob`G6<n;oB%cbB0^!js#9m4mQgi<>!<O(]sh?$ZZ^MAnWdA=8*3<\nU!4l0?W<n'J-$f=gKWf\@CIqh]<P/2$%E<X91.(L#7;
%FbPJr:>n[E9N2:X;iO+1O$^]6GcE'ZMU6ndW*C$79.T4c%6ueL`<)C,NNP7;G(>EO/%Rtf&T.=4<"`NB$B#Dg@nJbJKt4</\t@'p
%8DqqQ*)2=A'P=$*R>/fVKo0]e1t74n(e\4%.?Djsdr;ZQi09X\[UU60_DKa_dngjX+VP=.`0?+55(UW%R"hBLXb"'UGh,FF3ZunU
%WYY0+4VrYM&OI0E=!qr88r-<eWWIql<='9(X!X:FYW8AA<=<C8[Rb@:,t-CT":g>&,"Ps=i:)>P&4+,eAeIgCf\@CNq[%"s,d%5a
%+[WUK79c1WD,W_3Q7hh#A\B9ppKIqK..mq0//(XKPUd,l0M&DFjDmoDRbO>u2F+P`$np+a/'j$jdLF9Q]Q,SYJC9)W%o,%2/!-Sn
%1l?Da;N26H2ReG-IY(`JM9G^B0Gt@Q/8JGFKDn8WFH25^.npeoo!5"1lk3#(WbdnN65-3;E`u5H#T!+pZl6mUU\%Qj@Kcun14-&9
%3OHj:0QO9&<NMcGKXk<`CuW=g`^!8q#\BF#*nSea0JkH%mu2CH(\'fWUrdpaJe02kMC=dSbQ/IqUaE-T$"E%?H>KJ%/D=@-1FUQM
%E`ig7^p8()<KsG1-0Z+[ndsT7.Ul`mHWt!$+-A([PhmT;Eib*IrR;=[O_(Sf#SpgRLaL;L("\7q&"9SPARm<AlW-oIos0IU?.bXa
%PaR<jWshJABgGULNClj>CG@=Of;ea;<f^=&:R1.RYdZJ`pCXVb/!=,qBJn\@GE!^n3)+NQNjTIf/8A0OWRaTR/?)hI#DrFnZ:n;U
%Ub;#YEQUiSOV=n"i"Qp;K1Kj!Vd,//%WF#f4S(`+&DRqCSlb8qNRN;DWQ^7F<_NbQTgI-Jn5W;u_IRYa6(3@?qpl&s=s.;%gejT@
%P9tNVAL]^oRR:%Y(>^81L/9&YTHsgMQ7bj24:Zq=]Rk547!T%D=K-7H(\Y:lkWZj]Ajoc/Dm?''e>$\"LeA=heq-b:K&Pd4W$(1K
%W)0>sA:jl9-9+q?jLes*a(^+/R3%+fFPVIR*sXql%dfrEm@bD7D%4m@`1kIR7nXk^%=gd.ctd+lWhTB&UGTf%Wj6Qo8s:R'MX$\9
%dKE4CMS:\/bn8)bDSD<'7$\ro:HGUFXPm$Ac$,n<./V"pQ;0S_@;fqKmNWca<lD<S-hi?nQImuk?CY\lAguGH*Rh$/(2BHrdO^)*
%qlt3%(?MV#-"F@kAq4rRM,[K6$enp\`T<b5/>#3HffQ'.<@P))]rg8'O/S7F&]W6h9/j\Q&_nNh8AV<`aT01,92A,%*kP5;L7gBV
%O=N:B\>ZK?,uOVp[5gi>%e%K4-7uh6+:':rnl0AoH>=h.mfIN&A_2H/RWJ[Xb-ccu_VWilh++-[XCu%1E4##Z+O`sPS.*)>)5UK)
%/2nkP,"0O-Ws!Dl3`5`B@1tJ#^.Q7;$YqmtK@!\*7tWZgGcn40[aM">g?L^3XA(IgF_o`b]rb/CO4]Uu&\t\BWt39uS">I+M*+Z:
%BhHb<iN:AqMSBke.g'M4MG\]+6rC$8$^\]\*26]G_NL,-7ELW6WdNbreNt,*rj7&!9:`pG+c'`3(fIaM`kpTP&C(*/.ZFS1USU>!
%EX'sKXM4=\*p&VC=].lW;58Ll2EE!EjU*rh-u#tVQ*k1aFDbq*;M0Q6i%]L'*ZGtJfbu2,R8S:H@V#bX'2i#>\86J)GR0+&YnWd3
%f\7=?q["p8`$c];`\V'%8F;h`<-9i7j=4#H*>Ndp(:EfJ2?G>-MI*$o,ZNK"Q:d$=0<EDqas@$Q?XeTE3sL"#8RFifPWEqQ.2N^Q
%/B]VC(_.^QN-%4Dc<O1,\$n4epCggNkto2<XQDRae<r`>IB".GVW"7t"esKH-cn>R!Qn,uQcbeHDPp"&(TtIqru0%$@$Cp+)Qr9O
%"FO`WZ"Oo`l`*;8PRK9OcVGtf$[Z*QF$DCUOnf]P-6<ShF#Z[OP\dXW:Kk!/4AS?c8lKmX3I;(.-[LaX7'V:LD4Z8m]W#`+c`PGh
%lC%)As-b6j'Q+ah!9)$9@L1aH1J$H,Q)'MYX5ahc41R[8=kMIIV>CQLNGPNRh8/6KNlD;I-Rg?Q+e=lF84?Q+RY4RSX`0hOQ3e_W
%7\^9U;NPVY_V-!+9S/_GFnN\aH"-<p](=M'U[.'i#<Q."F$K2j32us"/PjkNK.]kL4D1K.)[?nY*5ceoQ%>i+M3?6\GCuG-P"mEJ
%C#\!con$Eb-K^jN3Z!8)h8,.^5b(r#UTLY<\XrlM88(%(k7.Z;YfYS_r&H.iI?VeqTn]uP=Q3+3j=k"Q/\kD:CpZ%>-B%S?l@-hS
%jCuH+m715d_*/J)ZNZhmeN2skNOH:8k'j$r,DYN&Wd]ab,##oYS$d',&i`h\OU4^d7$@lr#SUJt>%D8D#8t@JO:k8+Xj$n3YTal@
%$cA#+932s=0)<)!7u`<1if_#t:0ag*dUXYh\oJn[D2m!B7$C*oP&U`-bY,J:XOuTs0U<]E*&Q\cBr;#/cg"<uZ(Mbg(RjfD@H7eS
%3u`6KZ5aV#6oiAT&op,KA>s5X:fXWZ4dB/[b0XA*Cah[)(ID3N1ek$)]rcjrT)d;1:8/j0=N_l;!<j'pV4"&iW\Vi_\B-k+,g0WI
%fqg$R4W.CW5bA`bjqVT5?8(Yf3/tK<8W[@!AV2*L^'RN*W#B"gl,"l8NiA-]!bbJ@#k"[4:DWX^`i3!##pV$EV-Gu^%MLTMWW\On
%;H]5h)`Lp2WK8m>K2Y48kUQKJ'["g60rRF]=P0,'<$BjWR?GH839=t@A<_0C:,<OV_,I?oI&Z3'--i7m'rQ,"S)\T<OeehDPkX-E
%$kNK+%n`3X#XB)sEg%6-XOLN"TQ66mSXdnf$)lWi%B(CLQPT:@TRpqA*;:<uiddue"MG&mi(ghKEB`m"@M+>c:57\u\F[@BDf_T>
%,abs5+r+?H(m?#(kK/V>POZL366.%QGX52"bSqkDct#Qm-i>+h#WGo_.7jqr@;h0*YFl6A!?mj46U'>Q>Sf<.ZTJs?RS\gl)jptA
%#)aY7-gj+#f\7CF3sdI?Ldsn3&!gnT@N_cD'J>R__)s@-^f2H;/rQo*7[bmh<-F$&WSD%'Vc"+Q@;h0*j*g&R.pJh=]\"A:=h;a3
%iLK$\'hK,G>&2=U_d2H%Xj'/CPIT%u>ZA"!>N4*?0q'XS929ODB+!'t5pfa@d/4G,enstU)@ZI$BX5F;XFNcEF*n=<c1EPDN9^f1
%m9.fbZd>9]1HdN%H^fY0-NU*@5a9FR@%4">a[:&ZQ<1ACMqY!U:"E`&ootZ*-He7M=ma#NU<0uAV*adj?4U#,CF3X1fd*OB-s34=
%BLBb%#)su3g!X7ZET``3*$0]Y1*ruI@;g4[mNgf!+qCGk5$4fuaMah5"D3I/lNjKFAGr?f'MmpAb"rR!O\h.^9ic?c8b!18F/4*s
%/bO*;b86tSKKq%)Ue3Q8YqMCT(Zfn-`+)`-+h/of4KmDl*2u#V5HSTcBl+?Gi/B[,Ati+fZo9*b8J?1mH8n8p`mFQ_1S:YDd:"gE
%:%4QK(.-EchAiN7Z[>^A_0:i]p=19Bd@X?c.TQRDBPK`EphCA/U,1>tcL#J/e=FON<qN&DnjhG%7ICF<QV;:=\AV'!TetFNV&,>Z
%-AY-V%S'(?-rnP::.>RD0'piFWYF2^OsVAD<LS218NI$S3O<#C1.qnP3AJe$8`tB<hW@Ab8Pj.j#0Q#%PpbOM:f_C1Q\7\nVe0YK
%daGLZa\=IYHjVW)e^A!q->069e_XVn<,@r-\5^37.)LJSBQkl2DgB6"U8PY4WZlMR>cGQ3OpnV.@4K[RKtXUNWqR0l)Tb]3*tP;"
%!,P\G)9n)0N!N93,"nc"9nFuS^oJ&'.LR.qJL[BgV3oNEhAiI8TmH3jPRfn(+L#Kk*S^(`!S&@c%t519T)%@(+dS$[25&7^D%>(o
%KV_.iP=tUWaedXp:K_p/!E2l^.Q>1_P0"g>s0WKjOf]9p,u"r@A1G-o2+K*.p).nYSf[WX;Q!E'IT&u<_lg_u:k=4uY/I^RV*78K
%#8aV-Gd=Q_3D0#ZP8Xa&5),i/UD,$Z.jYpB7kT`0Q;f>4^JpR@XM%T#*MG/P=JVoi,o?:;86&3s!]LG9+7:!2W:+-PO`cRGAY`ac
%l'*H;+EP3u\f[_AVi&ojXj'/CT5`<$Esa'2/0,Xm4\Mi!(.ZLNU=<QSV'%:3![p!1C.T4d;M4Y0Cg$__mI\cDBFR9@3EVNV(Mm8S
%\VGl@WgUb1UKk?a].Sg/iRC^`+*V3e/b=\0c1/?:8CY_"U+bY:7(cX$F*8beAKsq#9lbB??&3`?,3!SgYojaY6H!)1S)[J(F.KqG
%DHM+#\@QJ3\a/P3Fm%<lp,9tUIY(EAgZ`ZN49U;@V:<WJ&PAaFf4j:h&qp4_:*C.%RgenZW]o9QBoZ#U]^)rpi.rP*f.#ar>=7h]
%e&?r4a+-o"DmZo43;4):8r"5%6iJi6-+celND)aB1f6iO#UQAkc#i2D'U6r_#Ar$u.^I6mXZ8S1[Ll1Z'0K&W&KA-<V@u8,"J7[X
%HckOa(JKks%FDJ2P-4E)f&lb_:Y9BW4XmI?O+pHC.9SX`$9XlDcs^c:;rNQl.nEI4c;"XC5_l2%@RXpJW<]>b8aHWUb$]l.3e\Q*
%qKuiuS'%8p_Pp!_aek.oN+nL8KtY_C\t<rj89ppYcbVFW:q'XsQ%5*(0cI<d_dZ/*I4<,bdq#7Q@*1i=?E*-K/aU`ElEs-SYHm<O
%L\YZBmEgSd7ouN;l)JHh/[mupo"(N:AnuILmO-F>d[uKgk#cCF]dB,Bf9DBhRUhRfdoKZ+m#[*"T%p&==j'PTAo\/DV;h;g\KK4;
%EC'"UbH::_g_rt7cYGGJ`iRi`bfR$/1tdLm7d2cJ,q\saH)?Xuf7]Bq-nabPimQ9;J68'FpBg?s2Sc3l(Fi-T8(NMM-#OF+`8iJu
%P+W"PRtGf)nKtlBf49mge#5_.8C(8"oU7n*(*056do"P/JkJb+1R'5T;2!#]b(Tmr=rhmhfaRP^a$P,gq1@+#d-<;7o;tl.HS";;
%2i$``JkpPa]1F)=!=qE(;h/MYW2)j3.F4fQ!$Rs8cV@D1MtiI,M(^Gt%[[]o4$a+MF+GIA,%)ar@Km?7iX:>N;!.mT$:j%*CbE3*
%Ydlc+pCW=hCH>5UBGpbp9k$\tBd`.&OX7]<`jE*5?l#=QI0q%lXrnhc(fi],%_n"(jl3?:=i)$2=6J(Gp,7]l5!i1k7FN\tFg+"0
%]qVm0=[X_#?:7AgBJ!qiRqgbP1+hi%8/2u2ma5]uf,`f(US5:iUHM#BH\`Fq2i$]_,#i_Shs#(mA9psm8[$5bkr%9C]dD+5ZoNai
%bt++Cgo4bR&3*j`JbatI!;+ijJ=H[JOF,;oCHMs5`kCOmS!ucg+)rgCe9Y"LFZW\0("Y.Yc>##WUfhc\jdG6D+;D&hg5@b$<cR\V
%VW+ti3FEWWUgQ:[==46uk@<>G<;05b&[@q\;pNl!!I<)2\kfKsa=cgr%bH,^Z0[>`Pk+6M$.N-8Q1@VD8[J1iE\m53/LjJ@VUD87
%Tr@U(:.q&Y>b-G#'KE-b,gg!HCF?,Ygfl_A,"/EGK%7$Z7?gZZ2=<W2g"[RRqZq#k'kJfiiXWF"];!rRf;+f+RV%ai'6dX6*&+EJ
%<<2p<BAl_jZVEr_;s?'"i-f!,3P_QPhL\lO"[Z4(PEXDVk*XspSBJ)!6lC&&X\uhZiM9VGak<(?P?noBd]E0'j%SiSBlf#3CqU%t
%SLW6:JYBV&^&'C"]`pW:^"U[HjPI5u)NV2:okJQ]i8!JGR'lgJF"On%8#uK]f*%Z:RSo>UPB>5gg.tA2"(\/2F37nR[;HhK9:Kd+
%1Yc1eBG.gRg.H:7/<@ZMEUS1tk2qc]:Xj0rZ;O39C"4EJUhB6n>'-8#9XdTO^f-g24D@ZEMDHQWV9K%I/m66m.'4d/%+%d!L`,W_
%d/k<i1Tn7^/<:I*17WY2>4?BHF*#Rn-gW^2Y2E3<[KQ2"Kq]B3dVESmRUr+ih9/"H21;F"blP-T21,in@@dcAbjrC_j==.Yr3Bg&
%M-m#PRhZ%34:24m=DA$nD/PBerIhjR$C4Ka@+j4Z<<>e"Sa9&)8[!t9Bi0eG1UX0XblP.E#m>s^YQ]T*:]bd,k^r0P;k[_:^*'!n
%%+0&=$ngm`%bLZ4]gbKBnJHn)713iZoV@gg:jOQ.2;4LM[!5m4Hh-HoFmks'-eH$ZY<H=f5(@!^F/84Oi\bb^%]A9`f+ar[`1Q[Z
%7[.5AP$6KWd-<3rWECOTC_3h>.VBAb?hN?.hYf":>.+Z<S<`]`V!ks*Df_T>-dFU?Z][D=Y-_f#-h:-J?BduHV-XL$ZXOWV42iU"
%_G[6IQ<Mo[OD5M&[@#.q]WXl6hKdJT\?@#4ABZoqoG+1m(_`_6]OGf#V!]VKPt"V8CCXA^=GtO)SdS&j.7.a2Nm]`J.(uK4[Bqs0
%Pm[qMB2r^M"7t<^5THoLET&gC>OCYT>7Bm,jH>iLQ_hsO0tX%hf>ucG7NG1A6Eb,rM-*`IM+-Yd<@KNj;g'KP[Bqs3/D,a%mOBCt
%"gd!=)'*aE8@X)!8f'o.".81.DN4%Rf5,>bg&6T67Oja*8KVc2Kn?;^&$d7@:QdgDi@)'936IQSHRMR=6-'C3:('0-7>3Wm;2)<(
%^TcC$2Bl*.edTuCF4h7`1q-:X('9aO8PkB3Y$f,/OCkQ9[K+QNGna2fF:#<+Ci558\!%BTMPue(g<9P*9WXsRL^GToMHFU0$)tLr
%K%:X>UYlc-nS_Y[6PWIu\h[LB*"]/Js!P'@YS7l$X=g"uS'e&n&2'>H;$\!!hQtuUO2A#q;K$5_F*#:f,f6sR[rOJM/LV!d-uera
%,74c@$s?Z-Hlsb9M?:T,ELTt+MFJ,CaC6kGaA\A0!)&e;a<m@M-4"!>To9f/1+aJXEZo5Gob=r6qCFML3"X8cE+c3?^D7SD#OG4&
%>:VI15,k;3A=sZka<k[k'qHitQ:".n.TI^h:nL(DeYe;Q'phcb@#8HpC4p\;F$OQk:i46.hk]7BC&(OOfF7N*7jQKh!#O_QZeQI[
%_Q@hHH-PL6R,(>YCIR`Mi,Q,@==?[n'UTWS(gtR6BsYaBeIAk?#1'=.$MFDFB$%'7)J8.j#L'c<W`h59W=UOk2;LBaECK"1(\B2o
%G*Lj8=WW9$o;_Z`dH9SYh+<Q@7K3_[GmE)c7IIKZ?Bh7-ae"+FPV+5]>gfr%9bgNU%FS4TlpO,g,8FON.N.+OMZ[DlcDGqV)XqkS
%r:Ys1mLa.DPNa-cL!@jS]9?@KMATAL7gmI+;(>`m7TigLdjR3>^oN(Z<"Wub/CKn.A?4Y3HQ#lh4a9sTfN*[[Q8Suh.d&U1U4fRa
%O>Spu16\QD4sJitq@J@B6A$hKMDX*\ms31?k)eCje8$LkV6W9g9eFVYleX?X.`Ju/&>[Pp<7*YK3dSt'hb'BLA)O0-Z<"t&bg((N
%0FNnm&MYfrb'FSPg`SHW1Yc1e88!iC<qKr5JC8BJ)oA^sms31?k*Xsrr+daCV/l87;]`a#c,DD?AP/:`-cf/Yc#Qd\ls2od$>n@r
%8p,X*8t-!e8s.ApblP.US\q^mVJ;JU0j?Qr$[7+C&hje83HjgBR,q2*lZSSRKS@[q0tWYEf8<NC/I)cp1E1&n$+-?\QE-JZ;;*Qp
%'ii.&[opPifDP_#D3hag\RBZ!F24j\D[Q^QE\:8mOL\>".lK<(#-bO4X])2S0o.RhpD$B>lce5JE8=+LCIKmL#CSG_!@E:fMs(ki
%objo(g8n%LM[Epo(2]/8poVkM1"'[IX/)Yqg6p1dY$=?;7O3DI'E_>-_L(,0%]jNr!j85.K9P/D=<;%!$T>A+_;+2(R.^=_I?!SG
%isl>tO&D5o5?6BB.8-.QWbTXK<,b9q"g'8d.i'9[<kbm4_pRTTZJdR._Sjl!NOokb-WYsH1Yc1eW+'1Z-!.tl8Oh[i\G*XJF*#Fj
%-h]F']<$ho'@>6OkENraCu$hedPc7>WBc9o/8l9gNe*KSlX7,krR'bX=j/I2C3iH1Sgn8f^]6?0eIZLu9Zp%8!A';JIC1NF?uL+r
%mO.S5+Em"e-#pmr*4-_(0ip-)l,\[[OqDh,7Z<UkW&lco_WCi"+V*4dN#4&_;0QQh<69s-,9s'X7Pl,'EFEp0bjHkL2%mM284J7G
%bp$+e<!mc5.F_(hOE^0$aBfUH6=".0Fd"6oD%0%t]Ir$^'XE4C'VXr:$?[(5e=BDZqg=@NSPnFpk2o4j:V:K(F<+/W&3mj`c5"J.
%=0<9+XX\tGq6k.$->QsgVA75c=&,'*VP83FDh'?b?/9kulCW4fT;s?k]dL!I?hZa6@<6M"mO-XE'"a5uHoSL],S3Or<?MBO7?cnf
%U%q]+#M$u%Tqn_([B+26?gV^TJ;SS)PS5m)=i:o';s28.6[P]/+lG[*\d@H6\Z_Zj`uscBl77he2TP$1U0Ak?.lqa]$uR`79N6Md
%AVH_8[(5mkCG=j.=PVHs+dJN,=>m47;+Gs8;Y_UJOT\Ug'p)-\McSK/05u*l4=O+TGEsV3a2#mM.D]\9F/84OVDWD*#e<I+5Cf[I
%nl]);.V`=a)JLcVRTD)q"^4tsM`@"o^4MV?Z&2RTG8Y6-E4$i,lD.EZp:B7KgYd/WWuGHWIDMbC8rT)JbAD40fZncek2r&e:J<:"
%MM<T$Xje[I<]VqBJqn3"0kG]G4?c.A^_N^^KX*_-=p,f4A^!U]`JRj5YeLr3#L$r0>;*KO7S,'tRL@gc#RpKB3l(+j>$0mt8!(-c
%0-JBqV?t)ok2r&e:LG]6gtAb>-6m"s%F\Jm[M$Ls<5)C%!38dX\]Ra)U6HsC2(3gBMkX7?bDt.7XJ1V=%Gk*LCdNbha%f<-^uJ#q
%GVH[cHBR5b*-+RB&R*iA)Q$pbYq3@`jKeT3+Q[@&XD=Z.9KZ_*^H\Yp719CYi<#@IP*I>f&"k\N^qM;p1/!N-</jg#UW&FP40cYd
%#FI5`!c*Jd`qAVM"?4>qE+dQoE1Pb=*3]5FA@\NrQO?=,DLl:j+W/V7;C2cZS[;N#bK<;diQWd?6n9e.K$GKU<n.P_H,$^H5ZV$!
%R;s%Ta=/(2.NcJF;pnklOcUfo\88-#@(9+J_/LX4k;A`u6ZsQf/@QhKj]siJjt#p9(l8M.FdV8K.pu@&67[tVaNL"YZeT.mXbuP#
%bo(,UgBr>%TXQ[_0H8*&8'be1cL(S6,;>%-hDplNM3Cf!9@Oc5]Weq,B(ln]E\$-S_&TRHOf@>Y/8eGjj\-DR@hGg=_QSQ3/=0?>
%j\-DR@p,opLKN1K0[&HoTNkJ_3E$+C@&=:RR49Ti)HRZ<1K@6][oN[oQ8U\Blor9iDG?hjE.W-*\Y0ba!`sndJLn95$EGeV+IZl"
%Al]DQ,*pubY#Q9NUW!8<K'#gKEPd,OUc:L\S`Jf&/9Ts29:MCQFru8e\"_7bO1)+.l[4r$@X0KcMN83u$PpT/-*2@O!,\%Gb.dXQ
%-WjkuX\opMBleg+cB(aeAd[U/$Y2ELYYa7(9or'VZ:V!,kiuFr*"6QuZFfc4ft#AP+hNdpQWql$8j47hBU0J#fRRFjWt)JK71ZCt
%eLTRs3ng[(eR=cQlTr:c)@0!*1X$K)PCf_K3D\aQ`N73GZC0rt8nWs%"mIOnjY=9Ml!e^\S)\W5d4VmBku-2hK/$q_M[C?SXDaq?
%R1r&'ZP$<\^ueoUZro2cKTlnThe9@-<lsW5g)TT#"5sf-/$>[n-a;cKR4uOlo`;>?1P;aZd_qp!UMt#(HX=%h3G/!tm;a^$>m^aV
%%Yn0g8("g20[";eV.-Be81SQ.bj$n*D/c]2c?[[sJ6A2>GG*?X\9u+DQ]d,l.W1:TZ@'=f27F9g#A/5qDQSfN05YTefmQ9#gknW=
%3SK*s'nH/'dT4L,\0bqE[\kAp=kOOO)JRsg;lB-f1g.R,bc7ZLC9#^[jdjs/R]Hf&[T:o]2,ufhnkSKRc+2*$Tc*S<i>UBQ3Z\d!
%6$sr6:;2?.[or4#qFG/(TFLIVl[[,p(=B.2G@>QC//N<8#'4%Q.qD?Y&5g6t:6=SCn5_X8/Wf'k(,]L;"PL?1bos]k+P4]c1+jZ-
%8cX8/>SPD^atPZ\0FYdTC3*6V(kuF6<JI2%Kjb7Y<L_kuCsF_=fRTVr<JDZicQ#9=W=2.S[=L[N_H(4bic3sT\@'I5>h[sQZhoT"
%NKgR*0ape,-T%CVTrFK9VUIXa<V+RZRYRbT*h#jqE+sC//F*t<:@lh3bsTro*h'*SBKFC*;`,([Vg5eZ\N+9r'BNCo[LT3\LnC12
%<C+!,Ib#86aJ)aY?PVR&QLh/"k@^'e=[oI[eLkYJR.Z=:%AFT(fsiR#)FZMkL3ot2a576p<\:kuY5jNuX`<fTc0"/Uh+s8N,]C5(
%%p"l"mL$c\E1aY/AUuDA6/L%`m<t]82AOiL/:ch?aBPWU&e+I<\?c.b]hbi'>5+W"qK1Qjo]lBtn,4%\2i$^J@U(.'bD1`?@Q:qE
%l%%h'.pB?f&MYb(W]7H*O\`L:Jl\G=N>PVDHaU(:TN*<!%$D&A.orpq&-&.HUh6`*54c'rrr]/9!.V1"PkMODa67u(=sJ;CcoUf4
%b:PA>JdBl,e3M/nLgLll.mPR6K5dTsJX"n#djc?jKtS?p]i6Jg?u3lHjoX*km"SQ[OPMk\*Kp<^^9b=p*Wn'6<6JL5g"RLGq[$np
%jK5AAVI>!^S!.#/30cl>HlRMW_$g`$mOe4mUt,pFc3agd_PJ)l_)kGdTlk6oJ88Q7,4&Mo'.R>!%5ZSd4>8GU$X-XY01%BY/@TV7
%+k/WYdH9SYh+p"G,]CZge'Sq6:8e9AZ>pstfenAoQ.mQ,#^6:F=MD[(NrjT"[;!EiF24jb9X>(/bI.CKB@-p+bI8@EG>-bs9$2"g
%kAqTL/_B,(]rfPA\t:+r8D-V_*j!ci2Cb7)<YVW?R6j7+$>nor'u^pj;Erm:MWN#<')GaE1[@Yeo&48g7r!]2LC`/X[+',I)4ON7
%1Yc1ek`U"76(<P;NEZco>J;u_4g3Po)RF-*dB05RQOO1h%U`q?Aj%>GV+\*#Uoq5s"SV;lAEj7]gh'Eb;PM#n4pu3SE2=2H?.^+s
%CNX[QWGK])-8QMo#ahln=skp>'&>DtQts'\DN.0Feu73M$dNU,%bR>j[T6A;Nosl&#(d,Z:GLO)&K?oi,'@InLb"u7[m?o9A%!T4
%BV.[U.hnp6C^u9O`b=d^hM6tjmp'K((AHBM,]XK`KO.^l9;=?8\%)1FAoi%3mNf*G-GuYj<\4^K!c89Q,%&Dq-sBb2\>k0=BRrYg
%>p4*Z4AjYdWm5a)CBda)Z!j1S#Gem;<'_Gr_CB7=:I\m^Xb>P-JL]l;oPpRA05YS:e=D9!<j]>`3Z?<UdVeQATK>SP9SI570O`ls
%9kjsn2CMOXYuK[s+E.UlQ*4M=@<6rMf7aN9<\'O$CQQ5YR#.\GO3>Cn&>qcY.`p\[1D:^8k8#u]lqV"m/&GN,+,rsEPn#.;TKDD>
%MJkpqW>=<l:a`)Al(AIm<DpC&=,=1/&`0g9U:[Wi!*7H_\gO<4??`nt:PeG1OS15nmTE`Gg`3U]M.`q=DoI@Z-,u"JYjMbN.>1UM
%"_Fa]Ap(/cmY;:<@WAJgBl/\iTkkItXI*#^&f*A1`*+\X.UC[bJA%j\S*0X&DL+R"n?l0M1-iMrlGd[pi2=VjZaVqqG7rM2Ok`Ro
%BUJo5X,<K_<SCsa:I=7n$!"%n%9RM"W0O(in3Ge2MV,"o(#*oJbhdkKD'>U,Cm5JL;B:r5_5Xi=+pRbi![P.g^9-WWKN0)T6.69T
%g/"3kg`3FXM/BAND5DKa0EF),O<s0oY:>55=)NX#AS\_'2Rq*<EQT`t.U]drMH0/pG/;tr%'n5J!ga'g(b+,F=f$7O1V%O/Y\h?a
%(@nW`>9M+aE,2KE@hps]L[7c&>>)(MQ2T*n>Nj[^+Llr$V*\=jV^QDdTmW54/@Rppb-ikS0jR$`$nGs<-Tedt5W1[$R8d2Zk^\%X
%R00A<("r_25J>B:e>dh:Ga_%2%Qn%cF1pMek2qc]8W7FRDbHLne^*4a</>5XZ6e]A=`.I#5clOZ>=>h"-jDS2aE$&+VJKN=NA_$_
%H5FB4MO\<]&?Ar8.nO+&BXQc?q3Jmb,YQPU2QPC$@P`@8UG_Kf\i"N;<'D:(R:4W:KrL4BX&g%=<[/@!8h/=*R+(g2P<o7+*N:_n
%;PEMLKrL4BF[moTPuMEX;W5LTk.obJ'Ph5m*KO0%'a@C1>%jpNU$5Ma9iWc%SSFjtWeI<K/R7!L+Nk+EVGf''<OL1qWeI=M(7J"+
%crAO^e#=*8D/Kj:rIhFFK%Am[$NVoPJqD^@>q)S4P-d6qWD5`V,o^^JV3EX0<!]eb#-k1&CDSmAOG3$%bm%?CfXp.;OgkQNgflCe
%:cDac-%j%e@h]`+EHV78g>![Rq[$qqr%+n0QL.;Z2D=^=Ci]1B$"UBL_1?>/rT'a`[ZjR!8f>%D_5h=?#7I"'A@\kI7M:suD$3,T
%`T5]GX#^Zum[0SWV7/^U8$U93X^o)K\N+3p'@If`=Z.A(VAo6ZaWZ8kP`ecVZ/!p#X5A:UR\3;fSP7!Q[m@+DPD>^^)plaa=8*cL
%qJ"d_l0?Z=n'S3)f=gW[f\@IKqh\pEm&\)>Gm3/`F&Vb.oib\K=\0Pi>$JG9QZg`B_5/o@<RO@ef9Y_`fGhWKqQAn&\]"$/!1o)c
%_`nt)=8(_%G9oa#.[L/rg0>EH2so4N^!1Q.T1IPSd.6mDQ!Npt_d-Ft7ApSj\S]1tr$S.X>AG['?%C(7*N!q1dG=k&*>5LBl-Dml
%=.gJ6BdOFgYBk/gBc^`ZY5jj.0W.s\/?kPUc%3Hu+P'*1$AT:CiR09M[;bquP0j=[U6IO!TV`DS052ZX]&I%DLm0?I]&7%N\p;i:
%bo'^,j[L8Y9,1mt:*@l"Qr,3`k/>XO5Ka`sG_ikh>@TbX24L(&G!A9oOe3B:dH\/JXWjK=`YEMpLA2+>Z_m@qO2P&&V7<FRPt-@'
%2>PeZec8[<:P#d9KH+3Hb&*M"`jK%ODI9UVI*!LaOttb$-+7l$Zai(mpCk+VkulCUN2;N)Hl'+*@T-afC+\uXq(qB9ZDXuVA7:]=
%Wg(/LYpjTK4p*Z8ZM5703j`p5[mX`RkG%$__2($Qpg)ZZY3%R#`mq"HabSM(:r4+1hXd2\NR;Lj5!i>"79I_R/2[Dl[Xi3dS7`Q?
%XHo?W?=eM::P?&IS7cC:.$:"#LD=(scck5G<h#M^L#a]9#67l6"`4jIXJ5'5Ws-HnYUmHkX?;A3=[h"TBle@"mN\7`=&cS,4r>f.
%K;;A&+I*Hi=1D/_Mfb3rasdmd9bNR=B+'NX3F]Z<3NOWne"t:iZ:<TmS]7Q/=_+7?_e-Ef4s2:f^**(aaC8JmN%ZEhk;A`u6ZsR1
%/AIpZj^L7f/^(G7)pS1DVQ*7-[OK%\8I<\J&ff.:6-cK&E4.43kt)2!Blh(kW4&*c$-kFT328+,&tEf2E-bE6ZV:bO9M07sS"!o2
%+7UnsU8i>u,rjg5"Ic3>hSb]-$YHrodT'='rd\-dB4aiflKc5:[oj1kQr#M![lM?BP&PnY4aBWBB':J1$>-6g["ee+!4ZDh3\L=i
%+k[437_Pca,VtpZ@s/pp/\e$['sp%>8IIblo82^+833r9A[3b@:u5nn&`h&[i96GDLh6Q8\5d(Y<rgJr%Y,9NS*gSs\CVbhgCp<n
%-_rmuVL+UE2E(m-5%7]E79(k6K2K!$s,I8i&/ZfJ&&kNpp6+Oh&/6,mBH]3/>TSc$Tac11nZF$KDKC=ZB)m/fZ`Fl"@,M:KB[u_T
%IR&tphugh%hH.WB.jV6c*O)o\3FMRnh!uta>1)Ygn[.e,/*LZ!k7kVS'sZNu,:XK9G9D^ri(b.kf0*Ho?s0HQikDc[+I;*nctPbS
%^(W:7*,V(B@KcUb.+[\kdX.9aj&*=o.RpYL\N+9r&a/^8\lt3M4kf0O8i8+QX)t>HAo3Vf-rIB%(@QRC%CT:eQ.B'l!c?;cC/q@3
%blP-h[B@<H$?bl-?9Nn@Q)1\PAtaMd\6?<n]fZgF.)CVOo8:6+iOY'eQX<@".Jf&7[iHD@K@?Pa'hlmfY1s4%b510K>e(='P`8::
%\8iN&/%0M*ZT3Xg,VssFC+(ZfhI.`YLiB%7QC7FM<!57iQeo(()NVb;EUS1tk2r&e8%?_q-+-_GiF#V:fi:J(8t=OfeeWG&N>&p#
%G&!ucW`E[I>#X(-2GEJSV9K%IbQJ'VWj3"`=lp7K0X2!srtRql0X2":=WV/7`%G<Kg`!MF5=)IV?gDCl6<dFoD5UWPX)ap$PRD>.
%0!q0iTrlIk[Sne`g)M6YCOb(f(YYloBKP<B>EoS5Vd*o9EhVlb$^Wb1L[9IV?R(d#Gfka8Png%i>V+.Qk%;.5^/RQI^HdV0?rg:$
%'k!?^i*`g\o:!o)ZSi$UdlEcE!h,N,Q.QF)CV[_F^)Ha:jh>sJmL,TK'mlFfF['<<Oi=/L4rB7e)b\:t_[Ir_<,o07g0Dfa\l<m>
%\.)J=d(-Yg,AlqRfZncejoAJRJOB3>-kR0+M@oq^&8'Cgc:J%nnEEB"JA"0:).)mQ2KbVGg`3Zt$%%Xg0)?.i`o@-7JjHDYba1oQ
%(daBDaAOi8bn[S?#-CLq]$N4\"p'YLSC_QeQt=ME%KD>kRY"[re/8]k?)l)S:D`g:-bT\i4A*NgQg4-7S"!o25@LaXa(99P(m,4$
%6FI2V=2p0hPsq^]07$YF_$#Q_'1B"eCk7J02E4erAS&5-K5:"l](bI>;sW:==.cXBT3f4Gm_/Y;k2pX=:XEl&EnPCc-5V,JRYPIY
%TgC@LJ2U%>=jj9[]g/G(m9hQKWnX[[g;r"!-<Ki`lj[XiI4oWRS:+\YauS3":A\P0m&Gag[i80*1%>!]a)/2m3DfG`ll)9sZue8E
%Pmb>b^IG>kUb&1Z.;>"GC9LiG?G0N88erX?8R'7""[:WZOG\:7<PlP_'<hj[.rl+dp#&MrD4E1?3]mImhR,@aDejEUmO,S'ZFIQQ
%#GZ8^Yf&Uf?pH_c=;R3JBNnj5@bnH='(7/u<TT/02/p^5^qXW29adEm;GFNY3qK2S_,m^YqZ9Vs':N"ap&u44_>9$jDI9'@>I;YY
%c>@HZg&6T67N.VSqHuE<>EpqZ^1,bh`b^dk"Dt/RB\KJo#rYj"dBlni'3)'5b.4l>@$W)o02Tm&Z499@o)dI'[@03<g(u2=/PTF`
%2_Ruh1Zc`Bp\$M#l[GR4,FRkBR[Y)C:qTQIL@Vc,A-b)bomsoJEWqkm^2h=L_od\MOeG4RA'H09Z+M3#BsWRFFTrY8mU_BB,I1SM
%MAA^=b8J6E4mT6>a/Dq."M-B-V"r;Pn`U@=>9h_c,dt+T[&&gADhUdunjF,2<O8lRjYg&8C:4G5YL!Kq8d4<,?Fe=&XHIM-ZoR'p
%`=TO8?kQ?+C,(Qq)=#cFK&4k4*Z)2+@Y04$(kl1hhHV]n\%+M.G7rV58o<7WNj^A:RAsqR&7pciU#k:e&A*[iQ&,r9gl>W%]-M96
%nSIP6E!6^"&2^jV5aHU,d&DV]c[qR$PE<]9ScbPrhO?cuD-QR@;.^cBE,0UJ@;0e(aR1=d[A((jS3,H5.rVSS0*<AT/@p_l=QQu+
%iY*:O[m@;TXot%eMRZ8r[:H:kblP0)(5XSTUb2\lprH\l-,&sp#t9$\(M+iHRPW1f1=CMUZai).G7rb9PMLgMg#4V(l1N;S..'Yq
%5<3Ga\s9:6C*RSWXHG(gr>;?TJm#XuWCNF6bX1e126p&^451*FUEUYN^,B\*ejG<FEG#;'L'3fG/4><AhWAe58RuU*FN`.ui*[K-
%=S!s(R1A=Gft^BYg.\$Zc,7u*e2,"bfs65PK=%&)V4*%->9(F.82f;Qd4hacbdXK;G>C_UN_K0e/So<bfUW/S<]%8k)b6C<dTTuc
%)_+A,gafe-n>;@erXKo8n>he1c+?m.$56(Ek3usu#J@?)&bXOV+]l0o7;`sAM`3a=&1=31\QBI]nJ%\"2t![u#=j-16Zjd8XVJs[
%OH68JKO:4$SY/8g-4>I6A@O=%W`F3br,B.Ze>ehbK#311$^]&d)DMVh"'cir+*kd@Z3h>M>%P`dW40<YO4m)F"C79u74aMjbiFc.
%T?h@lNnKsk]2jTo@aO7^CG)2*3`[BmVIGkG+AMCeYX"$!+BKFd5%M&'r\08$o:!o)ZR-RSCrnP*;aAb>b]%KK89C(([e(IPLr1Xr
%)Y]iTCi59dSOC(jPdcf9>T,o0>X?j/%o_R3RZ;lb.fW=hr52Y4LUuLf/o2#b'u$?/pkQ-D%s>oW9U1++-iRO(r'Ss'%nCu9_f[?S
%Y,1F7&c%2^LsU>)L:2sYg.pGM<cLL]M&Y.uDJ2+O_kkTq>`0/emDKHN'fWLj\=p%aL:.aSZrPo.G2e6LRp0CRmO-lQO"P=kKKV_*
%\WfA@E^AKbEk+/->7e_iE4L#NEadZu\Qit6]Ol58C^euQn&kK)7ftjik<5<nhJtp!JnH\PpR^J\i_d3CmQIc,g`3Ws$$\&3>hU8O
%D_&+q]C;sAK/FD+.6(85fUoT<d0@4_0j&]S!GR&909*6Ift#?.Z^`/U.[o"!/XSEJ7YR7rFApY'%/G$E2HbT6*[U*ZFZ40E\N+9r
%'CctI>q2_HEG"H:<[hYC68`cl@@#YU9k@T;)\[n7%=V;%a2C</!>CCYSC_QeQush9M,'=`g#7O"VqDLQ<l^45T"#p;T$&VaUMt#(
%HX=%h3G/"!nJV^>oYhiQ?7`PR1NU%2CeZWrb;L(@?1`.DD>RWoGAF55DI_Ar!hkP>SC_QeR&0ZqneH(;(!Q6'('n4$>91=36Kn!J
%e2L\7(^35BpR]uQDN<EKKY8.S0'/.[+,c+,Q'`'sCuJL$_E_O)eI'>nG0>UX<]1YH'pAP_iF9bTCces^^m4l%mX9ESe@PD(eYh`i
%VcW>jHge_R\N*ph'D!+K>r:"kg8lE%H;/2O`2RH^,+GEg6E`tirHiDem*+bcp=I_^kuaK[fQLkFL/qL'e%-W(/#[i?-\,!kF,7Kt
%\g;l+D$r7'.MWNbq!\RU.hk&*?u'hBmO-XEEk,k;I'aOAW.p/)BWEakd2rK^\W&Y=;<8-*DJO=XIGJ_idO($t2U3iH#*<l1:8hj!
%Y[Khs6TIPZj]W**mMkg/[?\IX;]Z#omq[O"?uL+^mO,q1'"VmCS9>;BU.B&#(J;=+.TDU5JQYp_-,$h3KY/)iX15WhPt,,a<eb?&
%f"'$+Y!*%W[]uOn.U:AS&SG?ADfNcDq@JZC<4JZJ_$d=_:E/Y;%bLYI[mi!:oD*&WM3+&*kB4U0f1O0n[+]odEj^e/:j%EfJll&X
%"$ut3'eWRg#eR<$^ssm\(g2DB(&+`)%5sR!Y"]#.%5sPE2<^=%IDPe_^.edn2E/\CIR79aU!"Br0PpoIFc\%_W$i'TLDoP7#\cm\
%&3?l&R3[tg5!smEj+N(sb"%)l%]nlP>b$=G<4nB8]I;2Pn3rnN?H]"q!A7FF\o:;q78XJgc;:]&Za_kjh*(mE@B%I>9AsAT"n5af
%`"3oe.*4(A"e*Z#.fL(=iAOe<j_YHkTulZ%idhp>#,HRkF=gI9QWj$AX1R-%<bMhVlIDC,>mhNS;-$GP$cWFlpI,bT<3J6i\N*dd
%&^h"ZAM3;0`p._IpC6bmU*JiYNZ<saPoN(kFlYfd.`JAld?.p!Xcdh:YW&5?2;_l5FQ?]WO^n5gSt%bj`PjOqaLS;qa7Lr@q=2#?
%c-a+`?rgACjZ8on*.DdZfHln\j:kn=.i]g5UpALl#(eT3SfgtB>[PD=&g!BB=%Z)'0.dZiV0Air:89'c!%TeEb\"Ao4s(iSO[kLC
%\Hsd]E+dsQ?F.1&@eUJW$7h9E/fZJ@$NHDdiBF(T)e)7n#V;rW?dV?s?rLcL)Iu:p#e[3URP;32?reSkIGRu>Ep5.#e8,UQlbo-1
%Tjec/*,%(lfR.IIBlf[0,C1)*<4KSt#KpoaUnSF%N#/T`B:ZDt)<EA:NUX?MMoC/MBf"5</[p%11N6CURdOm'(tTeJgXDh-VkH74
%VL*1r2E+.k4p"eo7=NFX_efK$fsLBFAVgkrg]fFSFU6tb(fWD^#$5\pC#qDZc#!rPNI`DfSp:UUbZYD?!+raM4ror$&@c+AY0:(?
%YSV7ogj<A6\N+3p&]Y5/!aNP^9rsgcjHtmP/gb8T)upVU7=Zo<fdKn^R#Q^)7K4r\!0f&d!aN0/E#1D;bQc=_SegqK<6RB.VBRg3
%lTEj*g;Ff'8V.>L@b,mf+.937-d&4/bqZhkLfRUii/5YsMu^b";-<=?mo5-u^aus_)-*uEG]O70E2Y86&=DQ;Z`Qj.e^ET1=jE1N
%E?Z;&ZV2ZuR@6L^%gb"p>aU>%^atOe2/DNjAoi%;mN\eJ<`HSh7l5<fPgFP>LTUt)\k_J9<M;e3#p$T,FQbcZ_kkTYZRe`43h\oB
%KaqB9FQfaOU$I@A>noDBS^??Dk2r&e7p%:CW,NbQkYO074d2u2Gq>$dd^HfFlKckgZNM(4NN87cd^He;l_dJ1cJAP&%F-(dqa1f/
%pe*@PITDck[b#7FPIA!1^m.DmhJ5!W_KBa;CUj6>`3r.`<]XF[!T*]QA<96]$>BleD$!rhfC5)k2E4Z9J.$mE!aKR)]Ol3h=\*+S
%M?Qk&<FZ4SKXf*8\@5^>Bi)(U_l?sO#$sdXf!tIeAoi%7mO,m58"E"f"%QRD74FZ,^/Kp"@@#ZlN/H(*.(@$ddRH+<Egt`_VTa<%
%2@%GQ@k;hmP$R+X2I$q"0(,i:4iYPZN$Z(?\&P1^CYX8CZai).pCl]s,<%OXK9^i%cYX[^HE7N^rG7]VQr1[M=!>M!E2]M3Ib%+1
%Cb)r8?F)Y"2?Zg("RMq+Ke1JW1Kt0ZH!+qI4Eu!SpCMq8_0oJ@I-f)6k&B-PODEom.=\_)R_4:!Z9^3&ndFA*j;14`9FZ$q+r_5$
%UV?f36@V;^/(PipBQJ^)=3RcZ!^VAf=9:29<G\uQQ^Ou+-j7g&K`JUD9$R0c^!5NIT4$8Ae^E.kXDkFs8/m/Maqpj#Bt(L9@sV2$
%Y2Ic">O)X@C&EKRp9;.&g=7#*hA97sXa@6WrO_LrqnhLXd+hE=CSYP+Gd,,&=&mf1,h1tVr*#W?f3Hj?$^48RX+G4tdW8XF)pl_O
%R;p[2FB*N@9X:.jb&2r*Fjj@@brCPt0'mEbeG[=m7W-fI1cMtH'[JiQp7M72[qU7SGrf%)Q_eiJjA3=gA*<"ZHNR0VfGc%5<lKqq
%'f*Jj;_&1[UiQ8jmA-p.Q,eF?)Q'LQbhhJQh+o;3jCXgEm.#HQYNis!8g0IYCi":ClPq1KC&MD]X+Hh[]aPZ.UFnN1g,HCaD9h&X
%,YJ;GWb?P.Ai8"k):!E)DB*MtZV3pO/s<Rp,bHAA7m=8i3G/"!aVkIhefBaAc*<mG[&RB>%C9Ap`%7j$T@M'O.JQfr>;46q^oX!u
%=\"q`Att*V*2d6":bg.1Qn_1cQI(6W73[epJub:#2K"NASC_RpNnOA!Z:9G3;uU09ZlS5-13Bmbl"$#d(<?L\R%gG"C)[L^$9DA3
%Sr*]mW4<CC0hX$`p%uU<O'*6?9pRl+/#cq')F2B9M-@/8q<<LlAg:Y:f/*Q-(LRq5[>Z[5QSu=mCtM<=CT4j50;[\Pem%Y<5]nR8
%:iK9a'?MgBaq=smE<5u#Oh.W=Fk2K1QFCE71g1mW)QZZgB77mM`T@pr9")UMp%\m0nE%0h^m.FK`jkcUAoi%'mNe%),.L)@iaB(o
%XQ#oW"G4'Sc,"Fi=])',4#FdF;HYsQb&-9D`THN!p'.n8PV%(`])RXgCPD;tS`O<edio-#ZaT4n5ohQ`KoA+>CDJkLl:sZJ.nX#(
%qP.m=TZii7,#VtZ%i0k!]eHkX-/0aKgh,\J=eMNFV%]R=gGlCh)o-3ZM_*eOA(26pb-3F`Js9NP>4CCSJ/:pME^abuCa&3sGh9)W
%\%+M(G7qbr&_V1O+)pqRHjIT4b+[eE,F*pr;/U\AB7pPX4Jcj]X@"HDZ`O)sG+RG.0PdmL6`3LA<a5X=Am$a?hUnD2/DP21l7GpI
%Mc#p]NI#Gg7V4P;a6ZR\==[!JoSjkC>!O,]Z%*TJ2f6ZQ6,c&f;$TT`Qd&NNE1-s;1s<i&$<]!p%baq*D,NI)3$;8[Cq<-4!T/"7
%Di]_B*g-.MRI4Kef\@IO3sfi--uF6VYVK@o`j`$VjiK`tiaeUeR3<;M>O?C!\Q%9!YQSYrlcPNqfS.QfA<R_;UnnYtEIFjK<@BR)
%1U[-,mfoH_V%8qA4&[;l;.9g?<_I0[D/Kj:SHQN)'XrHj7jDun8e*Zui@n9KU$2i<W=f\`7lZHmE2Yk8iPO`-=Wn$=Nc8*3NaS^r
%%T=YnlAfhN.cJ`rKYrMgbqZhoOOoBLec?)47=W[hra8<YWeuO+'FcRCcu^gP=S>@fTHR7:$;kBA2o(]tLKK&1<#hi_L2PEqF@FO&
%Z(>Csng35V-9]8#^!2\NP<d`WcIVOX%.S*P@:t^pe9);Q93ZG76@2!g@:t;;OQn0oQSroe$9N$;F+>e>&"G/"RB3T2eNjIFgfGR,
%_^qt3SHZ/5ij^aEpLs3m2M^Tn@U(EE>LDc3j^n$9lMncX[:RI[j3"?k!Hco`q_8>QZKM8BNf[eenBGE^qr90L7DM)%-uI/$J:#k?
%9IX$&aqE1a_NgPW(dgS(UXcl[`0!-fnZXfr`*DLEUKD"$Pa&>'Bc3L2gi8l8]Mc[YMdr5=(U&\NE1IBL'Ah2[Xm[]W?.<'GF)8hK
%-V4,Ri5qr>[M=WJM,M/2(-7DJembf`E[=:NR?`U/0:3,OI><FocH##,NNP;'EC9@Qme`#4F)ZgPfpng0=C)_NAE`_=M)4;SP^Q>a
%CK5/XgqIt&"ZrA7MR"]YEA@Z0)+,#OJgt'2"$5#M'Mk"\PAumCA6-*Q2<oe(E7TSj!DBL,X)U&9!fO05UR'=o^]8T4BR)eb<InG>
%oml'+o5W'iVpoidC\c;a-AGHrLH#gEVlj;3EBFR_<DcI,2fRYB%/j/4K@@'f6qj/:fB(Eao>K=EK]1O>6!*`((t/)M4^ko_HSVkD
%]+[-akb_\f\-e;ZeCjGNq)E$E;su3:.^kS&H#%BV?7`-rJ@`g'28%NPqmr8$ESk)=Y],9LelYdYW3'ZAQ4)ilfa?VQ8??9!]`HQh
%YCSAbQWY^BnD]19MkeEt?A1lWlI:7$I%7P3WHYJU/a#@Mr>"%!=D*>mLbU&sWtIcVV:Jcl&?W9$G%n)4'd\SC9<G]VGRIfFJ,M+"
%>Gh,79PlfG+*5#)It,]A(X0qaqOV0JWoY.+3T$;@Gj&25pT>Ql@&pZ^L'rt*[T\p*,\`gOCh4"qQ>0b[GRI_SW=<?4G9ppah#:f=
%f=G$k@gKT.*?V3<Ekq9cA@l;6cI)Ac[oOBuG]1@J1(/PG(%S<.c7)J#Y"`B4=UB8o01cRTD"Kbu$kiFe(u#MV6IH\`AQKIM)TpJ0
%]*sL*_d7I+s#S<432Sh"23>i/4O;fQn/c6-HYQ`bN6>`.jE""3hIS10EjIeX$<%L45qD'QgnshJB<%tpeb=%r'j"7^e[-":"`pB<
%YE5pj^NVqRTrJ.5s0^eI%"Rk$k.LlV?nC>FaF^bS@6VuipJeV&)-;XYCQ/OuMHZ^(U>f05982]8*b>7EA[5-4RJmqkj]0Z79gS.M
%F5\[8XhX-i!iqi&r55cje%dllb5PS9,$8fMnILYLVQ.=;50hjUPdja3fD"@3)$90i`#?f6WK:_6@n/(R.C(bIr@2oog?MO-Um[D2
%U-;_#B_mU2?n;L$%KcdCUV4H-q4U.`!MD84.Z!ut>XT^s[)##)cUSGWS>4gZk0o9+n#19W)o&M9S_MG%j;)oC\88Tm@G8S0Z\A"_
%/R12<\1hdY/nbVk`Pa?%>IZe4iPKI?Q_uF*T=/]ag;8R"(@HeL3)/:-frA,OXj>\;iGY9%(Se")lkuTINBcH3'-g9_:9:XnP(sDb
%r!^.eRAF6Z(8b[T%qDTM?rYCEMg-aJ>5Bs@*`qB>A$d+T'@q,IXJEMA@QmQ<GEfK"NR:f)g&XP<[41`8JOoThri57h<O<\fkX1a[
%.S`SW1fm\<XVg*BW^jFMW_(FHVH[M1(W:W=6-SJW=Eh6mXKIHRi2V%<H^pr$-t:^GF04(ZAm0jP[R[Z>aIT&$fm(XV_Pj=Ph*<(%
%OAM4.ZVcuB`)^4AB4!A0[RT-e#@39\f>7659:2YA`-aApG\Z#qURSta\-e9T7`0U6:7.)@p)Q#lH=O=Iil=Yn>hP'o+Eo;$H2rI2
%,8ORLT$6?.-8u:1@L^<O)QP?ioORY!Ddf\C3?2@d8c!BKrHpd+iUrQk;E2<[(X0qQqMl1h]eS86+$5D"eIC#Y<'%"m&@A+E&=P#t
%(NOX#I3HR.W\4M(W%WhJ9(dm>`.bDE!p5+<(F[cLk(Bn(D[5ogq&mMmK2H!C%q=?Fk2Ui;7ldX,3,O(=?^SfX0HXO.Zagq8l!g%!
%`@rB=%(!J]k36?b@\&=TNe@/c@[PEZ0HXO.Zagq8K8X.r(W1W>0t^sZ:=OJeZg*O`f&p9H\b1W/ahuLP-_i/$(7BK?A7\Hj<(t9p
%b*`#TQhKgJ'BVX7g7a?h(YRS$\!Fdp>U'YImHnl>fq=CBEm!Df=7K[M.s"qSN;5GEhbhUt2ssk%*FE#eiLjNkSPuXH\MC$+.L"iC
%6L(GTcR"CeQjTnLN'/Q$Krq30pL-gMabI)Y@m0o)NnWe2nH@lq**'H<.Q3TR[UHUR50h`'Pd0M5Y?(I*'an6CnB6F1WI%@D=^h`4
%k1V1R9^.dWRUEJ?PZZ2<c\f80G"bQh(sIIeLuoJ;%Ho,E(lm>DC2"61<>efZngZa?8%1S(V^^BX;o`(l>4mN,oqbRKPZ=af_Ih21
%N@AA-oK`cA<9j0OS0b&NW`14h$#^t;c!t63;](hFAelL/[;=]"Ve*`LCt?"=/<4UlR#dI(4k6W6VcDKl=qTbtm80Ye4@3%[IUu2)
%<:)KV159PdX)8k]@n_;NE&58#0c/!<.lIT!ZV&'TMs,9a)!dg=Z9Y2gXN7><Q<3%mXFKpYo5VpeVl$lEZs*7W!Q(q`Qm(fkS(X;i
%6^UW<=e.IEQnkSaCegJH<m=7QK"%tLY*^C!:7Kq,2M9nX2R>D\#/<6:AolZ7@<^G<@Qr)gpXHWPJ_'"S2SlPRdoDJfV%f*?Pqb^(
%eP3b5L0Q3@4'IdmVQ_QBak/E36<Q$/6MABN.qO-`@\rF78'L2(6UF8gb"h#H>ik9hS92_tS?hU_D:MVkq_cRl9WpZX2cY"8!b89V
%=s[O8YR$qh$L3$C^'8Z#b.8p'nP3ncjQhlKglf$/,\^!8rg:n]l2*ir?h#0bl?gZWFVVZ?X>;S(8iR4bJQ&flCm>iKU9[Pt(dfnj
%XTf^j7c>fa'7ghR_UFB0g;pe\HfJgXK4@HsH@VJV*65dU_j_^XU3lu3Y*+`\2gCDToKD<;<Lr6ga''#5Nt$O&61,)O1>^QaTFTMT
%]@[iL's[)S\uo-C8#=bOY&jh;7HqAk?$RQC6J#N+$B@`FK3dVc_0_]In#9j"\ua5W>Zpbo3K'WR8K2HLZj\M55,J3?8]rQ@8ufpB
%9]]:(;rohLl5=YOCMGQO$3?_DPHKiFPC8pC<lVn1eq\5XQ8'G?385J9j-4sf-#8cWq=(Z?(ZV\nnJ#%RA?2k2IPth4P[Vi0NnM2H
%R\eI2qLt?3iMp3X?2k5I)?8n_@(WFRrsJ:]RC[":Itd[?e6Z5#a-lapWmrT5qOIM"Y'4?RFsh9EG@ILs-_%\T*[s/Tqm_<3[:o8g
%MZB1K!f!Ir_sqX[m%@VhnO$W:b;m/i@6RB<k[%/p]!9WQ?e\P^2km6oVfc`5U8WC9Slu^B]%/M%>,k1[1\TrF65jV.<_glM<#'rG
%m_8!#8NVn8lZ%s!Uf_d4bmGbGX:HZWe5ne4]2L_t4$?QV;bgUP(S6pR3*b.W,poC%7DD1)PT"0UO(#[:\04A-Y.P+&(5(1Z0:7f!
%p*I\X48UR1^NSD4h?]n1NSpel#c$[EJ83&-kaJh]?"I5<Z*AF&7*.I8=[5SoT9X4a`E(Y<n[VOiEu&`7I%7>mWE.j-B>s5P[LH(%
%PYpgCn'pci;>![OFhq<BS'YiATV)f+=lh3jAc\*km4)HS1`[u(,G5gXI$7qrM^Ph[o`al*`kJ6NF^q!XHiBHV]ABN^g7@B*h5R17
%SW;ue\M.(J*"K0n,^q]aJ%d-+n;>GV.3)Zk$g-K>I7`8[`]i^8ik]pgOD9!FVfjGLWcq@@$g'cYq?c;:7q"<:_L1i$biVci%j$GX
%4::\rU[X0:3+ZGp_Rd"uqOU2#([)[;<4c'o[6(Ki]i.p:0Gi$ObEu;\A;#Z#>i;TiRF5MuN*E9WL0]i>j'JqHZhXXdELOV;MKRsH
%PsbLR.tN#EO(rm=Vfnu!Wcq(8$g*;C:&;&eVf7njD'3S4Pp"YUNGf!3YGI@`K-f9n9A%lk]<kl5*iJ<s.TeX<=lYG*F5*jA!i^>j
%HYRa+WHoqg\mR.4D1h?uFG$7'fCIO7'Nl5BonGZNa;]/AP=OY5GVkFuGF4G4p*I,K)t0lf5M&W&hC58SSaNK5.AZ7"QKj(4E41Le
%3>f>E&X:%fl"B(3X*37UL9&Y5@<K"KOQ<F_%9Mr+EP[$kZi3,,X]:NancpUjeOd/1oi&KO8_#mkeHL#fD"/L`=mf+GZ>"^<';emT
%%HR3%)cdhVb47#E>-sk?(X0oKqjq!C7@<1#G7(t=$)Q@Hr2JKYV<XVIl@QQc2Y@&dLh:Lf!"rF:DS\cMLUk:FXoc5XW,e2*iR'Wr
%h-iLmg%Q2m<b5<+j^W_En`RX/V:qIGWnkdnlCG0EK"5hYf#0<:./Kjp)Ui#c`&_7f&dn*YP@`T%f*%\NSM/%jmr>qQVqACLZYF\k
%leYP.Uf-ST!7gM5;Y<daFhq>H8d,2!a58os?Uml:KUMZ:\g6SN3NA&"<HtmM34N?[cIqrV]2icLMs5"\JpJZ/C,\JXFsEBS2o;R0
%DkS[[Y<Sn*9@Eg,Ub//7@lh*;muN>*K)%B3hc&cC'jBKn^Xa@W<4e8[[2[du]ocBuGRI`$307DNCaU"s$!dE>);=hq8\h*UlsjEb
%Z!"4qc>RT<&Y/>3-gH'D>OA/1%:<o*;K'KPm7%f?DT#KH7V&pdSX=.-Xh3n72V6Q5l"`3+f7W7%St<-tjm**=EMgIJ`77'?prYAU
%76&icjA>5=3*#Dm<Yru6Y-e^B@Be86N3A0@1ELY0D./AB`h4[mi:r0HO%,Z,%eF\c^8K8a.^e(,hq(n4GEStL-^8@iP,`gU^:I])
%S;"MiO,(SPF'FjH5VYn6V"52tYiFG:FZTlP(scb'#qOlmFF?rACR&hKS3GL=X+ZM^,GKPuZBgX8&5j\%KKT%_Ldao^9Z<8&.Co#d
%SJCNW;\%>'_COt=rKEj^%uLqpqn1C&)u)eVe&'FM$(pF#q\.i81_&oPC:1*NesOR/CW;7H237$"q;dd:JYD;&V#C[l0W'l1.o.'N
%;-QWbo7FI@FAPb`>F's_Ics]Hj"6;Vh0`%4T4BBP-jk1XjMfO6%eF\G^8%:MDJZW`)nn1F`F$6M;]oXI=^6Re41KXb7qn_`E.p$3
%<2jHhCJA([=5&#jMRX5+Q6_)mBblB+3,^e=RXhAK:TYdP\K==#I?/=^So"<Z-=P5fNt_4-`N45mSJB/Uo6ZZ$DGX7,jEAOTFjI@A
%:,%JY`Dh7uCf:9agZH-m/rVANKjE+%BT+OV"i>6.hN4[6Yq]FAZ/_k(-faE6L\Wo>hbh^7G;`Y(CO91&9[fqfOqRpdc.+5(;QX@^
%'/iI^;DZ$2UuG"SL)7LVY1*Vabd<*M4n]bD@Tl.5*mbhbDPf;PH\AHh>c'Bk@QmQ=GEfDeNJ5sX["_$:"Nt[X=O`kF*6\_IRM2"C
%S?SqP@6'\gY%S2EKu^e0GOk^*Xkhlm?%Y5rT7^2=K(h6!hbh7*2r7]01FM7@*da@*3TWh2K[`BRN[?[j&5tTS-;P4O@AS=H(VGI#
%0r7K<Xq'3'AL\Gu7#>VRW[3_%Rb;pIFQ7,>e:<P1-gsY"N;5G;hbhF/2pPPToT/Ya.(!67>8u'e:'t.^/+OES;9cNLkdV-&2e]+8
%/Oihf3G>M,mK$Q)(WM3j6sLI3:rX"!GKRdmN8"/k]4eT3]'5-+X70X>h<ls=BC%_F=ma3q/!]h5'.mIS\!TSRUipZ!#%MDCI$p0f
%`mdhajVu:\QtiZ;e(ihA@4n)C;'f6LF]IPi8=L0#3>o5QX.l>j>V4@DERjjI-5b3t4K$>7bf;a@Nd=a<n^,F?K78ieD(Js\o&Pb9
%8RdRPikCW;`udf^<8BN<,c9M"P[L"E@kO9od1(E=+;T_BQ*^BYUu5e5np9Q\LTm<!",MYj$GgWD@PPIM@6VuiG8.I=NK[C<j^Y2o
%M\ol#n<A.:18ZlX)de4)W7&sl`fsZoqlpC-'2qo\*G_)JF2^g1A(fu$`Cr.!C"$OoR&O]!];5@^q(u%1Hg4e8>3g7,Rb[O'qP;L&
%OB`Z%&nNL*S">EbSiS,u`fsV/)STT3P\jhS64A/VA>^6@RN3YDNXh@[7lDHQ=5K%6RlhUm_P;*m]>K#dZL=c1X_OsNd`7S*piC(D
%oi"%J@Wh5J8Q<!p.;T)*'ijo\M(K?-AsI5EHbirH/,Ck<SdEX\B1qog0W"t_7]0j7glS;R=^HeP1F:Zgo5W'iVnf^?[0AcXk-A::
%kq=#UZ,Jg+_a,#AbWRX"<3aDi#/`_AHc95L9*K)jW+)0tTmI4R<@ef1isg34/AD7*<B-pdYF(Alp,s_)Me)-pW`X/nA![pFViZ,J
%18Z\Hp0"Y?Nu/5(RWct3VUin5DD.@bB=!6\&X"jE(+<et\eG.!UR'OoXH/Iq[>+dt!cSkqNMG5Kk2Vt[:Ru9dCt5dern`#<%^,fh
%#[>Lbf'eX'73,h8_%F,C,HTcC@4uj5?($3@0rJ6Qp;]jD3Sbcu\n-A@bl/F&a6EGlHIjY"qOAc]b=t+0!lqd@Xc-+DR`3\tEP^.I
%B.II+V.QuS_->P13mMjkT=/QHXm"2b%,L[->2;`@8EJRAKh3B<+Qp@"Z(CG+-gH%N?)qM:q>N*g+\r-C>sLPH?St:2'S%49_P%%r
%;"J,dRPZ<K_:WYp(8gqgC$*L]3I,+L:/G8@)7(=NOB%3t.8tL$;SCh+l3Zp!VS8tH[7[l2DBJ1/"D6$e)epbG5F&7=D*f&hr6A:\
%CB(e$)nV5t=$^W`gWnA+k!I\ihf4U7Pu=imKN[;AKJm9,p*0F.5#CVl@@$\DYP\8TisG0o]"Y)Re^qanlc8i8Z[Rrk<)bsP4R(!W
%$WKuGC($bX:SWB](.,6]mAe_ELEg#9bS+9_aKC$FoLBR*jXXiVR!>+2*:^4lW<eq8.q9IWd7h9&`I+2^n#:3t<>?Ira#[oM\5fpX
%WI2iO$&.:TJ=%6(YC$&?PH322-(!_K0F^9@eQ(']r!VYLZONfe6kGZQF=>-4fi*>WmZE`iitm%X8Jh^*)0caBE=C-"4<Zm_f^t=N
%f@=f_f<;<^i9#bP!Ydk5-_NeYJgg=n?5j4/LQ![\dS<&]"pIH^ZC83K\7-ND$8*^9\^>Rc%r.O"!+:-$mshtl)%LYn1=1YWAn?M9
%a(fD(1hY%Q)>fR8f8][YpbMbRL97Bg;>q8^S:kHXl_$QnX#T'b+#,'A79T^-2R]b<^9WXF"`pARb=1d(>*WDaA:C1Y(]G:`ZI>^"
%Q<YE[+7^md5">Ku7o#G4;t_L`XrI,;&GsLQ$h3<pNF4`E%\'I._a/Ft9QfP0Wl(j:_f/Em?4[pmMF'!:</9"'LZ+meCo08c#M!6=
%eR:G9%PO311\N*uXr@JG&#p,aO0BTd%Z>TPQ@m4d0os4mn2Mu]EEE\lLKD]RZh,In#EQc3*f&k8EELHFYT,b8Mg6;.K?)pco5W'i
%Uqh+c_=]gL6S=sFcdY;srLQL!e^h]j.u0PbE^8eFFCmCJ[LkRjhb&$g]G'-g=5e0Z]H<@1iP><cIe^hX1#JdGG`sbIO43bJ"g/g=
%XYIlqhE2P_.&huR09EK)0pP]7_@%M%<\PCh[PF]qCL;7Un.rGZll]]?N9<..6E(5!%bdt79aTT,7QlZfGGp<B(^IN3`5fFbOrDr3
%m8g=aCM*n1Z;t[QL"<E<WtcLM1DTWZA.<Lu@V]%NSl^YG@F]caH,<e,)KDW3ZX7L*7TLU>98D='47S20"(tdnHbecYCunZAY+d:M
%YF(C"od,<p)uHa'Q*40tYWAtPD'`jq-XR`i0GWle3Y.Hl2/#u;@i83u<PtX!)0=o@,;onC]"gZtbW+0mJDmGH[K@It[8C"MkcfoE
%n7WftmP#aGlq=?a2]c3QIBM6BliF.'),r4;)eU$e0GX;P;9"\uV3nT/Q8(g1Fl+'"@kO8\0]'`UaK6=mC\!$1*4;jXj%\<jUWQ_G
%Kh(1eG),lQB4"R(](+]N[=,0H(,o0]#bl',_)TW*dOB=iOptSSCI'cBF#2)sVAr7b\uqD.B19T>I;@Dsn:8V06*'*j!>i4N+lIra
%2X.SY4;tD\gihM?H"Y@!3Leo)n@GR0r!+ZDH##N7At)D)j&%Sd<&,DRP1cjufm&b*?8*2<;Vi=QP1cjufm&b*2O2M+UL^g4A2YJT
%ZPUj+.Jo]of;e-4TO\hmT\+UH+=a>?+ZRZ4d]&V_g]g1UOd-sO#A4oQN`EIYJ&+6e<p-=\6J!K;7c:Ao:-?&[R;7npBn1G/>9\^+
%]F'^31Y4/>j.(Nna_On!jlX:SO>6XaE3PQYAgnZ/QEnI\A])>^[[<n-3*==00c/-`r\YZHAW'^6L4c==0h^2=Y`p_O.2rb_Z<,8j
%3W#DBf;e-4Su""4mu,@'6ksk3"u-rn3YhNcH]0,RMX&n)Z8&3rX14SkcBnuPX!ku\=GXdQ>B:AnP:A8kMdid1W,e2*iR+OtiI^kb
%BAZY[>#eiSIBG4CX=_I*b2`-&[CKu)Sq?O4'T>9_]s%;O$*K_Q.EKYQq/sPYkfWhhO#c#O[6J8<bN]"ndk1IoA+mZF5#0`('YROI
%f9f*WDcREpm]$,p??IH],t910`ECK!>fQNIdm=mH<?jtI.dMAJ'lRMrY%*TI`#JAU8C9j[3+f]`FI[*-0r6A'6-^"LkZ[Hs-gH%.
%?E:*,Nc1TZXgoj-#t7U".8q+Zhl;+\[U<#$_r7[J1&AB5(\ils0Jui]NCM4D1Up!#0]VLT@Mq:QbU!23dK>>T>_"XQp1;eelZ&*%
%Vp;[W\n^qGli2^>.(4UJLe8sN@qd!B>mdLR,aMG-g^"NCN[dhM'r4rD&pqT&Ql92.*98a>5>B@X!E4B92e7jdm^p8;@QYQK[QD^R
%3W#C/f;e*SDt;N6]i5_Us(p)WSE6L,LG/5*+-NA*)^;>n&?;btr__#$jp(/iF5\\#fGLE#><0kD0N5I:<8WZSRW'4,`YaapQ/EJ&
%a#X$g3nLCsqOYX;7Wo0_U5=cU+e[8%ULb$576-N_hdfEKQ#;"N)K'fq:#]u5Qj:oGd#Z^,#@iq6)IV36)_`73R+>d+%EE.G+*qY0
%NSig\G),lMB?NC%>lD[-lYDL<l?$DAe'Y:d;d7nFg?Nd%$e*M*Re'b9S_l&E$X%HPSn$Ho8_2AuIct@mhMrL(TuZ@BlaWtc2`\J*
%@6RH;G>u*KeWn>0YK[A=(.nc[LJf!6Geoca.?u(9LQ![e;AgZ2B1t%Gaq1bD8'2%$$t@RoLu^^0Lk%2t,$to&&Fi,O+nA?Z$k\hq
%%.T5N3+^uEi9GO#>bBIg<q@cA]C00.hnsd04fmdm=EiZ?WkO8]i-T^b>Ne\?_Kt]7XQFk3&&*hLHk5PZpTU+T@6OB,?83P"lT8ic
%rPk)fHcCi:QWGc'(NBlIlJ%\O68TE\/X*A4j]/<h!FJ?aWP]W&F..&7>R4QG.(u.r#Fb;$+@Pu$X!,V?I0jShd.N6#hd;>!of,V%
%;9eAb?<j2BO)8QMM%`9s'l1q2dLfD-2-3qP+XC(J=0lnR$t_hQAP9*>D.P-K)ts#7dQAL_52QU[^CTqT$&9=07=:W)mjM`>)`t4L
%5GjM'P!0@V5l[(F49/FOO>V\hWU06pEMoO'X'=L"cY>gnQ/bW3'B2>Z[Z/=0bV^8B9+$A$emP(f#*("hFrXMnngZbh26FW&50hc(
%e?f"2+]f*2A+G4dAq>4d+093,Qk-'Ge]\9iDE_1QUbEla$86W3?"ot"_f!V"c'/kiB$+9$PV`3mPd?f--_ALT3Nng2e+F`HXa]<M
%ofZ5KY/LcsYi9$18LrmQA'1US"OFJ8@Mj#D4`pq60rFS8Mu$N!KsM)_Kbu@(8)nE-W=jr\p4g?g&NAdLEgBecd5\_n@6VuiG>u$I
%N>kr8mXokh'XafD,[7%"A1<ZKBbH5Ag-r;)Le*i;X-tDa:3[.P.;2E\OY#]g)/M?iAGL[>#+H)H=jWF8V1V>4MYT5;hbhng2b%'0
%'?SD".IFIi?h>cd?Puccjhml*@q_i6bLm`UR&[2f%m.$dba#Ne?cA[r<[Xhq]p(u'NZRprEC5b(nn>ZcEduWc=n<O&C!P<('X_!3
%<f.up/3RC9Geb5-&Q0^IV?5:AAKso\S+.4:'j#-!E5>c29)I4bY`u8%.2re`ZILL;j2"X%R\ag_=NXr)+(sndW`lH@l[+r'U_gbT
%+aIN5,3:?80[a(4YC@*!0k=8M6_oZP*3'[Bm1+3rX=rFOE;ZgcB1lp/0H@Kb*q;Uno["ptGnhB[UY?gOj.(Nn=_lQ)V-ZC;l(sih
%AI,ndAi2Nk&9^"VC;-+Pn%P4?*&`H,*B(*g$YRki#\,k4@3J<4U2Dd)U>6FLA92E4)oh?"5OF<7i&jc_pCsr7TiN3frmt1SA)Th$
%8^1b9YI&lL0k.)T]F%NG;bq[15r09&%t'EM6XeMELiUI>8P2>o1aR+sBH$_47Wqh)%MG%U*b]V&<NaD94S$2^IU)@`VsA]0>,t+C
%kOL@X9,3q*.%JNP\=2Na%q^)l`UXk'.C2.>ApFf%<Ll3U8$!@q29ku-lF)B4NsXK;[m-a-9Ci(Lj=cm]1\En2X]:tc3QkouP`RK_
%Y3uHk):r0$a+=r`ZE*l<<Q8U:!FG72[Sg=8GI]UF1BcBB=)0UE6]YMrYr5NDY,T$6qh"Q%;;Y<t>3/oEPA9-]SN6MiA,0#8:1Xjm
%as#4g*a*V:,\C(gN/"Eh4EnYHQs*-7(h5dUAL]d],;GNGlW.Gqlu=]E/C-FS0B4HjgC<$"9RT\_CXm*`oX-ldXF"Djs2-JgaA>@V
%k&[7..a:Zf*-Db<BE]8RZLTK$X7G$K=>:W'Q:@4BnNQ^\N3A0@'>:"o%`Ua0*8:dO,V^@"385J9j.(Nn-#;%EQ1:L5Hg<1cX[:m_
%2%)FFVQ:=qV7G'Tp8sEMbuKiC]g>thk?dJ3\T68B0T"2cEgAFfb\4VW-2.pjfPG:'[H,?&R<eNAo5W'iVjt/0[(^1p>mEr'hJ><u
%.S[2ur%2(X,(qFLWuo*unn-or<b[^siG[[j'6.$:>5]3-aB8pPhdt/'8aLs>Rk6:gG/J=1gp!hu$]cVu>@'e.43XT_gKme'\hW(L
%h]o3.!5h*%fM#6]%\ggPU;Cj\'ikt_L4cGoK"2M[!l/ad'ikt_L4cG/RA_eZ7"rlRL#F.(]O3oufU#REY23C?',?rJ@6Kts<\l\9
%#BRdtk(`P:DHP0=YTD!tYF#]-OWs,-gp!6X@6Kts<])h;#BRdtk(`P:DKnHpS?=LoB&36"IEpZ1g_sPRPpLZnCoqH`jg75ZaZ=#7
%Pr8MXX:/jSe[=)QMK\&p<HW+@W,8T6B^8MagJi#o%r0iGWn_o"jfWihZh,QoX;e>phnQ%6JJ[8>Y,:?\],HX+N:B9-bKQuFTqQKi
%1uepQr/`nm*TkMqE<ukc.?gnXdQl!tW:@8W_<.]qOB:C]Nc''.O&P`u's/FUXl-skIDm\63`/qgU3^[b!feaf$@OOI65QKLQniD#
%D%]cZV3S1ki^-aUF#^fUPP=%OqtYu"_](AgV/U[G/sq\5p*GEp)mc[9[J_X-E]SWVd+Ci!%\ff"n)A*t?'lK_3]LoKq.eGiHYBD4
%S60?f?>%8>@kN^ObA@[!V"G&`*ZfERZ0'j4L3R^nlKV3d<s_sedB#A&(%ZFb^8/VgA%<>sf3/YadB;W,'"3W02BS0f9pDmXW._:I
%KZs`Jm#&5l'tVqC:r675_WIU+[]'lt+-a!(Q*C(_KO#03-gF>3>W68!hc%C$4e>0`KZGUsWIA[/,DI0fV)EBF@gJuqSa&_[9#Qfn
%&SJ_n>khK#aW-7!A>Or23(O2iNnV[=a%Lt&(-Q9KQO$[Od5\_n@6RH>QdiK^]XFR7>,f;r>uQRV\SQ>E9lu88P<k-@X^^,1YDeZi
%`D-W.0c/!\fenVmCGj8_/N+X)@]R&Y-?4s'7Tj&_%W8OQbf;10P4I1`e^ip=@V,"M/6uY`e^W!NZDm/G,POt-,nORRC3aqYXDI0j
%,#q[^g$UOqb)XFR#E/?(-p'1a,n*<,5&3d'+\.g']IIrs25Nmt'B[c.mI.#lX^\D7^;j@.$Ua4?CrI,,65!;jF<>ZjMca:g,:qJZ
%W_b4caj_Qd_UBe,YJ%,*Q$ro,fWUr^?\<UeCXAmW5s4j*=RdH1k^2StX$S=cbrgWJT#HPRb3(ZcaquV,)Z*d:1PT59,sRg?(s4>f
%Cj26S>@YQj5c!1QQ%G-g>tp"2W4a#h#830=S^e(!>_P].k]VaW3+^uGe%,glr7<cZ<>F*33DJ%I;q3eu:fFdX<4*1ce5U9d<Gb*/
%2-&BIba#J1=CZ<M[]?F:!Ada19i]rXiDaYQ<GgdDVJ?![q)DsC;rCj@>2N7qK3j"#4s>*<X.Q8i(<E4RbB#SW)"OZ:qLQ=1@L0)l
%Ze]%BPSJ0I;K.W?.,.&pKJD^"dlIXj8F&Q'A)Rdq=5hQ('^()D3+^uGi*%F2WI1iH&;j,"b6jIJ(h"#&e;O#6;$`kiMKP'sTh#&1
%c0sg?ej<=_?@PZ2QD4=479_PAa(0(%h]L>H"nQ`.^8J3C.^hMgK/'_!KE$*Ps6YI;FuB0aKDTgLp[*V/p'#@\/$sm5lg8H<gBZp/
%C<kQ=j6^U$gBZX'$f9o+I8;k='l8<DG+/Z3Nd5:6l_Z3QUgT-2O\9uNP7Wd3k=f#<8B)KXVk3&mlj7SRWlq5H/9fo")]7Ve`qms%
%R&06c'CNgo,q?)aQ;;L<>Fk7)-gH'$=fYjZa0/VXJ63s!.\6E<Rg;s518WHoWlV,9[?a;T'M$91,$.'C`R4&_o>F\rI)4nME^6+1
%+?,Wh$0,9_gJs2^BK0N9%V5H=`);LQgE#G:P^Q=fCR&\sikMq9@S6^BS@Da"_K*'TURA?k-Y1Ask3AjZHN=DR_T]&NXHfa:3W7JZ
%?ee7Q`djFN".HY7pt8V3M96Zr1`I$30HV\-H\tq+7dG-_"b+0%lt,nj>)-0OjhcEC'G`21C%Wgj)h6#D:-X1GAQXCbjhfT4$u`Vb
%#MtKg4FUBN7uN:Oe&lo/,1n&/EH%rqGgG%0LRrLL>=\YNK)%*=PC#eGbPfa=o7?&<Q!Hs6qI$ajZVW)"In%R#0Bdm;[:tgrdaDEB
%XIWm(IbNl"QI7VI]YQap[Z#.m<]GumYC?n4(cZZ>mH6Y.!Vb*70KpOe4<7k=43Y`:qi9Brqd2On[cEml23$_T\qMiJi_Z4j=U<MR
%Ja`ELg7&KiK7&AQ<qe@#5OEK"m7E&A>MPLO\Ke4;8A%9X[,hN8NIPT3GNFV6+WROo&sj^0KS8&sE?D+H4)/$gJ)6a,48pr5>C-PO
%DY=gha8pIe7Ce>Ukua,#e7I:HSQgUpHZCm#T*FK>_O@2-Dn!5,GIrX0>P@)aik'6?bD/-!Y%qn#\bo:QQlN&LRr9*-e<+k[[GBh+
%cJ<[Y]*<JG]\CH+q0UVfMbA1iqQpTPX0d(&>tnXa]!R2@Xj9bHK=YAA/3V/FG)L^EDA@FtFYJ'&_chEop]3p_al6Sp^=?X2e+>L9
%0,Hk2#u0Z,KDRWNhbj#drsS"sl^]]fF/uW.Q;m+`P2U-2g8+.=Q\YT5l5VYkGrI,c]*oTtH!*_$UY?gO8m?VQ@$ER<s6Kp)#N3rK
%B"fhkJ:!_FVn?.,J>XXAG)Q5WD;S1l)mhb@>jl0?T3IqI,u021RmZArXE2ZF<`_9jNaaK"I@ddgn`?;@b9Pna=I:&g_Mk<jCA,7i
%m`O>i--]Qij.B9uGPP\F6iOa`ETD8YLYQj)TZ>/[I`T21e96cI3-X7W(3BM69?I](a3Um9`n0XG#5sm0Q<%h=h(7C5nlVf2fXMm@
%7.S)I&"&@0#32F_R)eKa_qQd2RChk46cM*KjBmdb31"Oa56.[n\`)]3_t\0MQV5qYNq%;_".ml?,4Ys4EULQ9;Du%sjP;d2/Y?7D
%nW_qP?`mcSC9+`6f)sNX=K.W"-];5gotT"\q6-"90G5lh9NY'/'IJa`\1;d67?Ljs?Y@&#GGBNcP3km2Y5Btc#U?<lI?2D&eXD[L
%4R@6m\;t_**@3N9^U3(X_;+rGl=-FsH"&DS"i.([p&HOg)7Dt^5p82+1:mdQ]"B^C0>lNrmRl:nrleko0[Li=b7?%q4$hcQ/jH.o
%m)Ol<WQPf$4+Z+'E?D+H4,R^(\kCa/IS=Cga5,/d#'<lA>7,ROY]>3jeB@@:ORcn=)$b/_KB?RsQsR:b%3m?,hPR%agbX05!YYc2
%7oE*q.s2M8i3ZV_]OsTMUPLp^Z^nA>(f0<fo^e(jbbo1@hblhb9?+(gQB//rYSlP3oDadR.%;%ZCP-^\LcNPTm7$^-#Hue,gNI[s
%F=rBkalmo'\oLi)M7H6BJq(plIYc*A%AO\.+AIet3Zi27<q/Q$I]=6'E$$IqC[,S+^25n,O"JbhM`U!Sd>_t-Je<3;4EtI.ClIYI
%7+jt^?PdCNNnWOi.b=jj\*>]g/*]a^0l=%&Zq_hV'":ksB!@iQ;k1efLX>`.1aK6E5:DPF9;q4npMo3,V2A<>N8&-H+'Y@g@KU?6
%-)3DgL`=H@fDXW#VYIPpk(X"3!gmf(UDBgj0!,),KQ<NI/ZuTRmUFZNL`&#B$cK':fmA,17']DiDV?Ss$s8J,@$qkd&9&1"&#b2B
%)q;orqj&.(3N(ZjHAGoQ/uf:h4r?C9PHE,"`XEEs@]f+#&qQ<2k.R@'?*]_>RU!qUBQlB'?#`s*-Bo._J'l%$cY,pUCskYse'Xc,
%<a:9f)0H,DfpZ`XN++PE1L_^`oe<@l`dOAgDlKG\F4)(9<k`uuFU!l&!koAuX1YU\fZsh0EB2=i8*"QJOHdRY4uZtcLK@@q5OGfO
%d1,Nd?$9$9\]YjZj"AY+HDL#VpIP]Vp_XMh+7ZahPE-bl$e=XNPV_afgjMg=XY+<H`\D?-*d:h=;UNC05`[PU5WH]kfVT"a7GDdC
%-Fa#Diuknl*A>9W[,s8LHU9iYf#q%1,9=g6'so;0g-3'/1+tg6ad6\i#:CV_BSSUkMY];Dhbl[S9=djNp!558d!fqmQ13C@/<d@l
%Pk8<X12%E'7\b2UK>q&#(7P_MGF0mpa'<Ql@Z.`ujfHW1AF)5K_(%XaK7*T4US`G2RDT8W&,>A_gj[1hS?["3R^FH`k4.:!\Q'MB
%LgqnGV4ii%(32&Es24AGS$);b6Q$Pg+*qnGR:b-.VZ-</!J.[@e<R?t-5_+/3UCba;sNtlcN??!e*0]7+$]-J]]fgS\`&8"N-V`&
%K_dZDhbl,n9:d_F4n:ba[U*>UQiBrZ?<LLn__:,VYd2/!XiQ9)*<^Lf2eiRjpu,;e5]+!?BANj?h>SUgQ;aEo*GN>'aeZS^/+pJ<
%oPJd):ZCq34JBlBDf?ermT\sfI7^rI*e%uq#(pJ@USY^DWZJFEH$j<*rAoUl`HFs34s25IRrJn[dZIML#@q(Q-_lqJ<nrtP&Y$2C
%6-S>oefMKeY4"VBgLaBqiE,O@5BQgZ?+5X[V1@C_?\]qAfG"3$pM'&M[hR*">OlYRs81H3bbr>70o\9h<V(+FrdX.]90-:?-#$!S
%jWXrkLK,sZ>#Lj@>VT$NLP3Q"9h&&=l,CHs#H/rh>G)?XSFcD[m[8]u)+Rg=+/"s:c"'0XgrF^;Nga+b-mjB<g_#7V0Qn^pc7gUt
%4<ucDCfDZ`P=)XAI12fT9Tu-/=$bq]9b+@oB@`)'7k^!WIO%t-A!7E'C+e(_97FZ.>FA`>nc=eAW9kApERqk!@$\!ZalpH>0Z.7e
%?f[;,L8qkafS6M:/Cbn7[-r:GL_Bn^->ThkeC;N7iCcE+m@6CGEEDR?2^Y5[2V)ar_URWK-'R0IZZo.4!KtR_m$&$hGO^6I8XK:d
%lP]G:m_5H,Q>\UD.=Z4+(15Il63i@B1h6NbjMf9T2JOR!CgYS"MGU:?j=l(PSQlHF,_rj5gm,OsO2W0INSLW1Vlp+c5VkE4\,.\n
%&(""qSI;E;FO<bpC:hH5S@n;=RcPL9AGOsQ!iMC;%>E$Q>1eqKlr4'YinQ*HoFcMPO=u?6IK;#7E$;$;q\JN%pWVGCB4N]2rG7;.
%%m],o)nRUbi3$oLgotY>:3S\>(i6,GK)7NOhbc5R(Y,>Ij0.sW&d83h2<R`>@;7,.O7b1'jsa!bYgFkpj=+R!Y`RJ[Kb-@eGe:q#
%a\.=^6+s_G3m#PU5ha1<G\-B<@%uRrDN!*S+7Oq1f"&VFS@n;=TB3+sdZ%9!k>l>7]TfNpj#DKXO4qO(^O;buP/B3&m*6tn-TNa=
%%<<W!P8rFsEED_^#c4b(L$q6Q%IaDPa\[B;?Q"6AG&g[Z7TK4M4%ZC<(ADh>^8$jWDo@iQL&X=,ntZ]TL1=4_-[B!L9k&9$Cuj[a
%*68sWCuj]3O?@Q.]>Zps(B?ln]dnEG#DX$7CX.I#P8,GeE7`[9^.@8jq#O8^W9kApEUpi=TU'NGPJ2H?[@Wh7^Huj@>1'WDKNo<c
%ETcK9Y:T25<=KsYS84o?j[*W%Xf:n$mRl?'1[rk#/^7)^ncOtGZMHq/nfcu1=B$:Fa;a-+NSk*L[GBh+:>U2ZeFJTH1<-N>-ddGn
%J9e^'V(eg[kqCZYSIbOl*Se[*^/\8h%c3.AS+.h1Q`-LGa2'F-.s"?$F(:"G'6Yc&krZZk&5S>dc?lk[#Dac!h";NQ(-b&H8Z;"l
%pM&d0G8/Qt<BZbjZK$#,2/GuQ<sr.@e@\+R(uWA(I:=ZaS`J@dCK+)uRWhR\j2+F=A(LYU2n1A`HOYNua70\gBm*8B+[Z/Ll<];a
%*uag9h3f<D-M``GX06TZH,Y3%]W\<7XW#>[_Uf9aK4JgMKqLMDh3Z7>Yr#2)..56s#T&Rl3?q%R]"AO$7h[L];:!JR3#+3!E\Vo(
%&siqJi)JV.<'NPT+A<BK^c-L2@1f(`1q14O-e-1Nqjt+IP&kE@?T[i"/_(7o7\&j("_GV<(.`q[9:F>D.Ff&!4tZ`PC:(tUQn^=G
%K$o$=YG`sg1]!+tkr9Hm2UBWgckZu2jS`D98Ea+Z"_DR0LPSfgmlG8E>7[;5mc2N>9i5bm:pqE/GPhYL#T^4lh"SO?OR',P+r#oE
%fMCdE#?g+qcJDWB,ZS.ViStd3b8"[FQ+X6:N\<?UU]4-I!e(DGhC]f=4?c"tg%VQej?p_,6Ec/4J&6W(]WWca>u[&ko^?e/`SRP:
%UcjQR(RqpE.a+Trd4,9O]=s696Ub\n,m+1;\8]YZ1R_bfJd_"']BCg6MZ42J*r;$:GK5J.UtXj852uli#GKn/EHcd9HpU/:\%%K?
%pGGCI<CZ5Xq=?K7@Y-YTe-G@FgUs0>ojrLcA(f1:Ws(=EjpGK+LQ/sZO?4#&:*irrQ+YeJ6Fl-L\8CV6pcilC-rVpu`#p]t@%pJf
%eUI&=i.@kcP#0mbmc3AV9i5cX;24kZ5.VUZ?pP5mFGa'(!m7TS`X'+!LQ/sG%Vi@*,E5_H(c9>\j++<ADRZPpF^#+qH_afu5Ki![
%d!%8q8bTPi9PN'lo"BPa*o@@3pXo`CET4^0TXLjL@s4L1k_Ro$B`ZAsk\QS8N9+%]e(Kk)3G>cg<<d3\dVY%[jOCG<MNC,EE4a"M
%Ze".qj+$+33Yf[Qk:AdHPc`/>@MLTi5KjU2EX^A#1mQ)46*s8AMYT5C?W0Eujclb*YI,+/is-(M'#ni)SL4QMPE1Q3in.SIWbp)h
%E_?>2E7W2;a=.G&h4_!I9sKaFrtenD^"eVYO`JSYXk*X>%qBW6IbNk,2uP'O,6Rr^nXEQr>>ZK?m;!&BX.D(*pTY2eS/l4q3u2PM
%@C/I=>_j+nR`DdmI/$^N2s(*WCD@:(J[Se4Q+#n%"4:W)p8/No_ta>O`orVokbJ;0,mQC-)W52A<;ruFc3<fRd\bXGc;l6&l03!.
%(;MS#laEPq31(&_+'$,(<5<!d]$#VP0c;ZWYu:mT76WNZoXaF_!sWm:#7RP:#TQPEm/9cf*)$[o%nbb1o&Bk%:&XE&Vu32'(k6mp
%0og21U1\Aj"?-gfdbdoeM*DhCMMO"0.">@\.XFRQhXQ2CV!](9TmI9hUoUd%_jFoUW`'DK2A+u(-0qRI4;q^%.>(BL0:7fAp)V,Y
%6.eUuM9PKE_NqH?8sT7j=Iiu-oFVOBVFW#0dhAuG\^bbsWfa(S@?[ajV!RBBF29sNG,4L*.nM]uKl29L9Gs\\oYI'*_Yb$a<*B<R
%N@SI1..t+&MYB)3hbc!.='#FapoAn)X<iTjRA6f48O+5u:a3<(**)^N;?On%*9@^C>Qr(k8%1S(KriCWjW,%q`G77Vg]oQA`l_`<
%PqdBEZ0=h$po,CUUCh.N_gIuZn#2A"Ynu*S=;cLHZCO<N/7_HE$^2ncHKjEkm/%Y0asg9]19-T#<V2#&7H4PmTksC3`Iu'hFQ!JJ
%4iDjW:"NE/8;nM=XR!UO-,u\lB=l'/S?hT3NKLNI=>G9kn1?1/Z&Jp0@F>85NSZPPh:VT%2Qk]LJmpHM]6oZGZq[oeeMb$?^_:#>
%pe$>:(QBDOY7#bG&-Jaf4oL(.Njt`B\_$2-?BC!5@)Uad0H[4Y4,RI>lU;mUef(0UCEWj`Z;%V+6ITP=';^K'aO54kZ`mhQoeH)T
%`aqt'c5kCBkec#/-MN3?=PN&6f2M4X.FpU'lRTo-Q!N51JhnNY4C#8Eq%qDu8c+N7(eM@),#eEnZ3uYUiAHLi\#iXTXnQ/g)S=[c
%@a.7\,#b$Q#%qO`iWA@<ZZlLV86[&R<RKTLXCIO&?9S?:p-(D=(upol%4;fo]MXLTE!4n_5T_B@4%`p(mAbs63IG]>ec%mpM>G'D
%K?e&KElJP^8.@SZ$_J>0Tdl2"6J<QK6,CY$m1+4]/Nfjb]R?8P?)&u"5%M5):Wam*YRC0)F23edilk>XPHZFMa8,Rl)Ar:],hZ#2
%f@F8&c:pU'(j_L]-?NX;a\uJ):K>g;ZmEj:3@]E9EZ%9'G,X[5HK$GYHU5FWh_LBk@+OY_33p(QDo`d<a/m@$1M^G<8W`<Dn7fW!
%GEfkXf2_J\C\ZW#X%?A<#R,RIFEJ&tUEdItQ:^R,V9UcTQ&aVP3\JPh.aCLW/*'%Je;BVS]%$D?!F"<W*XS$YS2VFmGX_>-kB+b>
%NO\Q,#11$A)>%pg^8'OR`\&,e[BCJ4F>]S>3cInjpBo>>N29J<BQc5f=+ZD@1l!%cc6g(19#p1:ErfQ;42/4u7tgZmUcpERLIe+b
%S\)(a,;nk74r6,BL_Jn=G/k?iERMS!i3fR)a.2L3CTf?7/BAD.a)i4=a6YTOWX,Lj$`@JX_1K[HN9]Ae6'?4jV)H^8>$'&aBi0,R
%SmoY%mC;R,J+U7(c18`a-"BIc9@Mq4j,GMtc]Pm@D0MY6PP.G1Y>sWHr7BM+K,:>X)`'hPjDABrM<,-[K\`"T)!&J##TT>9Hi1s]
%]F;YFBDfJo/u4KrcAN1q?$_m6jTj]X/Q0C!Raua/[l\Xb)g>qRB8^mJi6IFF;t`ANYD]p<qi<>DYTk(UV%,@jo-kVkI4J8T#5cD1
%].\Ql6Xo8KFaS2md$^hJX>Z'J@P3n!p"=TbOc39Wjrh3gHnjRocE%p,%.Jr>b$ira:q>fibW]lpH^q2+.=*RT7R-n5+'X)3q];db
%==n*fp<h721am7HF_,><Cu8_s"`$Sf$8JSd"p&2%]koF$$XNXSBIXMF?Kn*1Sf^'MFf]pfO/5[o=IXKpDa@hLjn'2ZS:1NfS@7l8
%I]YZNZ'b==!Xo3IfUBZceI])T*DH't>*2ae[_4N3j0<S-&`X_963=e<IA$5Z:QaT>ogi<Li(SCf;D9C6dWL.-'_6D;HY,d,/fidY
%*TARl6i2E&JD:X&rIk#,ESj[p>;_@LP4l.L(j>EOC&ehEZ'0\NQYci7okG3Cm)btgd),,u5i2&]lml2giJP1oQJr&Ys&8"GJ"!kB
%!GU:6&]jHtYpe+tNNWE*mk,R_&Jr[38c,(\fW&9eiuS.@C"X3/@.D]VLULYhj3`F!miFP=bO2U^bF!7Fb=1V!A(BBCilYB#e:M^M
%Yn\,,C?$CgKKV,+PDgEb+OkgsnLh58id^_58H"Y&O,/kGof_uO<P'*+qqM6HcTh6@oa]Z4AqXZb'05'3XZSuT91E,0+bbq9;f:6b
%Y])ljZP@*Z`ek2uGp]4N0+DT(]T]VF:(h([<t6]_a3*__aPY]YN?d</<%[PfIB@h7<8H`'?`Jm8ZB344P#YMjcmr-YG1]K">E:7<
%D^sL^<7tSS=2IiHqhn0DHi;DM/NVX,d+L=@fp797[]7IcK#Ltg3-df<S@J$eJ?>9Z%gm0u(Dj^m76:pFgFf:$AhN\EDS,m]\*FQJ
%]1:JA$gpVm>2t4%1sZ&t3EmMJO-[Dij6k<8f,T!S\2tC?!HQ#)S@n<iKO+5-hm;-mBe?n16KpE/-0q;,2&>R'=0s$'OC=hQ+k2,a
%jU\Cs7Cf.80YCd7M2Oc.3>@(2Mc5lX+R53sQ]fEoeZ,HTBG;$<U%CJ#K(V*%?W-m7pcYJm^1P<6NW9)CN6m`o2u0>*Tq_/<pW-3p
%!h3CSM>*an(,9o9CuY31dHqG8`)BX@6D1EAo42D^A&.`4NG@CkOD:Oed8rQcar$3%Z9?0aq)Dkk;Z41Q4m#q_Al4FG@0B`;j<"=^
%UT=thM2u,qjVKHaMsll?E`=L2X6@i2N)hIk6J32E<ldI3rre$1:eI-o#X[=kRXF))(ur/9SF=K)mr>eMV#5AqmT>qX>3cXM+m(K^
%M'%$iK0@kcb+_epR'Oc1Q7*ZY7`f=HS4'-nZ0_a6@B'THEL\=5V.u>6-rWC#<(r4^oqH).A!\%YAHLR9k2UQ38_NFLc`sp^[@W'Q
%,()Sb^/oM3oQkB,8VL0=[XE`&8'Fp\EXY0b:'&tnISou[XEY+W=UTkNYbX83b..)NQd,#;+GN3;jtbW4\Fd5]i\$UZZh5WPXr@Vd
%f)=4%QtUBp1:;NeXB3-akaq3u[8"O#_*I8h3NA&"<V0N)IT#luH/e2KF)rNP%([5_hC#RY*+*&m^)r.=ce-<\"Rf2'>=i:?2gCD4
%od*V@X(S3n]mS)%*%$G(:t3N[:U7CNXsWNI[2gV5't?`$+NMQ'0A"Q[;3(d]GRIF`Nij(<L!@`,M@^?P%`$H=\H3S4KORVDLdt'\
%r+3ioS>e.jE8;?fik+GjM_(B4JLOi!@N\1@QG6V'Qlg?J=#^Y[0VM%u.*3Cg.L6ZVouXjS/p+40A4Hn2PO=d2YN?*67gqE&%04BZ
%,\Gja6`Wrfcf!EEo%ZMmiB9oeqN<&SN?r(Rj_ITRPI:LDR]ee9o)^kuSca+bakJ/BPBK:>#J+e/f-"-@2B/r]fbO*Hf-[q5(j&2B
%i1_M@@_b[4YGA%&\7(Hpd\(=jZZno6qlgIjj.(NhII"n01&A)EMa\SX35/1^kKAsVOKpPqj:>+"$?H_,Pjo..#UYbAi(sibJsnAq
%g:^lHP`;i`it5KrWe/IIZg*B$@kfo\a>cV)>,_oc@b1r?%XQI35&Y\cI%7JqWG:6k0IC/Tf9TY).U3SiKL'Wb9[_K!RRF&\[+n3p
%A+:"&U,j.M4!+p7+@tkm`P(1]Cs?J'9''HZ>)+,oB+-Y,E`OQ,&jqX\K,.n9Mo6HI7,i$,R#eTH4dE.-)DV$^[FH$NLjGtZYFF)0
%i2_Ks/JN\EFD`CaKt=0?d$`?7*5lh3<.nbg(h:mZ$YN[tRq!N>h\'ai3+<CkD/WOX(iKYL(kSU9/9/THXWC(L#JA+AqP(:HP$CZT
%SG*G84tD;l&A2C_9"L&5Mp!=<)l%9<I#dZC\fQl/h91D52Mlm%N!?'C)=p8J/p=]8%Ap[)O@D@`=+H^Y\S1;_(coTLN<IR@O/%Cg
%:8kV3=3S]Fqjufu.R^@J')T(Z(O?0^ak+N`[)a"HA2#EN6Li[P,!=k<'W$@P7`j=-=$]1:b]iu:\Su^'0iL-sR^Ud47h!=da[N[Y
%Ys3aU>/]j:Zc76\(^F5ff[fPLq)E$E;rLpQLb4pRS]p*aKu--Wa0gnB`6-n7NG)'W4D!6G7`9=P&#%uu+1?t'@%MI+>R4O9(cO3(
%qfjW")+06?/WnCgWt+iKFOIDMi.J7mTgU_1UatTfKRHXYCJc;PT#U[+3Q;i,+tX(Y=!q2X@*j`A;Ep0kAOdrF1cC<HVsp%R>QspG
%8%1S(,A5&iK,lQIK@<L&bqQqR^iXYC*B3==_hAG;^(2s^MhCs^o?FsV50hjU<4Z*B,1b!\>C3WSf!l^_V$!OCjQsC;+-T&3_<.[o
%aAj3P*O>rM<WDR5hdZPFmC;jnm29nPCqqb.WY_4;fn-^7AN&=5Oi#R_@Gh#Po#JtBU'BrBI6i7NYOAH7Xnos*ZhCZC(]1C_PYu^\
%Xb\4:&X=pcdo'+uQ5Z8JJ#uCk/So:GfQMnVO>WAVMXOY4WNH8m0G%_M.u%2\9bBP$cjdf<$!q*51+p.4Yi7gjeFoJ3f.&ol3S0<D
%\[(L(rBVkO<%1J6XIea=Wg&3eTa>+V=d?:S%8KXbMR[V*H4M!KZ<;=U^J=anS-`"?$gjVo@.=Fu.2rc3\0=,^f(Tlh<qYGGKX0__
%$T<$S8@GNK/Iq)@ZWV@GKlc3XJse,@Jn\V>_*%6f*Fs:M'ofG>V$5("Rl+:$?`EqFb$8Y+NmJ2N0:7f!p,tjI<Hn4(?eUH&>$d-k
%?-o0pTh.oc2m8!2A!*/T^L"=G+MRCY;g(^-m1+8ID=Y342;.*i-b5]C\C;LYiVfiN/%fNLpN],ml_$6X_t1h!)>/"+^8Kb/OW<NK
%o!d1TkQ<YB%:UsBj9uIj!tr"h,MOMIg(["_ljCH(/22t@CRA\8FMU$m(1p(mM0#EWKl^@dTg@uGaph?L?KbB6?Ao`?cZ&:Vh;9V?
%<'g<`mr>AAUXU$]`e`;rXCr0mUnWc0d.1sB1`$#]+4PHL'p00GTd<dd.#OX*QGZZ<]G")speNB^5Sh5Xe&\i3GROM@^(J'P/kSJH
%f#Z:V1<"KdrjofS$eF>XI7J!%>R_9dG2ZZ3!3DuhgS:+.j>VD'p+DqhC.!q;QH0'R[Nu8L,L9'2`)*Rq=0r&s,EC*#HgK2C=H5Yi
%m[aSK`<-jQB3aASWZ&jMS$u&]5cPj7TKUTJGEfDMN<Nc/,lQ;s<Fe18:MF-W,54HK+\/qIRuQ<F'H1Ua+SI=#JDh>*OTeoEq$Z,;
%W/6CtM?SBh2P(IiLF<uVQ()>7=t1#p<&qhJH%cM3a/G>O/U3=Toc6K&E+=;UrgS;9S'1R2c`!p4Q=heQd7Orn*<tUj?piiRFahp1
%)IG-[P=<ea3FI)_47RDDoipV3Qp1!i+(kT,/JbA'0s!dF%@^t>)2=QlSQo*,>Yp]a$fL&5I7NBKgmB.C3S2;H%H9K,V5DmRmo'$N
%q]LR!'oXmeClFPP%m$h?3rWFsVo%G0BlsVBE"sBG,,L#R.H?V2eTjo,!RgWD(7JMCWY]YO7M7N6+'aGr)P_Vb"n6N7^8#EXY$Qmd
%&$C@s,m>f:#7dK-CD?X?+<fPDU[Soih0gD2:KWMnAU48](5'IJ]Y"69\6?o(2s#NLCMNqb&R&5%6Oq;/&YQ^DhcIY0$\W<b:`S8n
%GY^-'^S>NYD@@#q(Z*2s"#sV@e'4<$Tq`7.WJ=lj,hF9$3CDM5LB0PeBrkg;!HaXfc<)HS-C:dC&GhdEerX;a"OGNe<]DT[[YCp*
%GPZP,?@sWb8_WP9n8Xc.UKSCMC^nc:pKQs_Z0j6C5s^#kLGmL98dM8":qN!Q;Vh,::\5UWPKu(.)f'eVs/I!I>Q@Q)`NMY"#X`NG
%ROqt5OeY7nEJMo\c/9-c;c4_(pHW*=GIZQo:=XPfWPXXi+gs^$`mdss'DFebjh-dQ&ji7X[=)h',^tJ"fm+tC*YbU?O!TQ`/q=2(
%U>B)<4IBYhT*6s&=\KE3O_1[>D9"mt__u`4a86NR(YPIBdbj^!pc):2;4%\L<e_jBI]P0`d/aMf;O@E`R`,c>15%bc>6U![(=>hs
%1;7-kYu,rZH9^dZF?qu#20YkVYt?)He'fe>-TpK5mHuaUm,M:jff5_<H^)Xmi$j-d:GbOPg:H9,cI;MeV,k:fi9eRR#WVgC^%hSd
%KIL-q)'RO^P:96nL]ti)>;[]$29>O=pd_<("[$c^dc;8)5#r>Ai_[f)&.=M,:#UfGa\W@K4^kue]EVi]0rc+=!IUE=0.KaL8TfF[
%fI7OTq5giXZB*b8+KMMD,<M_,gEg;7Xe5u$J!n%f.IsfTUfYJJ>G6ShPkDR0<N7,KU=g'A0Ej46bb<o%P_-S@S]YTUAh8#$53;qA
%3*Y9=W*4=qj884Rm=`j%U,`MX1<t:>Wb`]LB^r*?2R0mj+=T^*TrBVKk3jV=qgr]m>nIT`*?^m_/n$$^gpJ_=6E"A2._-9l!XIiE
%8EIsMd(j;)"HO9C[9iAEBBsnZ<NAHjk-#e/`L%T;GRF:V&PH55-%n[*$qK.)*+>U/E3,i,p`Fs'9PGX^lp^:KYE1-CB(X:?eFWL9
%h2=&*Z'^,4E/\F&k&nlm+;&G$O#gSlr#ul-*8Krn+"-E%C0%B%YRSHuCP=Y0-$);Lq/A_.Hu1,!R3FcZiSupg/<gD5Y#[(J[8\R?
%ZOT/8]G"F8*g9j=#snuoM?"Vp+UGZc8U6T`6ElD9.Mi:5j(COh::SAGeckM^VS8s;<ECtY'Y_?%e.N]"gb<S<TdWt[6@`\U'G7)c
%3!F?s?FW%F9a#mnr9Xi9+=m#ck8Fdb^1_Zl"l[O_aO"\@JlE3^(M%RZ)F2:a^W*1?jt9`NL\X!^iNM5+WXHb-NGgDTINgh4.#C\>
%X7)cXc+AjUd"c$lLfgWb/_K+;7B@<81KhbZE&'Hr7'+nB<]%+N,1^`i8lOcQ@3&ULe28<^X;ACeRJNN/eZ'#TTRrF=XVpA<]"ULr
%JhZJO</tYQ$CRJ'\c1+K'r&M.%D0KJM$e%LOatE><W*FcrcK*LFoM^PXti^VI8f=trR\3&O&P^7[B!:Apd)5f\5u,hnM<OtJF08i
%.D/;2)-=j3-<^LH6^>sS'.k:r[l_Ma>?_C&-=U2r,g3_?:/p3!+(SD(Lu[WjlhK""8YF84SqF?g6?[*6d;$:II%7G0WF2ik^c2Vs
%Z1SiVJ[<jJbSF&i_!Y$qi6GF"`lEoOAjFE<9i9%bVCEcR95PKX,@/>X'KmpqXoH?aMNo7nE0[G$5c=!#IF-mD,F930/`=6oGckp)
%10;Q;anhSaejTh2TU5Ef>>\?iG:<=^V8OYj)QG'**irA-rjbQj2o$u0e1lG`8.ApfQ2_$V^t(4U'7@-4PKb`8/'8&60K:KT.N,[3
%4jDfh>icS\'*kuc]Z7#JOs8K-HSDgf8ZW+lH7WOZ-d=#[@mk6"q79'd53SkO!@X-5kc!Gl#cBr`U0hlbluX8J<h/CFEb9H!T5ZKQ
%lG"sp1,]Jk8iB*Uh"WG5K_dn\X1Shsj6V.bdH\_a0Z9"mXraqg=\3K,e2KI5$0gT=KE-Y!$u,U:a0*cd"X2\&ZP%#l3t`9_=fN!S
%W5nl^7RuDQ(`\ceq4_oIXp&-JdGbd$'*kuc]Z5m*P'YZL`Lq,k4(+=nJA8*O?^5-%`CWTN5<X1F7Xtd/q%r,E._D\qYo&FGN:2@B
%Ah*1(.N8Z9&M&Y@`Cho,T\PIf):aZMKrO&WB[.ON%Gp,=I7^-tc<\f;DcKgm1Mfq$q3nD^#>Z4(E7]NGH(hG$p#e4$3=-kd"2]6#
%3cd-4<&o\3KDu3"G(iMBoPLOK/+dufZ1.5dT7oYe($fjc^8*f4B.)osa7`?7qWWW31umnabUHjbW9f+7L,K?PmcT6<kfJ_oW]brM
%2gAtu]$_L^HK.H_b0nZ-GSq,T%QF:-mh(N^;-Ifl]dTrc5ktZ,N46"g1Z$SSoe3:;h)PeQoWb"'d$"5>W1IL+*FUEb](S#7P0-Kc
%M".RM:=9n>F92$>,B^ga1,\te+#:mV<.SEP@!b:U$!+69%]>sO@&o^iinu/%%kb[SEH&P+H^q&gWCpNf"C:KpA)2TqqEiM-ct+ls
%.7$9=p/Pbl@0f;.C;QRl,btHKkf02MhO1?*+e=<r8lX[N_%'7RD;ULb_pXL@pjG8c*M$NA*[g2F.T/5)JZbo3M>jd27^#eTo\^/e
%N^cJpkgN##=D9"5lq`%\;e8A7^SE[*"maB.[^LiWO-8gYj>^`)OSi8=bM8nu,p[t`Y-<^?S!$#%H?m>RS>7g;6JWI_qUWD-q&?sr
%`I!L)W]IEqP,dEs=<L$m3/+f'#U.&@A&(B/E=dfH?h(QpFiHKVeYNCR[-a'#/_H:.;hKW5APe3:F+uIojqL.tJf-t3]!0B9G(]NK
%;.!4P]!2S&+e>ek2:dp>d2NlXc'9OtjE3n8h9h.,/;bSF.p9<P;NVN*]r7Fg/)$,`A$#k3-j4iF90T0gE$dnOD<\Q/J/f;M^FU&T
%!a"<Gq)gs>W[lf`,^iJUBiY&LZ&\e8$Hc!n#BIA8G,RaU&JiOSXEZq=_t"?!G7O":Kr$"fPj)=.rdo?kBgu`7N4H2c-VqqCp_L'O
%i8CKoL!k4LhW8D1R@L=?cc!Ze#4HQ/^8MOL\usWV[<hh^b`2(28EG*g(ei0edX/1@QT'(@.?eMYg,*@Il/q/>12t&k1H!Z;1?D'8
%3D0GhSB.H#hoM`U]W+Z-+o613FMO.?.>@^Q"(cp="A@Ta]Z6H:SjLpVo?5\[O"I,G,`frp3%HA2X//?'8360==b.A:+]Nnbcd8G\
%0=jEs__4F4p-7T.RHd8-Kd+i)nR!AK+-Z\T&29>#He2#@+1kNhI!*)SfcSqTMZ_mpof,P#;hJ9(IAQ"CFeZeqHgHm;\Cs8GN\[EP
%?BKkefOIDWWEo#A*Yk5D&^n*@Ft95WnW"Rm"pE?adopHSR4sON,3u:U-lZWG30m'`AF>g19+IDNs7D;s1^<>q39*.seFuq;<`S&P
%@stEt("^bCe\NsNmJF]K.\X<d[;900Um8lNcUlXmr?pDlHo10<7JI&Tbgc!*U^/W`aOtN!O-VNDKr?Xdh'a;3]Ap#D^Np]gM=L9B
%#PAifI$^t`$f9?+%I^8cXfB+$^LimsUdk_;GUbp0N=iO=VEQT35&F5GMT5XDHj07MHFcG63=;bL(n/<?,if)Y?$9CNG1rhY[$^..
%mAeVMlZ%6bVZbON"4b_S:=6Hc^8D55e3Qlb#P6G2:PK,?<1[B12!$ORe.q;b:ZPT%TcQm+ObVhJHE^(3[Y>=X_(ZTq*R:Yi]@7S]
%EIPX"qQrlh^1Wah)C7F4;h!okpg-H-@%:j:A^i+ic).N=)JCl])XY]Drd-0LR@t@mPYLQ?KV;l0#;_3;D*eimA,5_a^Si-KCL>_D
%D+/fAU[KWqXdZpXAbq^.H5_9D?UaGGMmuLtFR8U*]^i]T1+mN+)fn:nkVst9jX#$+CN=+aJp1g@_En/C3`7r*pS)PZ-2NZDVkO;2
%1hHG$?gqmN^+lf]/GPpi9<&3+i&sibpCs6#X^6hFA"G)f(l=s7oZm;t=*,X!Ot1UW]qG+6NT-^GIEE4Va<Slbj^+@Q:sOl0Y4=El
%Y>YO#Q)ee-!'0_$]VTiZ#BKY+8Tmr9>C.hjhfYN/\KF)]f(W.;/n2L2rPohOH^Eeq-e*:qadH*"(1Aa0H.ntD'oAX9CL+QG\fe8F
%mM5,([UL9pMo"IhTZ!uZ3BB-KBhSV$,n*<:L:N(/d2kgR_^\aHd5\_n@6RH?G8-k4e\9@X/]$G-4ha@upu"$/S:\#)`@c(A/7\PA
%q:^h5N%)R64(HU($Y+TVU@=(0gel`SBRG(;L80(4(:33.3P*>-nL?X>8%1S(`u4c7_Gn1:q2NMo`ro:2DmCgFdiR/l-\K"K[*QoM
%=aFROT0;#ikJe*CqXGkK_0a!\;)V%QeVXS0lGX+QHMFTD``fWnCUREonmC3T6!7NJ8$c6t=3S]6qi3F3]^b^=E!61\B3?LV5@3]u
%36R[YH=>tf@lj#m=,aJEC!B_'cCQa,cBd06#EuTg!_c(E.DTn%D]"+f]OA5Y<3FDEGVkFuGF4G4p)OmKG[p;GCAl^1!WLg:F[Dic
%YKgjB+oV$aRnD!?g?piCGE*j&q-5f>*3g9R-A\>B:-.HJ4EWLf6rL3r]GD7k"rU@*nesVe/nr$78%b`[)W+DmMDtN`'eR6d7T)e?
%X#T25;N.H2Br+n*I0V!mj.<SNlQi>b?`Z/X4lItdoc:f.dV(+&<H^G3<;CO`Q;rr@i+7#ZQNpSXkJu!;%eF\O^8#idD_1lkXrf_u
%c#q<6HIF4E-CME=X^98HW\`7@XE#`g)k76*711+Y6CRM2ajq-\M64!^FVl)t0'^jhb%(/rds]c01Q5L!OM-T&>Bs5GT;s:8(%ZFR
%^8$i+Y;Umoh>+<J()Q_YME9'rh->Q:*b*4V#4\urLbTqFP-C.^7o6'l^S'2h_f^]=-sI\sdFP5cIN9^90.7gigP([B@>i`aAZV5V
%n6d6lmN<TaloXK9n](.G`NM.mihAQN*>7]6-tcSs=A#=OY?-@KMt.dD)"FT0$<maHXNtV5(\SlP1ZZF*1qq9rk]!Qe+&P'/:'$'$
%HFk0'L]G%.X29MZ,!6]4[l_[O)>fEq=1iPPo:^S*#)JPiR-&MUp7`?R*q,lBFP0=Lr6l7).KN2+ne-99+f&tIp/Sjo/qa\os/=`m
%bNYsY9m-B/&r#"f:'ta<NFK[X>)fc!-rK9ck+poDq)Dg?;<*NmrdVbnNuc!p*YQbWcpeOPONL\Fo\8u'@_9Q8k4@#%G;+2n9aprg
%V:ZOR`)n\D;]$Jf;+\%cYGX!2JCBhlB+/KJeY$DpRUW$sKEj;GW[m/jN."KQl_4h.D#)eZ$a$=1&hgprFXnt69[g];B9$OsGJ5KG
%s*;apKQQbUD<BJ,jMKOf$UfGX/Bd+1ia?R@P>\,oE3ku:r!:^63p:`</;eEZ*fQlK*TZ7>I8PQ2oiUV[@gt!!s-[QW#ApK0XMT2m
%0obq5hfh?Wpr]I$?^>lL*LbM\`5s[?Adg^f/rWNWp4BN0'%h]p4]SgR8Le)dm5"C_TG04W/RB`0KEo[M@(eljcIhm@[oTWh=9O"F
%1OtH2Sm@'8:0"D=/4*P/fsFZ&Ym+t<<7QlGdL`h/n^hGYZR<8:X9#W+Oa;qoG8XYFkhH6E@*!E_;%pm"<Q:9&]EE8kRc`\k"SXlO
%hc&!-japtWnL_'SmablB%=OitUMtsK0g59ng>#7.`Lpq?E+#?*,URuc''fn8E7MMQW:?WiqEOPAhUEV2g!r"PGRoA"5r2oh$cIr)
%14BaB-Lqi2dtCHa.<)Dp_,B+0)QnWt<2@r=:DL$?/7VlP'fT'lBO'T#EUBWC9tSF<$@-*^W`"9%<Nb.WY%^tJ16YZ!)L%T";a)hN
%K:1$X$McYkhc&Q=jb)G(](QW;LEMn/B")N(X8_1hWeRPZ^K&dl&0BV-06dk/l)*_V?E<:oNdo*sC"9:cO%u`b[G%Q)1oo.Wi8\'j
%:PET7&q8/A<P%X!HKr>h>cGlug@6UjWTf%*T37qa6SH#D:#Xt:[dZ,hSHWl1],\gWo4j'[K4q9ZR2IFnjt%a0F%g;j99AH%ELI(!
%EK\&6W7=q8e`8sG*LMQ\_(-3dWudAnn2!@[Q+pRHc7.o^>bjM)#JnM)p3\PtZX6u-(7r*nA$@XeCn,=W:C,gCn.jaG>`kXgU8TcE
%74-k2`r>Ic/)]G]I8;S5Pnf<Da1%MB5bCpY*c:P>*>d*%e9'Ir[O[CcrEZQ$[#oKD_s8WbISi#b08Kk9Nj4^)+V+.M:F]U\%r,JT
%=6=kGpfI%#ofBV*(lq+Qm0<*#ZG*5u[7Ufi?Jf\+[JdN$]_L]E*/q!'ZT`%1a(V`X-b:S(24mVNiFd_B-naTMG(Y)&CX,+A$<WKC
%j<.)d&0nJ]QMPtj;JK4]L#ZO?fsOB[H"#"DhN'JTj,AC^+mU=*%-'S*\!C&9(&^7L`)&*X?%C4ITo8MKdK1/Lg5*_B:]5Y)j]B-?
%q.6[R>qh?2JXf+fMo"]OaQn?_/I%=R(/:`1`ONE$7lP]M?:B-Je6:E,o5W3mUm?.C"cP$]CI[7HYm2R)4nbC>$"1d9H;cU`;<rM=
%p-FO-f=nCe60ZJp[J*T'i!"0FCr#dkUVVl&+>@^'":=@(J_O1P`A\^Jkj-W@#p-.53,`uWH^q,iWFB-r!`S@@o!:YhCC0l8F:"md
%Z@t1;[>5u5ef$\4=MhM8c@&9TctO4+P$%W.PtYI;(UC@*0/S408Zrt,GG0a5md5Q#G+]$I?"$Po,4K_[Kcf^lL9Hu*1\N-fX;eL]
%4=3^nUMLtfMW(-b:'G2HM_e`27Tma<nC-O!TIaUCqNF8I=3M=h,E;ps%f2bRTq`WJ(0P(rT#0h/Lq^^8+\+J:1gYl+$eeVUMYT)?
%o1LQ:2m.]X\W<;+Ka/]G$.4AYlOdtj'?VJU=^UF8(f\jVLn9'14meqc`SG8-(NkFT_-ACXdHVa0^sYh5b!rQUJls&/o,U-'GA%CF
%Wg)UFGdO9Ki3/N/;t_L`XW&Y()Y1pD%:IupKbd(&h!J1c18\nq82KLQ1oc5uDcRBVkCT'jJ2PZKGK*l9bN"9noMof8jp)\/1])+K
%*PmS$gi/4p%Il?98HBpXqJTUn+/eHu.U+itK$Ad].i,H^+U_'.-PaXq'jrLtr;3LrZ'rTfqQn0Z38^?<(Iu96p"Bf96<T("glM^U
%m1rL[UEb/`dqbFe^#N4>jqaD_FhCGY.apE/ca8/@I%7JqWH6m?$b!;CrZ#Kjab`nYm_^Pd):Qe_k.+;a0bqk2ju._;/Us2k(-UGs
%_)tR1U7!?\C`i:F?s:dF0H@KE,^HrZCcYPBP9Y?:)Fq7ubf;10P(M<9C!cPC<V/;o7b<Q#p*D``n)<Z#VRN1e$t;mD^oSLRpj167
%/[/"TSM:r'ZF$'or._VF;HDS_E-fM2YNRiK@0eg?\f#@9ZFgO*`mO/`o5VpeV!N6a46QlG5"Ab\]u821g0lLC):R\CSM.f%`_ZY]
%m>_Xu18\u_3b_nT(Ws`]<cf/u<0d&_BRu;di[n"HhY264iJ.u,B3j5b#;*)NPaf;`*B@Ol:>(u`]l"eqa+'V_/\`tETS=!5J?g`a
%@JP\GQ@J0Oi*#coq5MA_5dGo9<FUafX*PLc0c.uY3#Ent]Rp,`.2sG8N=^lG^B#b;@#,@kn2177TId:(d$q(A_A2Z^b.ae=[;$1=
%CgUCqq7eY8m*t@o(6_U]1!Ta(:0ZZiL_q$qkHuheTIaU,#q#&SH,2U?f#saS%/QnS$IL'(A.]j9O[KsAE/"r`jQIqO`iJTBG/Ed,
%q)Dqm<;]ogLEV+`q;qVXr).7s(U[3M(I5o\!E<Q/0ShIN!qhedLT_h0q?f-]W32KqALiM`R!r)rCTNX0FhSjs2ej=/VW-4t5[hAC
%#FrgpqOV`Z7:tc[f@F/&%#h50$Zre6I&ge7klFoY/1R_&&OU3`K/+`aM<QH+[>3ZDF5^eIoG>a3CWaa.iK,`?%tro?hCs<O'uh_u
%S%Lqt$BN3Sm1/`%b*Mdd]2lo0R*0tr^#_Z48s_aW`YK</\q;]FW5/jI"'(;C6lAX=5uYe+GRI_)ATbU?(1a9>'l$+"`b(@QqK@t?
%(6cbL>oL?74\jN$'Y.8@iV0.QB$]`QG-@KdY9W`G^K5?.YPqr)lKS()@Xi?E]j`U1V6R'cR(dldI2tO7fY0,/_q`caN*e`=?P>'L
%X^A9!O&Pa87BTX*pc7qIcOMD+M!pu)eL8UCHD^IJP[t7F_5?<FfF9$Zh-as9#^]$'&_?KNTK$Z8C4&`.&B'S@,*V%(@?D/`.^*6d
%!LlM2BTFtB4ghClBK2CV[DgZ5oRY`3:okR>-,q^Pg$6RK*7NiHeRG;lBO0ulaOGgNcuaYVAr$OpladakrjkUX2_S[,`acpW?H+mK
%H$BeHIC,NUi&sibpJeM#Z!iRP@k0)GrbI,qi#k`PU5fa%DLoog/pNU'"E>1K[aQ/ZLJ.N\q3rno6<.\'l<i[;WA6>VfQ3amEM%;^
%#R5`!V\Gm<'qmkiecPP):#AmglDk6XQkFh-VA\NrF9.>$`Bo1W0:KVVeuKp.JlsUP"cHBcJm8JM?rAN,/*=]JNs<YO#4dH!5N+]a
%+3FT7iHUHLnW3P[[_Gulrh4dQ9p75tO&Pa8<NK2=kZmr9q?lCai)`W'5jbf\b-I!F4Tj6ZRV,sbIkC)?en#9u,$ZHaKK79CH:C&\
%(2$cXMV.H9DIomt0k"lZJYOc\+c^B1Mj:QI`-=20T<*j01\Nt#XGbr^p$f*V<H.M79HV%mqap!l`L)fPq(frj'LFhg<a!QJ(gA,[
%8C6\K(;'`N0fGU`EA6^c'd.2Q5S/t@h,8s[)pD`4ieke9<Hp'TDKhJ/e+F^bXE60PN$WkQB.!W1^-YkXj&!"(+]+AiDLir8,7nA]
%$5PWC*GD8]6mYBom1+2GCiiBF#@1(jDA_H]$t,gqhJQH,(F-gPWn:#Uc/?uAQVE#]k2VDK7l`*U(`B4?0f_2@>K>D1H3!)<N#c=B
%ZbV_T\[fSLiODf@^5cc+(AkpM/E`Vo(:H7@]N,qcLm'SZdTDckf!'ptbrb9!EArn->BpskL9AgLI`?c(Xn<^"XE<W6(uiTK[QlKh
%Rt=Bg<`uVe=c^KX$IkYI+=q#9s%;LDgUtH]+4RGn=3M=jj-X]#oW\Ag(:mA/7q7(tC9cN=#]F]0d8t7>jWPL(QOh2UG/ATrY4&<%
%V*"RknRqkA>=X/7Pj#MUK!D_k>fABNjdBFr8tE7Pmpe/^qQX-8$c8EGJj!TrCuoAK%&R!H\dS\N+EBn4pW_:l-cC#BXKM&D*FPm<
%+?@$h@6RH>GLWtINLO?jl!sGWpi?\-_UAt@l&#k^.hP.n=4J!+'Ojak_/A/N:1>USK,W!A0c/+^oIMC=UAEf-ZQd#u?>Kss^*MoL
%:p:J(`Z<tgYJR&o;*SEN'B\>FI7Ij!h,kTHP!3Ij`t_Aj'2WuVb-i'6MiceHU!+B"A%E)W@"^s>2o6Kr`:eknco$J#A$LoU)^$FP
%C(//@rd*'B2]GCqm^M2T`^Q+/Nkt\]3$CI\eot*&dZ(#1_tW$Na@[sBg&]2=q%!AS6r$9'\2f&7/K?>HMmgX@3eq`Bemp?gY*]T,
%*I8`;oZ4hW\h]T=@kn2GXuE+la1jJZ0;D-B?BlZhn$^iU@Qr)jGEf\ee^JIg8&sro3R/s.s3K]=)N;"]BcX-!!aMNGL??g0Xh=G<
%ME3GjM80kt`*$hd3>S/D7\l>i9S\1nh2;#c\B;DuD;,]U.61HnQZamni&sieGEfYdNM3%ej]e!Qr3=ZE'$@jdZ;(XV`3]tIPH+t_
%ouhLm)iHJi1a:/-W@,?4W8iqs_83@MrOYA.#kLIJ^hX7"[hL$X^r`NqPulqL34dpS50h`'Pdo/$S)Kb/J#p,fCaUB_@IFo$ZB_VP
%+lM['cZY6jolJhn)iS>:;'9ke43WDb0giO0R3rt0rWs!]2#tNk]jXL8n:p):JOea#GVkFuGF4G4p-!Q$<EnYl;80KuJfMR_/l)p2
%`sSF^9`p#Y/Zd586g864R%6`W`.kL2*aJ4N])"6a@khJg[KWFAF>/*[JZiVM2A@d`qC[eec;CDgYDP;!ODQ;R@QmQ=(DXJ]_q<I&
%B"uG>:tPiu$.)>7PlT,q`6e%B]eHo\&^t#^$WnH6KSZ</1je13k)$E(:/r2YJ\J))(Cm^gdL!fg]qHB\2[TsR]#h"kX70dBh<lth
%k%oB?WGC$%`m?p#)kP2'#Zm_I1GLF?bF%^KhT[WK&];V@(q,nN2XOu+/*=]O8f2b,Cf`?-1,1?O3Gp[mYb3Ip*=iirOmR\j3(`"+
%i4:<E^F"[Eiohj]J7]E5bTo(d9O`XA`/;*uRDaE_`/`Il>[jn($V+n6)\+L*hJ?["_'V'r9l-TAcjh`6Z\]+rS(K7Rj-4sfJSWdQ
%Ia9>VJ,8<IHAQeG.YeHqF:->OFJeD.X7o@uB`=/$@W@]qMHFu4FB8?I0c/+>oG7-k\iEjPCeAXq7!dF5`D#@V8F2J[PAOqY\Vb.(
%@$TF\o5W'iVnf]t%!*H<Z-REUkFeLTFL>i-TL_cJ5WoFu8hK%W4p*9a_=9(pE$NkreQ9\CZ0]7-@A"QR;&DA+lWD:Q<u3f^GAPTW
%UgA2cL\)[5Z'ub@Y)&/1ofY18<GFLj$0>sg/Mp`b!IDH7;`2-A7^M'R4.Y5"*$Jb@So6UTJf*m56^^Bs'AeSIW)!k]Oa<4_?j'Oe
%Q=S(aBtr7jcXXXhA5'PVCQS41M)1J?nK)?.HR`7#f!%XD0lLPNs,T_uH4%6^PC\T%#pt8\p,@8e?qaQD2WQ![MI(qKd$J_Nk)-Zf
%'l0P+/QqpJW]F6rrOAYDLLUCi;2kEIj!nPgpq6k"EN6aNWjV+$S+e#RDrX)?4K]jXM_uAN$\VK@(9%6j8kL-7f0?]g.7R9A!j/.t
%pZi4D_UITE?osgl2-JNS0f+R60XoVmWJl<Q9qr5pHH&1\Is>m:4_$\$f(W.OqC:JGDst0$=fg2Lq[$5Q/K8'E`#=;_:Rq,J@D*^&
%<N%eIaXA+h15Z44>Kd7n@4f/sIQ0_7JiD79rkZ8%9ON+D"nB)Mc>`)P6=2#;_.^rN'3n?UkO!UG>H?]/pDQ6Xa,PL?q@uB&=.5J^
%0'7.>ae>9ocY@J/'k$[FI:XH9'HQHFs"!5o[[DE+A#W"k:7u.(8K;N4D"gRdo6*,d`sk.51?ZV2R-f&E`5`bmP2b'Ch(ZCC.:V3F
%QrP6lV6*C@<r`Z4i?FY2588!f8JR$7\M_/O+=;(Sbdnb)i[mi`bsBL.AcmHZ'k`=jDV2<A!Uif[_o!apb#Mb:\Y9%QGMgiK]<W\@
%Ds75*-Tt_(H9[-B[)!lh%A#KpI(=+Xe(rgQ"93^L6tVa\P/&+FT`YO?J%69AhCDQ4<FnURQ6\)M:Qr3$UoJQID[>Cfc`u#omKC(,
%afZRg8"<!"=8Lun8,Wc-^mL'3n29Du`.HB2`h"n$b#/>%A;j]cJDC3A1B95]ijjjh*&hDOP=OY5GVmm-?SNY#lq;(u2u\Ql2taT'
%/3!u58Vgt-;>0G\<`5'/K:"-gOq92LW?d/S@+"cp:.Q2t%48pEmP%G,KbP\e8?gZQPRX=D:#\]i]:VH3!N6JqBZA\ENArSOA@L<a
%&0E:d9.F1*mY8:%O1!3Ig_"E%BFLgKK>CX/Zk*YGW5dm1]`;b)W""Bq=2qTnXK<=jcBnuHH$HC<#GK6d)Vki(;/2YDj^GA[(Bgp_
%<?0G)I'+#->L.PTe+G$+XW(ojP/>i#>?ETh+E7RL@T.f*TGspLg'=LDNB`A91oQ*S3"kqL`K;j04P*t2`.b9DHpJZQ[(RG>T<k37
%&fKO9PgU[5A6.s;X70N'k]XdiS?OZGDVb(+<r]^o=]k3%f,Z4=X\DW3&jt@(C7KrGX"#LtB9s_XD]m?\Qn"<(-cC_C&bCcE9rut*
%SEe*hPZY<0L%b[j$/CTp9cf6piPA.9HJ/PoEPfGcaE?NX=F9ns?7[Fah)UT&\uPGUiXlDf%UJPBArhlo3UB&0[HLUF16`akB=l&d
%3/b0pjal2>;pKCs%$JMjh=h$rhOEU#m4u=JT#+!fM,c.E"nQ`Z^80J*@r'`:o]^.lY-CHO3X_+a4@V0fm"gRe#F[a_CNSjJ3Z:sG
%4e\c?9LD,[HsJF%S:qAk%%]FjS`?NI9;N;uCZti&#ZZ[eE_9G?PGiS^o*%/64\jUqPe4)aL2K];4si:CmWo:Ke-NW2`j)3?M';:+
%UXi\B1PY2!WrlFRZl1Y%K>cI20Gh1G*>od3Lbf<d#jD`B-3/d']ceD_TfXfOEWIg+Y=`Wf=m#/+)=qjj^802"@qk.Ys4X/5DCGb:
%#j0L.EL&>tIFZW>E_iZlmP%Z.Uko6d@L*0jSP-Y(/tC1NJNLAdCHEf+)0c:#^gr^ZiJ*1-Z0im<SE3aq[$9Bo8^<]aF7qc)Y#T]0
%HDt7UHAsT,%]_p4qYR3IfdJSG".]mJ?",2ma5fd(Z;kAF&U#,e<m69(0pPA)i*`55&7(AA?4pA\,.gtm,=[P$RGHqHi`-O31:u@N
%50V^>?<$K!X^c/A>">]2g/b[uAW(;7h*EQ\<@\G'TFGhf7UGEe9e3j8/T__5X4t%f+fSL#oRg1&X&_-cK3#FZ<]9T&<q_.@3*kE?
%mTOag+4SH%a(m[0`Wl$o%0teC@(ro)i#<WZ2`;Y'A$;7IcDnp#3;CJto8O1ahq2>NZ/OU[)pC6!*.28"R#c=^4Vb/#LA3dd=Dm$V
%bS:h>j,6omfH`0^8`T0'D;QRm.POB[7$NSI3-.W\m1+32ClJTnKrC.0BTu5bM9R3M2Q2rJ:W4Y`V(AgeUG9C:@6RH>pJeh,)<.%S
%J#ud7C]Yb<Kn?L@D0n9&bF"$9-<c,r+Q]_F%'<*^Whq!1o]4Zm0Gi#HQkLY-TRHc+?okZuJ77$KFdO3.L>DL/--9/31hO3Ybf;a@
%T#0)/6VK@cXUQ8-X_"T=U#MgQQCKfu/D:h/>H9iBgTH;@8N!s4$d*XJ\1ffFq@eln,b9d"Yg-a-J[%9.3>!\TB*bR!Pcq_(1.3Iu
%42f28qOY:M.RP1+Z*-a4=cR\0;EbFqQ*-'Ko%2=<?n:8>VA9q`AXr\TjD)Y<aQgZ6A[1)mWmY-6"f@N`Xc=@NBtFhKnd<#:Fj<.1
%=HA[<4b^%=JQTo)okWkF-Xs&0HZ[i!TYS(F^fq@BWC^!M?hks=Z?4;*H_bt,s2c#G6rPK4o4?-`M`.1J<%fh$`X)>74O4Jpi"e/*
%pegi@9C*0R\0=,^f([\)<Y8e`raUrm33Lt=VMNR1QAhrJq]a=;X\JdOmk]ZKbUQnD(#95q:7sE*_H30Ks58^6m1&.6ApJ&bb.&JP
%T7YKm0XdG/Tc#:dn/c6.HV.PD#dMt,[40&9Q/XmM!fM6Q/<qg>Ijd5Eh+C<m2D=KN;4G/4ROb<:OkK++ET([+\PO_GG5i_MQhLLV
%_pm*SbSa?/\A'gghZS%pom':ncDZe&p,s.nMuKsBpp#h^f[\=3ImqDn,j/S\rF*@;r3B:\,*ko9WC7K;/6ep4p+TcoK1Uqs=2Y2T
%OY#/@7l&)IjE?X#7$/Q,XVfuF&N'UEDe/OYMQ9-p(q!gl`I+,[rZ)0FHo4(Zm:560r3D"WoEUI,AYbLi#RdW(p8S7HKN7Xa&8=b4
%P5lF-q4RGr]OELP9pm^!h_!)8!>BJdR$@=ak!U&B)KR[Rf(%Vdd;mrZGfG-$Z1"W2jf@WS*4*-C%C'#B6betNPRA\LS`+HTV-csM
%#_Y&q,_7sK[3.LfbbB>9jD=`S+YJ-O-&>gQkFf:'?fn<p8glFHm:r^H5oa&+Yi.'WYSq)6onrQ)?f+`<au?baj88:T&fHXGlomhl
%5UWj?&>M<?p4BI#E*=Qb&Rk.b.-l0m_nrQN>-=5#B3b]*E-/@0UMN7k[;p%61o"jti%[s>].l4=&6j/0-5_^Y`5`2]Np9ZZ0g<hA
%\+Vhr<Yn.V(j"+cCmUMe^L$*4nVBVc=H\Z@?=Jcs>q!_E1ZjOtken2Y,O?Tt=2Kt(QhVqgCpY/@OO<hW:'ipfV:%bc33q(PGfG-$
%ZL92ZjZDKiF?KRCB2]nq.>[bfCYh%o`iaD"FKHF7(df/(]C3aB2N+DA@J=35`_Mm/B1l<i_H<koO'Zf/.2*Ro[VC.kN5_?S'HZXV
%F$MtK4\jUQe@+q-k@(>sl`\82%kOh*i<r*.'LhKO5UlX8K*ub:"!9)8!c'V&4#s*/bJMu&1$FS,ckT%_$a+;+(gVcLTE\TirH=#a
%a<3L>/$Hd1V>Y!R]Z9:5N[e,EEBUBPI-g%sQhdI(WqWN[NI9*<0s(VST0#Z(Ta2'!%%`Y/JZs8n>+/Y#-d7:I&\Fm-*PJ69CLJ&4
%KeQBu;K9U+?.[;\hK!udZM-<54!?l@rRi^`j.(NfXXi;=*]>*)ed7@PFDPYX0'J5c[>8M"=W3QSIdW.QM4m1NH<pq+W+2K@Yg%UD
%'lY=t%hNJc%cD^h_T(FT@n`%c_RA/Z-&Bbp@<kkI!56Y%[56t*KRHA$.pm]8`rn#C98!RsES1Kn?IAb=i%&:crG:-i_D6im0O"4o
%hBdo&E*nL)Qm^&9Cc5P\TE06dD89lmIkAGiX#G-1`PidbM(B^-=5hPoh<ls=VsHLf?285ak^(Mr48g@m8f0VZAR9L_l%?p:B#cfS
%2MiSDlrptBdj0dD*[K$SLUhAIr#GhBK?6p3AiR`F=>m_#m0XqB8e?'5KZ,6^/EXA[]Vk!4hG`^NkRYS_qA8/#9mnOfH`!27>t$Q=
%G0MT5,F[;1d*-[^bbeZ%Hc97RR`/:sTUG2ER8(;*Q3@]e<STI<@'"$Re#o+P@Qr)j(DXP_SbM;(ZdHEnj2#(\R_NYuprc.uQOO1L
%fjOfbiSZA9`EYAQa(Z(`ZGHHM_nf\<R_NYuprc.uQOO1Lfdl4FS:+2LCDA"AcX.G,9==L`rEb@aQX3NuH4;nSbdta>"HKmT*2Gof
%DT$WLlo%,3Qj[PTktid;nf*I+2PS;UNe0!dS8A@DgosFP3QnIB5)e1^%eF\c^8L,$M@dh3lW\3b,C?oM:AnMJN\$hS@r]6hhC-Pa
%RR$J-!G05l"s1+QcD&/no0c_7VHZSP':.ZX,JN=AA!UB0Tic?C-J;*7NE=N37P20RR#b2>4Z0F$#]]@qCTB,78eL-2j'pi/9bKhW
%G:5BnKHRM[WZ,23@Rpa!PtW",Kru0IZQ@#&SnuYC+DU66m0I[;obc')j=2du,6`5'^#2'!eG#3><p=%o@nu_XVYZH)g`,9P2l8?b
%`37-?e0/XNbR1^Mp)khpppZJJbam)rSn8t.nJH>*XgkCp))4,F<ou)ro/@N*UTM#"ko$$;[l_OKWVW2af;^kOMpdZoLQ/Z(*dl.`
%G<0_t^BPC-k%BY/HH*5ff&jsm@MPgNboM)G=X]`3#Tps#W4'DY87ATm`_`+'3=^dUkeUboga4Z`YCWc?FlO:Na8,P&ZIUKbbe\e1
%o)MG`.>2&\0K^DQ%)j<;q*?l<_"'1qp]D7]9I`aAeN1'hqbOAN$Whs&.*rgVr@;ObiU&LIBs&@p7UUcE?nKpGA1M01>aVjV'BJ1q
%I8<^U<?1/k9E,u91H5P\+FRBaf-5[GOS36s*;GtAL_#B\l/mkuJ%,hp6"[Sfb_<8R^jM@%Nk7&)9Dk!oqPkGE]>W&9Nk_sH!4'O-
%-u&q?$skY1VsJbf>-%"/9Sbm`]9lTFho.?)cE2U@m8kJ!@obToRSt<FfprjPh<?EtbolW4*U8KhQi^c&L/^H%5G/$ul?qeiKS+n/
%LrUNU33aE:&`V3leDMm6:K'0cVm(<+*S)&leggjI08iV'1j`Lh=@?8!TZK:GI8(Vfa"\ZI9HBeT]h[([co@VS5qagoYF%i"js78?
%,k\5?N*eub3)=s4o%U,s`*uM+Wq^j%dQBt4?p.98Qdi>oIYZsUmVBkMZ.n<>fEGaLW&/'Z8Y:lH@F!Q#(_E^d)u.C>,!f5VY':=C
%1]4YB1oCk7d(f`+bj+!s%(:+:ZhhIInL?X:ZeHM_j(*R0+m\E;36'IOXgR)aM6kg\l%Pqm=E\5QrSUfXf\('8F5lOD[!st!2?>nF
%ds`tQ-Q%K]Qj[J8K%(/UA)NuXPZ<K,m*"[g%2PKPo!,@sM+Uon?,TLA$4nhWO&P`uFf[[>_pH,p/3k0@nKLl1=%^TSfb'.<YEo"?
%bS]'K(j,orc)l82(6n1rEFGq=Il8QdmeMX2La?`WP1BFeFDo(qR,-i>`"Eb)A$mK8(%ZFb^8-^1@sFAeqUcPabVZR8"D+6A9rG."
%@S6K3SAQ;,7R:nD]cO(@Y@,;5$&145$>7QrAYX>nJ24>u,A]VDDLbj0!o/gL%A5T.4Tee8L^.DDHQXkaO-B5_Q)kq:_suj_2'iY@
%K*:sbZE]Ik``C(noMmj7_\g8*A7r9TQ^AE%cmOCiQj[+;R^OC(SZV6dU$)hl7Wtr94;u&pL*N`pd;`1GUQ+VFm[Z'SkNki6=uVIs
%-027HBOT.Q.nnHg@e@[nNXm;u1Xf%#Gn<@BkDJfP6\:^S'/\1^/*=_%'"]Coh5bNR].RhcB'gln:2W%i+-!V+44,!&]A6mZcInPK
%\Sb(O9D;dlDo#Z^rRA0A]7NB9oU7RIIC5l]:9WluT%WF0,r0)o$E7Eh\J^+HQj[O?>/Oo027A>m>.LB>.lIU=@2rVe1mH/pO@Q&n
%>/NDI8'BV=mY^g"B4"R&\hQ@L\UJE0((9dfH9J85Pd?;^Qeu\0<AT@6E#(o_4GrQ2>giBB<IMkl3%MRDe5TAu[@ZDU"=V/^Iu@A2
%$<u:\%P6PC6KUY'p@aC;3*T`fk.:(FCh"%P(g0]uKp*YgK"CY\.:-IsqRl'iEg%@*^ZMn"MNcJETbD7BS@W/^A7^8CPeBb7Q)pK$
%-gN@bFCieOPl*_9/l&QAf]q"IZrbJL.@XXAk.5j[@bD^8[eMU<X#ij_Mb7NRl^JO?X:e\"s%FUEc8(,PE(XXoQm^1JSCR!>=hmi:
%$^`B*bpnjp%AuV&W'hD^2C5XFbf;a@SpFIEX_#6pOYn65Gjq#Yjt.M_hQkPAA`LU22O_*k4F#%U0c/-`#<!X9AYXOo`e1a:1iM&l
%n<T'r/K55WZ<,8j3W#PVfB9hY\K)"X2]?'=3U@:!15;s8VTDqnd/W4+b;$/L;P6oAjN6!ehEk;F"Fa4*?$$PamR:6siUf_oEupK2
%`"P,P.U@<7*fJ_=%eF\O^8L&"apm0/VLEC<2+H&b.[>=^[;()#bb"8P8#$W*W;jN^PD@d.71>_0EOIsQKsTei4Yc3A8kV,O92;Eo
%;,?M+f!iXPT^[][DXqJRMN6Rh5J1AfcIqq+]iM\;cf&)'*8J?-2ANp2]s`bN;.=58I'Sa_/htk*V5Y^OICTqW-eM,3HGNi74!qFh
%ca<E6d3tKaKBH[-X:=I&`GrdJ=f![Qnh_,#F!c7RI%7M2.=J==_r0;$3Y>bZ?+``%C=Gu]0Pj#`EF4[Y\8#uK0gpPck[s&:/7Za)
%M6l#H/t@&5%@Ff#jT]@C6JH"W7b5TP0m=Ztm/'rR_-(++nI:$8G),lQBAZYa>(qa*V=M%EQQJ$/fVoVX3U;uIP1W]):hHDcEN?iY
%dRc\R')*LsgE#:1YqS\$WYQW3+`I<HLgM<P`E6D^"kV_ogRpa3-Aa<OY/+WDBT'_BnSu:WVsLgk%qBcil^X*N%$EW3'hn9i=2rnF
%O("?D(e;(OLMgp>4N>u5kcT.<=\D9P'o"ER+.HXD,Gp7?fkBfX,L@^6>idg[oj+3a3oN6IeFsZh<ZPZ?j_Mjj3#,7qr0;bUmWU-Z
%TbDsQ?oPJ/c5?ae[\7>2T1jt0i2?,NpJV8d]S3?<UVo5UAH7=q0Et!]-12!C)MD[86"carMY=o+b_8'Y*YBKll?b!dWs1;dn?LOs
%Zt:'G*]:-3C*$k2N8UpT=.(.8O&Z^Xe/pS8-%KbR5kKDop4Tn/2+H5G_V,ZF<j"34r32DBk8TA0Yd"si26J]hr/`nm*Tkgec0m*%
%Xn'B"g=P\NE-.qB7cb\FYf^#Z_Y,<Z-#<uEL`"L'Yb8(rCEX[.I_.sQ=:=Nd8<0)m^;?/CN!Bii`,6(JN5n*%FOn2&i=_%CLPA8]
%(iRa!O7W'.Ks$=<Z2!srG!lYNJ[JRAnR^B_8oTU.F>"Uib92F=JeoS>ao[cC0qmE=9f,8^K!X9A*b^IBKjOnEY3GoCMc<-!=F@O2
%Tj\gWfBooe9;k4:/_\HEG`VIh*C[,OnN@<RA'MIPX%p?c@phm6p]2`j9VE$Fa[us%)6p[_7TE?=AJD"<MV)LBFi@UqRX5dG@N%V/
%Od1n9.7WZHZ8K08g;f?C7TVK2U_qL5ak&?2j+MhNRB,,q*fb`OcS7><kmhig/h)8g6d#@2p-t\&;P=_#Rq(EQ8QQpAoZ!g5D]pW8
%E'lB_>Ff:64p[$'lfQrQ[bd)h194sI<L&P+9:Be>$1i/B^8&DBDEJG>0Ag7ipGX8S9/0,O-@!F)lrTtp+W/-7ZG9`1,]&2o$jD<q
%B"qe-PRW??L=fXo)DGQ&nW>LkcN,<FFOK&#8p6Cgj&L?2Wb2^BR#b2>*VHOTj*I)5r>K7BlmP0>f7LBY">:[Z:_`i(*p;;j]1*>9
%qJ&,&,;)\9KR'3=ShV&(H:OSql<P`JWKJ_"Vfd8_G0F5JD`G%dZ;ep[=Pia..=9'^S?hT3Dj;9n_sH.P-p&hYW8e7Ll7BA:%)lS0
%IXWT(3)LVs>LBF%QP_3hJMX44B?V$##G2Z<YRM/<;:_M-/7=jQG9d7pc*t#RD&]WmHo,HE43Y_oqi2"b\T'gWA$Ybfb%<UQ6cN2t
%Gft]EN+juE%`_iF+GM^,FrLb$`3_(32SEBN(WoW7K;@s-.1<>h>R=o?)SRHChr'75DXqJR$BJdkSL`j_P^Q'$X5(3,QK5bMg$sQf
%MQcbZN3^,5ebf"PN'S\k<!GCMP#9d>E7#6.fSi+/b_<?4?7O'eE];,fp612NgrE">f^snIgPaPB.QeWUgE#G:P^Q'DX5''a<p.4f
%=e<iiP`HLYK=mD8U;,D/K,?ro\C8Sl9G(_&P<ij*KsE.MBEuQk_\$-&lWk&R,.%!'A-g6&d+a7jPT<h^*g,.C%eFDWQ?Uilb)Q@.
%/`D&@V9frT4ql7oZ6Gl7]6G)"'(Kf/LTb5%c_au1Hc95<9=ZR960BC8SP?_<QL>'TZcT#Labt7!mF'Z&lZ&Z5UX3"Y9Fj?8S5!St
%S&>M3GUg/-nR*l:bZ6Xi[^&bIA`LU-p4BbmPRaq^i$t5?<Akn'AWs[I`e1=.10<.RE0\+G50haRPdsiniTFHWWG7,VMjgRqC-^.2
%0bpt07_0p$e:9"4ffs9t-.NHjC89UBH(lj)%Br3Q(IIc6=I2W-9$_Q3^a6KCHH@UCGn$@gV7>,0%X=&@ogLa@ePJ/PY/iJd0g1>3
%NuP"><lQtBFgW*8(de]kO8?,G"]HuIaT?+e_d(iO[[f6'`01-25q*fu1%b%l2d=\:'6bt<i5]n-#Dj9YH.n#AK(h6/hc&UI#S5bS
%MHiFW5=;^mE@?]\%2)UpVl-+O+3'BC(-<UlUKiU((t=aK=3QB#,rA^:#''*0]$d\g0[/6Y?H8C[J46toH%E34.^0M:9cR3Xa!pnW
%,1ihVFQIR4Y(1#`SWZ.bE.P<hiPP5o#!_kI.r>dn/gok_kCR*'385J96J5>2&]\'kbcc]*@l;kd+:PS7U5p/qDoh8lO2e6iBZt@<
%R#b2>4[lMRGNcs-MHjIEgQ2\e/NNXJ&>DNjCh"!40gpdk>K3Ep$:huJV?ZsM\$.`aWtEj4lo_4_A`lA*ES@gK7#/8`,J&%SjOfNo
%4NIFBp(@7Zq)DU9;r:anLZ;\?*a<CdQ$PSC9U)]=U$N07b"Z1$ejQm>HtD)cTPSh.$XnH78<0qkkHC,S!@Os&8B8$&?6PNKBWe8:
%3:>fF%/V?rjjk==EONTZ['f0.6iL>)$P(,s7A\ntjZ0b)cL<s)l"$,?6@>?dfZH/W_:WYp:/poG[tT"r71-fFkW%.Nn[XC&*/E;"
%\5ub(D`e]:a_n\1?18m_l?`kAX5#E*cP<g/<tkRe=qHB&-=ZC_WhMpW')4cs@*mr;&a#NAiqcU88,&2M46"-,k$%Qa1ROob7N>uV
%oK;d%mtFg?!Ep?<UbOasmt-Lf[lWJ2c.)T]3nC;hN:h77/D+1h7^ZRp0cO1e/"*t4AsGQf%=BQ(R8pE\.VK!Rh<ls5[^+HR%h?-R
%>7SeZ7LU,LFc77praF9W3XNtHO(RdCYF(ALp,s.m<H=Jdk:0Ya,XFgh#"$\q2?.j`(][."MakXi1e.X,.Lr"-'Ss!F`+;mTp1!Z#
%;&@ZXjta>qX_RHY_0s>AahCR%18a'X#?B^W,V^@$8D>0Mj0X51C$VKQ9`8b7/bBHD=aU=l;GsLuE5=e5ARAKC$Ve-pp^jk\X]5uq
%]D3dW_5-Xi$g*SZ)&>#'<.d>l[h:lHF@j\I2S5Rtfch=CaFK6\4,k%bA##Lq(W=?3qi^O$ebftBH_9=K)[9-B=.@T[KIZ<rW]>_S
%+Z^02!iTZ]=EKQpJ7o+eIX/,Q$X)/;"hE!U'`h.2n)C$S9j2Kt2Klq(R,-i>GZD)90\[W1j)f]@II"oPE6Rf9-Krb?L084AXG?Z!
%S/j?'IHl?NB\,7Ra8gY9$3D,K,,SaE>rAgQ$Y?YGX$YWj"Ua=16r?TE^)p(o%rLbM]es'=HnI9J]\kruesDW0DO_5I8K[7oLu3@m
%6`A*!\t1$4h\O-Ep>n@"b*Wf,Vu'4C00i49?j`+#B?Z(4&ImPG:+(d"NN]Jhd2YVmpP'V&FEFQCSQJn+%20:XKh!Z@-7(2)j.(Nh
%D<oLE0Xu&/J`Y[l-IE(\X?p^rJM2_o^)lj@/7V3N;c9;HqnU6?Yon%p43WDa_,I2_a,J[:$oX'Z==6_f'8V$))MO5cbL(D9M^BF8
%%p&?oit_*(_S2hYFlRs2R.7FfgPKcG.JE)B]=0(_@p]tnqKe[,S*ST#75Rrb7T_KJTi06OAa4lWnC=4b!0VX*%?.J>,X;moQTXF6
%4[p#'196)i<<^CO1!Nk;)=qjf^8/\ij*mA*r0WlQQTVO2=>/0uZcXmTAUVPb9-2"_!0/^HSQC,o.2@ef*:SQ*i[e7E6)"W^91q`W
%O1I_k$_fc@OG9BcP#K6gR`lO8H+kCk]Z9:5P![c[n_mSlI*=6ulhp$:W)mH27T[TkoVKn]>o?$-2l?2okfPlk=eMC/4_$*d*=OPo
%L@Lnk:^&YCdVt[YTW!qcD`G$``-,/*;Jr)hf%M#5C!O/RPe:mm&')01a*bGelP;@Y4"+XG.V,OClXb+&1":\P`@>L<;^^egjQmb*
%iN/t\h*E3R<?Va;.:p`R7#qS,CfZ6@*c3B;0:7fAp*DT")uIPA.:g[22BD^,PPNC"gK3C1/E:jAQVHTq9<DSQPHniFKsL?&9l(p;
%]M[7<WF:sk]d*$5:%4JY[R[CtZAJQQD=4X!0d!=[9BoeAp4qPsQfZd2\mk2#+JbpX=iNR'*W=b%AILHSPd9;\(bp,b`7aQ4(XD"g
%&X.Z+Y](@1TVW3S=ke@A/b=_@DXqJRMC3)l5+=]F50hjU<4jjS6Q\PTj,JagG7Y<pl&T[1En3lWSR:i,l,+A7_n#/g4TWK#%Q[V=
%>VHu>nrT-DGd#(GRi:W+?o)$BSBePKGL#7qX.89O[.B0':1qn?O)t"`AZo+l?$cD%&kqsP;":BLMK+q:eUD[d.]XTp]"hQk1<qYP
%IP?Mufe_d-=n.?f8O4#QALHlO",:T(9W[5+)nMZ$[_Z*Q'r\0QZX/%!I%7P3.=RQ4AiA`L[3\pOdUan)]5a-V@)pJJ3@dK=j(r\g
%$4c53&I3L<b`fAGbS+X:[\-4?(Mu^$(2g?+!"?2[6PuKcL.tAOn7]HAO65j!lim!#cG$4O<E?AK$iY43NG/.j)5#5PlF$-$6k$n=
%Z1^G)d2Xm:JM$,4*FI0L+X/2WG)*V)[UPWB&DXX"49fTi"f8e52$f:e@8Q^Pr<U;*Y/,/_41quZ4jMXQ<5)BNU5LUND=n(A96b>`
%2\fXQ8ls#/r71'Z>o?!KR+,CGFCbjq+`XqPb_<4$"+(H7?>Hqc0!UWB%'qjfUCQY2#jZ?$2&ON;n7^$`GF4G4p-#ge<K-/<pfI;3
%B3i?h3JPFPk6QubN+5$=Fo<B%W&]T6,pDK0Y[`$qn&=$+fYZ2"8n?4OeH-sPC(WG2i,"G_S&#\lDC)dVR#c$%@%h@g`!bM`7"%k]
%CXjU)m*aLO>[D_Yj"uV#-%I'a@P!26'/k4o&]_=1=E(PRE=.%7lkOHt.M%/ApJacjfMk<$+<HQ%2`V-bqemu(^o<5lK>V^!1Y1##
%mI)KFXW#-_SB,&AA)Sh$JW;C-hi+=hE=<te\<fV(T;W-.<`qIaiA<)R1@9i)G/T*2*p6\$*48\1nu1(Lg;0-SLeGY]fH9`XZpRtB
%8GpB)=PfBG8'&`mqO[Q7.ROUjeB`+lUVf,,HnO[:m=P%I_,KZdXoCFU1XU[mW^(0]Xh5#;_.5^b0:4-$C4A,e>E?((#,;^IJ=0^"
%EgIV%oM3"@Q7286c+9[Z)kJc+VsJcq>H8/eNf!be<`kGo6bJB[5*dqaXB(`3oOCoN<*W(j$(OG_<9,h"#FXK;:`%\@k@':9J*3Pt
%Fg1m49H;sW%!S%_g_3o.H=dRtTnr5`7,%'*+6W$<C0VPq@]ZPYCRI&Wj'sh2ZDdP5-#p7A&l\6HI5LF2>2G&f0Z`YtY%C?2Tet3-
%+s':u,h/qe[O=WPn=ca:$Ri$'jo(j8`J;1o+7^mFR-JChR#b2>*@7k72*[&f@hW#CZH)#g:rX<lRU-8!V.CqVJ*OoQY/CI&/6iF%
%D4]]4J0pWt&ZW=`'m!f"KoDmK>9W;?Jo(W&1fi/]i-k^L*8IaJUb<!u.MBjr&tUW5j*Z8FH)k8b%n#q1Ri1.n4oXmojGRL,!a:Pm
%M;k^ODZjNCBjf'5#Wq#g)FBe%1$FS,&=-'H84%K1K[$o_T[A.!pkHSH"ug'n)9])MB]`TA`I+2]n#1-S3sW\@5A#\0?T2'C<:Z=$
%NO+SCq+EJ1"bddl*>kh9c8)8W:fm-fb_<C&Pf@7acLdOM">LI"AETn_,<nkb<R1.b4PIm%;>lIL3+q,Gj/P$RLp<fO3QcB!6S2Zs
%H"CJVQU+p7E!D/di]sEZBjaKh6<u?Pn.rIPnP-umo0MO^iHId<'dt;2k3GlmkM:Hjn,G;KK'!Ku\(.DPHCQZ2BBqXZ>P6#7&GFN/
%>B[O[i@8#4H1<cm0h1Luns@h$d.eCM'F2Y?Oth-u?"AU;:C<XI(X@?6nO@OMqMT@%oT0>7ZMPOJD7jjUAsK^8$BI*NIXakJR#c=^
%*JLYB@t0kLq,ig^/p_gl<:b6L!Wup(1r`+crk,:[Y'O>Ie-ER$l_?]e;sFVncC?AS0c/,qX"0CQ7ADD\C1M-JjA>#$Os'R`o/+Hh
%2V#n$L.F2I=6,240OY2`?:3A'*cVT:?X%iUe<NoqQ-X&To%CCnB0fX^c_au3$aVgTc_au3Hc8)Z<opJuQd:8f,+hS.5)\/m5+?`k
%/GL^cfehfs(VIfQqMqj_]eM_KSpWGc(Ml;1b@^@49a?1$D#Ua)i%LSE?T&r&AZqI/>t$2hn<_D^0:NINZJ#.ee%oBLS%ic#prctu
%+6VuPl<a/'q=&J)ZM8:7353+HikH^7ati,,PZ!]"LbY-FDLUdqVM5YKCj26SASG:4=\O%U-qiTG^mLerpOppR$TH;06,98c.Qj.;
%)I,!=VsHK;?M2;?Z#p"#=VnQ4@!'B=`5V>\?\U9^@d*c*fOkAHTa\$-ktpRhL5%D3I9(=,>W<,[/m<A*4=M4;qNu`4YnooQW*[I\
%)cY+Mfk?eja7_Uf=i35X4\jW'Pe0s2@SPfklBk8k9/.#hT0d*>@k.HNY@rSg"F=RBPF1(?r<rIT[kO'f3086\kPcVISH]Gbi2u0K
%V18Sb_f<;+-"??(.Qj$ilF::e:=g:^]2kVL:EPc=E#Z1$3nBE17TY8)+1b;2L(\!p!F;1:70rE,0t&%6KrtGH&<VmZV)A5R+]3O+
%S;lPge;/Gdh9^bK37X'aEn_&[j%OksO_^4&[Zj""DB$f/s(WtU67ObCGqUn[I<FF>@LNuZc._u)OI7irK#'lclPXc;X(sDY)^?N,
%!m4U4qZdh^g:i'fIDCVEZH?9U'i70equ57do5W'iVoZ9g%U1UD3Z6->qGO<HZ]9WF/7YXU@Z5B;SjGiSpCi55!+Ml19;tD4'AeSJ
%C,m4en.sdG`R>!15O<IJg;LSR@jmDLgP[d.=*ZU1h<ls=BBso%>]gd)Vu!s1KgEE4f_%R1ZJ[6CCAV2&KOkQ,TX0AW?k-Z2"auo*
%4_$+7D)cEe,gOC#81Xu1W9Qf`D+M\R0&3\2XW7ZHU5DKR[l_gS3W#Bl='^O9I8%aHa4XS-M"a7.ZA/r\0#X\,`O=Bb&@Xs/U3Zr9
%-5!!]<W&@"S,jGCdZ31:f$Gcm@B!Jp]5N*ULO5!DWbLD4O)$H=LHLK2B>CFulJGP!>.',<]C`ee(49=/_(I>Z<uFBjfB3r,6:e\_
%Wjf7(KG_!\2ntlD=:7hZ%WnttKbPlL;P,]VniZ\):iWiM>4/1tM8<(rKAg-tI9l=`-g?!C>-%?.ot^#J[-2B9cQ[J4<0iP/<2f^a
%Y-^43dGGdm5c0gHhN%^0V_IB0_ZU4gKrqWS1ib:1P3ss,m)Z=0A1VT"3//XZps=r>PjgP$4Ius0IQqdm`-e)[n#:'(!lQfJqNeMi
%2Wq])X:WGL<P^^CSZ6(Ob0LqW0L^\sYk[%(^ao\g*:.M`-9,KfN+LPt-^F5(SZ5PQnIPO+B(_ihr)59]aO)EZpa<[VICN`M:>,A@
%[8m<;E9Ul7id"WPM/4j(\=c_Xj$4^iIW[:l@BN-I+HsrM?:<?%S4YDi$Xl1L3]f/O;O$)g!5nsBAr->`(-$D^cbFKS^,#\=WONI[
%KKVUb:=o5>[4]&.OMB@j42X4c<n6OOfaH%n@SulVmfkrqZ-!(>gHR'B75.iLI<\(@neJ%YkSSq_F\uHU1t_"\A;Ak_%X2F3(js?!
%I`RFd[<A+Q,!O<(Q^"n\mY@rnXEu[Ng&0Et@P:4($\_e4@VYf,>8M1JLa`BV+skHPlU4FWTRE#20GhI3Z%=0CYHAdN?0J"gACb(J
%Q:6\PXFA6kE&k8Z*TlC@I7\_MC4M+(38YZ^1KkDiYnqgBasQc3VX.,`&q_`oW<0Gl(j?"Rl[nJ"gDjQT(WmNW_iY@)=qkS;BoLYp
%ZGY6@AKq?;\7(p]:6hk.47mDgp5Jf,ARA?k\oU/ZraRP;nEWgQdShRfJi(jT0c5hW:R*:]m6jV_@+A3+n1[*YH9kQ;>VHu>joS[9
%:+EiFN3cdK"(l*,'EBU.hJd"`EAh;[!KT.EF(0+.I%7MrWH$b(+G(T*UML>^MJOp_K:9_&n>gVB^mJ$8C((F^MeFfgRDBb^Tkm?J
%>k-a08oqiH:buOI[<El`a2Of-\jMCbWJ8Ve@s5K%I%7Jq.<42=+NC"eVXDIhWR5Uf$dk3F695DMI$k[X9I\mFE_mrI1t^f`cl$o`
%D"LkPJkf[862X%TB']\88T]_W9UmZl,;HN1Z(>QBGY*2H`r?URnFtL><4#Q+B.DT9.Tm,U9I60.,teE7WFW?8A>p;#Q0\Zq@4E"o
%85>Fd<g@Lh#F0++Pq6f4<O,b-ZFM&VZ5:a*3W"tSf8U*r#?A(l$(DGXZWURGo>+urS',V3\BJQ-REYu'fdl(!=?==]K?J'hQe?b*
%REakLRh%-Xfj&.\_.E=tq)Dkk;XM'#5l@4sX=Ve(Tk#hOW)Lhk0t6iKfSV6.7gp8CD71,C-)P'H:Vp?k:RiGY:5"0G6>4AAT*NO?
%1WuqG7rX>3_.XTejXdUPUUe%pn;R0&B4"R)]!4NE[=:ko#fB<(%qbTAf`#QNR,U<;'Ej&_Qk.'u_Y-L5`"WW[:#Qh.Te'inZo2r1
%-aDmbm0[:q3HLIRE+2U]VsNbj'mnEU3V/.(3+ZGpo")(k/0TMeRS3@>]]f(CS6L/nU$p1M2IEN':]gJR\+C;#0h@i%%WgS[B;S5>
%>)fg6Lj3p3[8r]^ic`<7+?D0lA(dCFK(h61hc'&KFbaO%=h_?<)@NMF7,8o4$UC>YIKidH,s<C\"&6_\!h,#Jg1)h6C+tFR6[QgX
%kXpPR1kSun/+%!N1UZ9p@g!VhL1sZr`ptTAg=29m0H]KEMeZS!ps?LR22B.7-mkDpn0Oto><"'cQr:[ZBrr"8&i`qXeMta>i^"[L
%[,?nRE-?WT_]$pZ-;-?LROjEIBcgm+rt$0)?0;B`EU(2]enZ@>c^9c7p,tjJ<JFW!k8J<Wlk4)M.en<#``^=2qTZEoQ'eR:Vl-s.
%B,OW4W,)&Vk/,g8ku?k8f(b"1f+]iH\Fsc[[Yu(RD`B&'p^.QeA<ZA'L\WoBhc'0Ya:Q&b=KbG8hFBUAqVSueEd$r(0a3'G[^2G!
%DF#3)Cd`CY;a_JGh"Wp?/sN3i2NfMSBTsMDfH7!T`XU)=_](OF<[l4m4ALI._tOo;EQZ"nkd>.;g\<Dtg?K&0Y[^Br)5!AAAt7TC
%,"3J.R(H"MW=6/_ILssf;'HWa]0fg?95f-;h6FMg"rDX!,&)8+cfTH?PF&@+Q</?js)B,kc^7Ka2SQ*aF\s?ooX4+@-p,8USPm0S
%cIuYW@u@tsgr!b5D4jhL(XuKA.JD>&f,)49@E8/4&nHl0r,&H\`(98accDmkko#M:??/Y>?A"q9k?0,q"$Y#]pQWAFWqF[*F6C(=
%VZM0E6J/-(9sAV+$o6BlB*=/:&bNZf"M$C!8-sp@o77S3_U[erK+gs;A8&p^S`taIN8DZ8C^3&!2BD6">nEFWY#paKoKAJBFqJqb
%YI/i>JUl+?ibKtn8H\rgW:q5k5KQiO%3c7gZR=tFKsN-<&UJ<&Eku":9",]1/1AJnRT^t+FLfV:0(c@Cl10JL<Q77`(i^T64!Hj`
%fCoui<Z.W)nQR@3R6smCU>YXk)ut(Tpbnu"03Q-*N?Kou;$H6//_J4HW#s6/ZLs0eco'F[bl<6g_-ArR2l?!T7ppsm7)C@4pa>g8
%AcuUDpZM`m]>K#dZL95_XYN;rqU_0NdAJj7OmrT6LY,eLP]6@aAf2[*!mq3U-V\^E`c\""SCN9-G+l%Z?TSt]\q>`k'4TsgrftN0
%W2[a!?.M0G&gZW29i^Qap2T6/VquPn,l3lmB%0g#cCKVV7:5;ba])[+JsatNh4_lEN$/gm:,\MZ3Ff&qFk?YNH/L9<]eMImWn]7e
%JX%;JR7Y$Hpl".,Oc/qd\0f:<ankFWpGcO;;<qs5)oV80pTa+e6BfZ[7*J`.QQSi8=Cco1P*Ia*Jl-h#ic<$_-#AdHB?Z(2Cp_T7
%5!4%!.jrAjBdLtBqC",<OnJDkVp9ZH+5=He$1i/V^8'-,DN#.I9&s370Dr8hFJ5't%fI.=$IgW,5P5`k<u=jX=Hui_F=S%<Wia&?
%ET(]8.5<bn%RFtKV8!F87^h(=6HFkilR=8?X7VapK8o5FCX/<.oCX,(Y'/iW(rk1^pEg#J\j4B(HE>+g<<q*c*!1g26QMP"M+1WJ
%#NiQ:\md:^/SJpMA/J9&cE[iZR%b$$pkk`b!H)"F0#h&F+n0/B4!7c_+6VuPb$=>Z"k!3cD&I<hLfu-jI+jqk]O3:Z^Gm[cR-MKJ
%js\DTFG+4'p5HOY2J:_m2K@SQb0kPK0[/64P%^e]VOJqSNGb>41hO3YbblnZhGNHN2cb_o5522%!>eM*4PV6i`L2B;m1NST`^G*^
%95'5>$#SBBZrbJ*ZQaTf]7cL"Vh?tq&mBQPW)MIt[!\DmThW.Pp58Z*BAZSRC,]1LhilD&F,/#PgMB`rfmIb./`ns\GIQ8"DR9/s
%2LE8EkfOt9q;=/8b\]6[gh)JTc/sZ5Cb`EPHuPRg@QmQ=GLX=[N=k1Egh++P+91CGkf\,>25:.?l!MMQ?YRG&8k^[-`hjH6a9cXN
%qd!jYKsTS$BD!DECn/J5$Rf$^_#7@k_#;7e2&g,3jMHOPET)fM3+LiCqJ%rqLk?Qe48cs\3_cb"k6j!]@i85?QhnEo7nebI2-L0?
%.43:9m.QCK0U<FXG2H>13P^HU*6)`q>84,2i.bhpLIW"f3K3r@[CB[0cImEk^=nP_igAYR99TX-[86qdI',>t<d'<Kr2Xg8Q8'Y:
%h0Y\nHAO't$tW?1N-V/ai%qec&e;[04pTb;dJb'lnt,!.Ptd;Qg3m$]7p0/P8$eN&=3S]6qi7CP]CA3-PPpPbM3H2\kXEptS__+b
%`Xr0(?MhII<4[kgP7<4P@`Skr=-0%Y[3s1PZ]1koi:i4CF3<0UJZ'3L[?h"DE$@E_UQ<Dt?5;--I,>l,@m82kpCt=o_F3QOG/Sq.
%WcbD*W9F]8)eU$er>48M/7[rJC[]8G``*Z'4umu0>W>qBBHe=a;V$c&!qp!aJ;R5jcb,fP0AsB[8`[.2T(cF.!Uk$>^8U>)b.boZ
%j(iG6..+>akA)YNUFTg]s&,;-AIOEgpK$>F&lVJko;([iF.mBki$Ju@e7a6S3Jb&)=hS6;d#RcA=_0.f_P8ith-iLmg%SI[<_[%;
%l!o.NnEZ*SbXEuDbG(a`3!kM1_S=MGB,OVlQu&DG8PCjIoTQUob_<B5[1=4on`[)cj6ZQtc\,`X`q2r?`#r4E/?cpc0tZ7M50hjU
%<5)C-@L`-;SfQV$G?*.?@QOt7,)#5W:D\'?*eH&D")[AS0nbE\%i2<M$W.Q_MZMgRCm6AG\J5=-Uk2'rk)_lT#elF$U@Kcr;_E(8
%#L8]4'/dP&hR+gFCT/CSaqS$f7]Q4j=og'P),p"eWt>U\FFd;Y$\>C<W??$KSA>MMTkb'E-3d`p<l]96QPc5[RPTNb[qiXE[\Df,
%?SW^[\a9UiEMgIJb-`]1Rqj,3=MuC^m\8XgF4FY%A(nNj=^`3l"G,7gMgDt'2R0TEDus6W)LRWWE[_o&F,/*r8^bWI<d?@\Pc)0K
%m60b4mQUe;:=T$f[oW$-bO/l"j2!=+=qJ0%iC\@[-&1!SbRI@$ciZ1CPQ>8>`6\tI\+(>OTdf@(IUT$H3c];*$VfE>jHQLC\+,lQ
%S?eC25XX,i_!QaJ3(`"+dTXVFXo$H/$c;Ath,o_7U6U_7U?6L?`E>kAiu\8A^bh$WH<3+.6.4#q0.4sW>K;8P^OYM8W&M/*g[k`6
%Jo8ahm/Ou5X6ED0?b*04j+n>s*5mo*O#-Jm"g,LR\mtY=Rho*i>Nm?fbBcq+_\I':b>REQm#^I6G5LJl%[ba\TQdr(_Ei)F='*V"
%Z)q%u1AF4Ej?ji:KfS7&N#U%Qa.qmS:+k5f0H[4ZHO<r)<HsS^e^kR<6!T-ng2":qklVDU<Rpi/0M+nN@aP7'g&B3*(<Pl12]1kV
%m2:)@D(SS!j+J-u_3MHfM%cVCT2">8BqH1"+>..f+/-,)fZ0EWT!Hp9IlO<"iFApjSB'6#<W-7T630ec1/rs[G[1gEi?oLA&ZC+\
%$;Fc'jA-D$]>Hc%(.fJGCUF,k,;68S8lQC#jQPb9E<$D+b]`I[_g814&c,UXW@jR!PP-<AXc"d*0Bl]t8"^3U16CtHQSga"<I\\?
%+ae,geK=&m22jIoHY?'G"m\S*`/Ok0aquUfV(oDRN1T^p+M9e"i%h:(nKM4$P1a_r6@>;u0.CMh(a6JOod[oK\md6[c!F4@'l4$T
%Km[Q+i?hPA;[6E);[$BV8o\5SSF$f-Tkc/RYZhR#Y@E13$,`jX)6jQ-ZhbiK_WB!ZGF4FIp*HQ:)^!!0lc2V#E4r>P'@K`>)J)9R
%9uMJ6M\Tc29Gq6dl4pBZOq/`Re6]4Xb_<@^dYX0<:%&m$I/o(KFRfm77jlRtg1Q\;i3CM"o7H]n>K]\)=Z6hH@Jkb,Nic9f6EN1H
%Z<:25eFf5%ef"f[!B=)b=]McW$CXT\K"8+NMUp2d.bUmQ=hm^rCfZg;km*Ji<g>3WD5q,"R#b2>-&&H_#K4rfABbdr*.2@Vq95.W
%cYP>.flHSM/`nin%R.4#b_<@pKImG$fj[.Ojkqq!b\+@(HtJ<4ba*n-lkT,3b.a[iF^p.#3M0G,GVVl[fUjY)(Q6k\Lah^aD9aUK
%kDgT:[XaDO;_FI9S5l.8(WoXnNF_]n:'q'Q>1e'R%6*/VI[H4fdt13&<j,H>IDpT(Z7dYOh)HRtQG0j!$7Ucrd!+<'78m7*eFqub
%GENe1"PB696UbKc`0:WVg\G#-(Ws`!&M6]jC,O/F)BrUW[<El_Q:o[0eVqs`TiO>qZeHM_j-4s``TtMN&SLDo7p-qu/D.uZXY3.H
%`g$1^3Z5l',/@YTDig?,_&+MOcBnuN6g:<VoNF9uo2,tt%(#Yf6mo"PAq^?"9t1Ok`p@l(q)Dqm;Xq><6;4q=Du%B;49U#-9ZA8M
%&9cY\[p^.A!bg+4ZnCL;q=gu[YBUFZ4^&XE(K3!,erlSsGjB@"f)pF0E&VBoXh5"ee\]%eG/ep"XY6Yoh3]<oH13Ps@TR9FGpq3a
%4rIWD6e(:f*Z*nO;XPb/le:7um`:2-'I:tILUg6I?gpVKij)E>70p<Z$U2?)MgWA$L<M,YGua3RIf3V.+/eIPC0[gr0LtlFPo&SY
%WD]k]UQoE&`6e2QT'$6>1%]st=BX3J%&G(d[QD\HA[T'GKEN6RL6Su[:B['<qM8^AZ1<rIRhmMbGnhCF=s%$)+/eI`8m\R"]@=$d
%]O94r,1<Di's_q'FlG7q-P<DtJ_%$)OJPH`(]V?-ah;.9P\p%N*$[/]%@"+-('Qs;FV<8\1d6e[;nhf@4I6SBXs^m&g%q:\f0sO9
%IdNb;CW8:rFa?dn`kot80bo-.S%_Kgm9eHd"E9/c9U4P+4fk"Y>AJr0'r,\K[/n9]1n>(TFOrOILB,jU7W`EAMm8li*7T(c^$'XV
%I%%A64Z0ECCflktg7i@V&[@]1e5C"](Kbr-VRCCqVlI[3!I?nE;CJ.-?M&hjJ[T#?PV':C-HEm`UhoHj$kSi7&O#p1)`"IYj]-O^
%B"'kGa!pnWRb'#N/E>\Q8(i\-.k(-?7g4O&;rK2_IWNE,8dm;Ea\g)/Xhn):#3R>cMRcPA[kU\J(kR/B7bKcB9c.L*Yhif3(aQ/H
%j].mZ!<"UQ+#+k8m!EJRX8]@"pq;qo5Zn(2^?EN8#aAnZ'%3ig</E]lNjZbN(kNSnWEEk9!>iJI2WgVkKAD.Q8>MerkWiS)L3,Xl
%V\mg^*II0o%>K==pAt3qpc)F6;sdaGLkE@t>B>(U?,r;;:+6EJ&OQ"H9<M:S0si9s:-+-V&'bgU)/EY0LIdB6;&dhjCbFL04Udr_
%#"X^3G!r#`\H[]"%\=KLa#X!fo%#9VXK?kgV8ZfIk?9/L8\&g9+T^Ao.9Z8koI#p&>jhN#-7;ehO:,+l`3oTRD.:><'A(j,lBQk7
%SRbe/%hrCYL26`-8U$iJ)>]q>eg`[r+b"9:'ui'D^4Ib=2*Hh#]QCCWi?Zn_'=RFc_H/F8al:4fjXOpIh)nB@@P/YnkRI0:;cJMQ
%Q17Y)4-JmG0m"Z>5s=usUb_qc6pZ/.>qmG!m!D?.X5pK"pU,]T(pc:8&N0>7:@Em+_o7P.YKc+]kQ0G=W;i5dddfFK"oUQf]tuD'
%FUb'GY34PM/`VC<7VEn+iem:$Zq5IdjXoL79SEe\h8)9Mh"MMk<lLbJ]mOUD<?8*3;*4uF:L%7,fX1E)U:qc+[./d-.K=0];Q>c3
%XeHK1dS0OqGT\T$hQ(3re<\rV.CFued-IJA5M;Ko+I6aQ;<05)ACG8\(%ZFb^8%j]YF^LuI*B8C>j8JQVf'hi@!lNZJY/COj$UhN
%!]JqpY`,P!<'0q,k/(5D*_)<E"_B6GD7;?>'&EPAT^skA9sB/Gi3@.sA1r@\78B521\MisXa]q*oJM&u=)k(SjVY$Hgr%.D;O0$`
%IWN`^nW.-Eh9<q$N%#^9A)<)gU22T?_nkL_4lON\0e"5==*nGk,N<[0-*&-YWnQ#'E4a#8R^2<$[B4mjHg&JJnN"mP\i&l4g$26c
%Rs)b%fHQ4+Zn#ah1W=1a'sgucKsRLk9tOl#e>Hb6m>>&\,ZN!b>qsOSM2Kun.qYuPO)t"8`N=T!Hh]V?Cc*HiZ<PLQZ^*0JCY<IR
%Z=UM2X_'.h%b@p%`.bD%JLq+BfkT*Dj^9ZEc!%OqXC\G8bEddglkT,3^:pAJeSdP\^Lo.A`D`\>+N4N#(e]D[AU\M=nea_*R+9sn
%A>@M%d_WX.H"Y?TZi')XOudIA/9TZsYqL:7,+&kuL8On2bClqcB_u=K`I+2^mjN/J43p:W5LsA/r,V:FlSpGWU2b@pU@V%6#.#L.
%'S3OAd#5dC=gWh"g$UOqcJn1+P4\9@cI/Zo0Sa?CO+?2<B'E1;qu]`<Qkc,'+(sq%b$Ftcp+XM]0pbWfe\)Xd?Al31@i7YrQWp)O
%98k#"*31c3N+EF^+E=hOb_<=gd>9-iWIu;ab='I$c3r:u'=XId*,h!-j&q??D9`J`G`U>H*OW)"j*;Kbf6S7U1-HulpX%!=m#g/Y
%M+d;:p-j9WPQGTDmAf!M',U9;%daR@@;:[57r2J;Q)a2>%2<FAeL5*MI-AIRXUd@^MqRJ-o5V@UU[HZNljb`QI#b<0/f>5gN>;Df
%.q;-JWg[gU6&ZrkXEc0EA&nk,)K/k8(Wqc+7\O0t+,_MAm$MQW_D#aY8G7l]Ls.>[GnhB[g$K:@EQZ"jimhu6%T@'"Hcn#`$AEih
%N!7?ZNpNl+-^4l["Z0R;&=.<H\$e;h4Q.l6%>@%(VhYmMk_p3)m1+29U..=4S/t:I/7'&?mB1M3if*[m?/JTK>*XkW/:P@CiY#Tl
%BX+ng-_&%/eN%/k6K3n0Fa(,/AWSl<h`Zb2'm&?8YFm8]fJ.U1m.c>0KONHgO8sSni*DL)cLRu+JTmJ?4C^S#fbYC9/coru^:*/B
%F&Fj!Jp+>sUF_5;(`GV?;P*cYKcf<aCX0q&`_[*WB=l&d39tm(9QID6SE0f&5iLP:>i^$/")l8^EgBc1.(iiVMnCk.e"#goWHbNH
%`::8,0h3kcX3h.c0&*odKt>3aq>"jWq^O<'JNX15OI$g4_3Wm3U-3"hS98BgEV@T/p2B^hh@G"$-#9%<&N>Z3<R108J?OJEGKud6
%+6W!;.UK.W1$AJ:;hs/>`rSM_pHilM.*EG_^S#3D\TNrMK"r:A8`h=RFKk$r`%0u,Z==:Q*\ah$:!G*PI2:j1Ao1eV%I1q]=f![Q
%_P8ith-iKBg%Q2o<WurMj^SKcPpXB.CDZ9L<+7f315=(m?bfa"Ta8likijCJG&Ug(YF#]1)ePU2\l*\M4@\WR$=R,^PHu=:=PT"k
%9tp^J'ctWG3UVe#3+q,IoNEPs`K/^*k;\siB7Y-ZV9E?`+_jOsVHI_%gsJu7%^?::P0.>WNB)PA>cl[8KeibPe=$D7o.4U8Dg0uI
%*\`,b&tUB$#A9FEan_P)eg`["F+TH5`o*1H^9@DeqHZ+"jCCsO8XmA$49daJ9jU(;`oo3`r$9SpDrE(t_-r^jYo#^%16AS9*!^@<
%Nsg`C5hE#$ZbCK2f&J$(:K;2\*0rK08=q-+1^RQJ!*ST3m5se>j/]c;)qfGnVs."J6gZu)PF7ru_'d<XVecqf%0HGI8Z?b/am:<-
%f5b[Yn0:h6Deu7.p'1f\DI:SX0ct&pHO<uX#4ZbO#?V/KH,(MFEY$\;)^pop?F%_H)QH=06a]('-W`Sr=LBU4'm$'"O3@HolK)8)
%ata1FIU&aBqubVg\$HHJ@Q`@n"D>]$S?hT4ConVoRWA8]dYaO\5AWTYa8TM+h-:_XhnF08Hh.pS19[e@FVGASHhT&W8m@g=q8)S&
%?g!r00lcpI21!baHjU=#QnniaI(oQ0bmO>-F5KpV\qgp<0>i9UKpAudWJ6'Z<8A:>dh%O,;s[TXCD^f&FM<J\YQinuJCb?m=AqI%
%orJ%CH/pQ?22N]TmmVE*i3;=;pal9A&fKIYAFWeB=iE#'8phBZHgA?'$1i/b^8/hm[64rdCZi(gES1[FHmu$G&B6;X.J?EG4%8%#
%T-t)k=_3.<DF$qs@FcI&$g,T6(IY&i`suZ3I6IYkh+lU/7JCJM+F#YJKHG#YkN`HE@D7c$okX?6WXr,-RbAmbaHZfj'@(2)c;Nq?
%_V)$-=c*8T31Eo-9DP4eB.oV[@<oooaXNb).\*X>+Ip\+S-AU#c=Rg:i[:XCp4E*"ARA?m](&&`TQ8Tl@I#b:X^Wne&*C1Jb[p)s
%Q`X^L>7]l%/(TQV@KfsHk-EO]Aa@0;[]6lS4daDn1RG3KF4gr\j"u0U:$^+&n8%HtA<qu^$`?M!FfIQ8N":=u0GQ>7J^-/ci?Wpj
%*ti4u_d)uj=qU:4o6N_2*Z@!L:7,)UH)coL8/tcN+#Y)FkG.i4a7hCPj-4s`8aFCo0SK/1"kQj2M3\\?5uH5u<FQ73JuSaR$57h1
%eC;L=-o",B<E4NMba#LuM6gZpH<,S\1HcA*g%geAEE6UN5NGhSSD!9>o5W'iUsaDGIMd,%=qLdnSI?GqRMV2rS>DUB$GR9%>@N2l
%)pJb,KSuSeVJ%[8\IL]2/t?Ke+k)]!bD$pP#r5@iJHG9G^$B?Q?p'1i60<f&o@YYRj,ACXg$?ZUE"'$Z47#9Aj5qfH96C`M$#:k[
%r'Hdoo7TJ-ciW>`a4Q>^(c?rRQFUpQ6sSqZ9(0uXnU5.oXhK^G,.$ul7-AhWAsKR4$4k/CG),lQ@:)q*]!4FepZV&t\5K6#YO,d$
%Zk91G)].==;M[%AJQ$BH<Hpdr@'>b\B?Z(9@t:XSddpR$935W=0PdkJ$^!BlAKPE-'cr@fm1/`-cG$+@FlRlea1o[h.-iD&HRr;K
%@i6Z:]B>[a+ln0[%$n<.Ppl'l1P-:sb#Z#d+j!oRZB_gIJ7S?,,$X$6L"jkP<n7Tp*\44>f+mms[_AQeFlRle9DDZm%IPa3:7oG\
%<ABF2XI\d5fIr,'REcX5LX,-%<HMkrF@=?)Ze]%BS5#D*0MBbkKeu(d!lM+Q+c.mEZH?<VKh#Wr]>K#dZgXl8XV/S)qU_1P@5g'1
%7eN?+>'XikU%56uYDP)i*`*m3.U!\07,8t?[Mul5Y&XAcl!2jFR>nB+3>!u$C[[&ISo0A..U@="A1PtiB-:j2Vs3JR<9RN9LVC:e
%Xh$V5#",m:XlBe:LCjbLbhNNJ(h19iVuP[dN&\$Jk>'\dk/piY`2\o)h>Rs&p4<C*q94r,h2D*fCr2#]p6ko<F^!C%0d#TFHR`=%
%qCnbm^:3TP]i5@5ZEos1PF)tI(\aIs`"3$JDDTHY0kH!NbaIf8F5^qk,r01O[0?sVB*!ZG)q.H]]Ua2q_F_df#p,#8m0<$!]"Y*%
%[0dGbXQa5mA&0^DEC7'6R\)A;`Z?G,q=S)?L(5o_i`;/nUC="5J1Kd!<fq!&pat3C%KeS9P6!J9=W#R9c,,RFY0%a^E>9O3b.TEp
%O&Pa8'sCV^R!SRsLb!9@!1s`a$*s7MJ@a&I2O,-VFQc;X[3kthK<lrA"`rWRqZe6(HP0lV8`8'k-UH=T"M!FW8W^>-JPV&m";f;&
%3W#D*f.&o\?r$jRRPO[":`h-t)!Va/KTltS-H(=+3ihsjb?eZ-V".:51Z1mXi!.7>J?+rga&!dKpk=hk\65Kl[?$r<P#Jg[)N=X&
%cgpE/mr>MEVq/9@&B?9eCMgImI\"q@H=,Fs_CdQ;ZI<'P1T$YM*A6ssdrsJh:`$bX;mCWM/fZg>2l:o"a=ofU2E+lH#&]Zq16pI!
%`6WmuL/3&T1\En"Y#UFJC].F,=<7S^CN&r/<k?:"<UhGMrfHclTBO;Kqkl1eN3!2WfcR<]kDnb`\^7`M%c]Od<Gg@G/*FN/kTlMg
%$A!sLVAs3p:#b\ND*6o*ll#>5`kJ@h[>GR>ps";LYiqb^*FHt6pmN@t"WOSY$L!?W.Sp?31te<GS^!>PDX^]063DjF.ooI;&d*j!
%(ZR")+!)B-MHZAALI6BXA[XDWj(s->M/1WbQKZ%pd=q.>bTbmOXa&lAohis<R8sfoP#N+9]Q0=i;*W/"FpGY+[`5Rm6?8YMoF-Qh
%9&$6cLj@$d]!+!OZOpf]JUEupn#:;4,`!b-n"igb[Xf]667D+^1i<$j+$ra?`0kQqCIem3AF6@S,#DLR1jTU2E@))hk.4X<"(dmZ
%PW*'d6+2.A6_@Q!`3eF+:u7RhpF+qmGVm"do$L(dDg9-HR^D#oPqEVkd3-$W5'FRM^MQiXVHl%e?AN>SmAa=eUo7nSY*oOG6oCHW
%ea+#lTr]YIe#o,co:8Jk9f:*5;DjqeeL]UTY4>+^c!E+HVsHJP?)6g:6i<Hl[[B3n4o!8[op`&g^Y*4JZh<68gXL/M*rKWRLauuS
%;/u?"D<<c]%t:k0r+>92Dml(kCd%R<?83O7loSrfAF)a=pc6N#&o>49<:f4AX&51&L"*_iaW\Y8#c<i\EL&>.OuV2:k!E7,(3)mB
%lm?Eikn'4erOa:WcJaN%.VX/C+"bT[h(.XJUjYb@91Z[TZR(%#6HaX"g(>-m.4K<rbIGpO[?`h66sOt3--k0pj$L*)0F-Jkk)$Dh
%3V\Bb5c[B-'VHfUb"b]R,/Qhp([\PK9p"PDl0X)s3*kE=kTX;64ea%!Nc4=,EY;MDhUc_2<U%YnR_KF*S3mKX%!k&cMi/HO7QAsc
%F$Xt;>fdnR#RABgar=PPkO#LrlBA?hM\_FHrK%iSC:DNcc\RYRoc;"(iTir'h*0CaKC"0nAnJlcAg8ke9[3;WMhaN/Ad(%cDDKM%
%Hqss;&Jr<mg;V+:75kP=WQbK:mJHj6'5L!Cp()E`+"Xr#L*t3c.Jo.*(Fa\C,=_F<%B^shoc`Ggg&S"Dk;?_)rp7in[h'*<*n[h#
%9LI-A`"3R8RK"f"9%oqi_OaCYdQ32'0iSB:k6/N!7WB^:5i8:$`Sb,#S.qJ*+/eHeb$IEfMrHgGm*(bHe@R.)6>k$rb;aM;mH,+G
%EMAeN%n9^AM+d\/Vm^6^KsJ'I7aa/b294UF+6@3jbVo[,%WK$tT2f3La"en#$f9okI7N7SHsNS)@>l2`UT71Q;SK*`(!qQhh%9OE
%)<0]fA&nb1C0*YWH?V_I8=]&WF/:B6Rn*a%Coq0FB[]e@'m!I3XENW=&;.uN<dVi4S>ktUFpV+!OgUO:Fk2`3,^@;%WGD(Ee>sk4
%nXVkQlkr/(QuY-W-C#\dA%TQ]=B\TRbf.-&Ml(C9P-rmcQc-M$\[ni=DQK#WmP(9qCOB!QlQSXem:3hh\Wqh+_3"/SiW.21%'a15
%qgK;ja9#(U!4FV:J2"BZ5O49=O;=)cjAH;JZT2&@6.D3><k?*&QrD#q)Ea@0KY-/*cIY!T\Q5,BEZ[BR9lBc!Y=%VJd&cIiFFLdf
%>G!Lql-R!S1i'T1j^@Y#ep>2;WJV/e86T)HAf\5Z@U0:2<qIEJmAqg(ZbG4>/F,oI`I+2Z0<0#oqSVd0-/aMB=o\eR@,#p--&0dm
%3XN-KJ2knWgIAh(0r0HQ9)+:SO>[h7't3#MQV#oXU<"1>[9"XE_^&A2/[*$d0tZ7M5#0fJe[SWp@Vk:5I5e]FO)og_n9GgmJ#Q!J
%WLk1ZjGpp7+pr/B$3WY(a9V)pi>$Fq/9P,5Ki=A/opHn6aVnfke&&Vdlf9V#_P:\mIU+ZMkNn*6>o+BQ.j)+`,/F?I3MDX3[dn/G
%6gIfhT2Pj3:^,EdCTej8oRk*8mP#I*Wf:I$X7/>i]QTDkB"5pESMl?Ffkk4n%E@pOB"3*)I%7PsWckL*`:4Ii9\[NY;bdos^8SKD
%i%/A;O4(bE`ONr;8cW?=UE5]p9s#)c_Um/G7ulC5rX]M34Q&cdrB@*jNdFoI"?[@$iRmVq5,'.g*iJ:]Wa)S50kL*a?:CqK[>)DK
%Z@GfP8rL)3Q?b^Z_\eR&\`a@RZn2[*G([8%2*,h$*91rg7b%h^0_Wk4F,uu[SoLr;D$(0/aA@AkLIRn_"=Lk&WVW@SeuD)2212J1
%\"!MMZHp?4(>]0d<qp/'"=E<#X&j\)Q>jgfJJDL[5OdTukPm2s$X\<&_rAateNrQY(sB@X5:E]&K.GuS_M4Z=.*M%M5=&\c>KFiV
%qk=_T.Rf$@ai?@[iJ-mgLT9\p)*=^PKpocJgFS(WSld89K]P'f&\9elZmWMOY+DX\2oa^AN3/%gBNS+*Gt4Xp&0"lN(gS$Z5T0"-
%54^aB5#0]Ge[\^4@eSnn>&U!9l%*k>-[L8R/G8uVr%YCForc`#Yfn-i+<7S[N0*l&(3a2ibFqNdG!#O5,T`T;,]0*q4N>$LEH_2T
%8N]0GK!jFo5#'r,U9`B>Q'c'.Y*\,IcTg/krq\;Jo3_OV:]L&_s%r]%s(]`ldsjC8Bu\oB*uFjes-WiFn,N3uD1DCHJ,\c[chQGe
%rpuc]o&p&Lf0B6.J,8bDs7UC1no'$S?[r(JVgn\Yr\OK<8H&D.?iU%Bs5RJcqWD5cp5f7E^[VU_RMYnXhu3M'q@A)Q2ua[Sr9Ho~>
%AI9_PrivateDataEnd
